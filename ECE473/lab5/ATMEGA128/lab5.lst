
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  000041ac  00004240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  008001a8  008001a8  000042e8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000042e8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00004300  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000052ea  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf9  00000000  00000000  00009732  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018ec  00000000  00000000  0000a32b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006e8  00000000  00000000  0000bc18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009b9  00000000  00000000  0000c300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000032a4  00000000  00000000  0000ccb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000ff5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 02 	jmp	0x460	; 0x460 <__ctors_end>
       4:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
       8:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
       c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      10:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      14:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__vector_5>
      18:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      1c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      20:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      24:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      28:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      2c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      30:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__vector_12>
      34:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      38:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      3c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      40:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__vector_16>
      44:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      48:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__vector_18>
      4c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      50:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      54:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__vector_21>
      58:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      5c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      60:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      64:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      68:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__vector_26>
      6c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      70:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      74:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      78:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      7c:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      80:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      84:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__vector_33>
      88:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__bad_interrupt>
      8c:	8b 02       	muls	r24, r27
      8e:	93 02       	muls	r25, r19
      90:	9b 02       	muls	r25, r27
      92:	a3 02       	muls	r26, r19
      94:	ab 02       	muls	r26, r27
      96:	b4 02       	muls	r27, r20
      98:	bd 02       	muls	r27, r29
      9a:	7b 02       	muls	r23, r27
      9c:	83 02       	muls	r24, r19
      9e:	11 04       	cpc	r1, r1
      a0:	09 04       	cpc	r0, r9
      a2:	04 04       	cpc	r0, r4
      a4:	2e 04       	cpc	r2, r14
      a6:	21 04       	cpc	r2, r1
      a8:	29 04       	cpc	r2, r9
      aa:	19 04       	cpc	r1, r9
      ac:	e2 03       	fmuls	r22, r18
      ae:	da 03       	fmulsu	r21, r18
      b0:	d5 03       	fmuls	r21, r21
      b2:	cd 03       	fmulsu	r20, r21
      b4:	36 04       	cpc	r3, r6
      b6:	ea 03       	fmulsu	r22, r18
      b8:	c0 03       	fmuls	r20, r16
      ba:	a8 03       	fmulsu	r18, r16
      bc:	56 04       	cpc	r5, r6
      be:	ff 03       	fmulsu	r23, r23
      c0:	f7 03       	fmuls	r23, r23
      c2:	ef 03       	fmulsu	r22, r23
      c4:	76 04       	cpc	r7, r6
      c6:	b0 03       	fmuls	r19, r16
      c8:	66 04       	cpc	r6, r6
      ca:	b8 03       	fmulsu	r19, r16
      cc:	83 04       	cpc	r8, r3
      ce:	4e 04       	cpc	r4, r14
      d0:	6e 04       	cpc	r6, r14
      d2:	c8 03       	fmulsu	r20, r16
      d4:	46 04       	cpc	r4, r6
      d6:	3e 04       	cpc	r3, r14
      d8:	5e 04       	cpc	r5, r14
      da:	a3 03       	fmuls	r18, r19
      dc:	71 03       	mulsu	r23, r17
      de:	69 03       	fmul	r22, r17
      e0:	79 03       	fmul	r23, r17
      e2:	7b 04       	cpc	r7, r11
      e4:	5c 03       	fmul	r21, r20
      e6:	54 03       	mulsu	r21, r20
      e8:	7e 03       	fmul	r23, r22
      ea:	37 03       	mulsu	r19, r23
      ec:	9b 03       	fmulsu	r17, r19
      ee:	64 03       	mulsu	r22, r20
      f0:	47 03       	mulsu	r20, r23
      f2:	3f 03       	fmul	r19, r23
      f4:	8b 03       	fmulsu	r16, r19
      f6:	4f 03       	fmul	r20, r23
      f8:	83 03       	fmuls	r16, r19
      fa:	2f 03       	fmul	r18, r23
      fc:	15 03       	mulsu	r17, r21
      fe:	93 03       	fmuls	r17, r19
     100:	05 03       	mulsu	r16, r21
     102:	fd 02       	muls	r31, r29
     104:	22 03       	mulsu	r18, r18
     106:	1a 03       	fmul	r17, r18
     108:	27 03       	mulsu	r18, r23
     10a:	f8 02       	muls	r31, r24
     10c:	0d 03       	fmul	r16, r21
     10e:	e0 02       	muls	r30, r16
     110:	f0 02       	muls	r31, r16
     112:	db 02       	muls	r29, r27
     114:	d3 02       	muls	r29, r19
     116:	cb 02       	muls	r28, r27
     118:	c6 02       	muls	r28, r22
     11a:	e8 02       	muls	r30, r24
     11c:	8d 05       	cpc	r24, r13
     11e:	ab 05       	cpc	r26, r11
     120:	87 05       	cpc	r24, r7
     122:	99 05       	cpc	r25, r9
     124:	7b 05       	cpc	r23, r11
     126:	81 05       	cpc	r24, r1
     128:	7b 05       	cpc	r23, r11
     12a:	81 05       	cpc	r24, r1
     12c:	b1 05       	cpc	r27, r1
     12e:	8d 05       	cpc	r24, r13
     130:	ab 05       	cpc	r26, r11
     132:	87 05       	cpc	r24, r7
     134:	99 05       	cpc	r25, r9
     136:	93 05       	cpc	r25, r3
     138:	75 05       	cpc	r23, r5
     13a:	93 05       	cpc	r25, r3
     13c:	75 05       	cpc	r23, r5
     13e:	db 05       	cpc	r29, r11
     140:	17 06       	cpc	r1, r23
     142:	cf 05       	cpc	r28, r15
     144:	47 06       	cpc	r4, r23
     146:	cf 05       	cpc	r28, r15
     148:	0b 06       	cpc	r0, r27
     14a:	05 06       	cpc	r0, r21
     14c:	75 05       	cpc	r23, r5
     14e:	e1 05       	cpc	r30, r1
     150:	75 05       	cpc	r23, r5
     152:	f3 05       	cpc	r31, r3
     154:	9f 05       	cpc	r25, r15
     156:	35 06       	cpc	r3, r21
     158:	7b 05       	cpc	r23, r11
     15a:	29 06       	cpc	r2, r25
     15c:	b7 05       	cpc	r27, r7
     15e:	2f 06       	cpc	r2, r31
     160:	bd 05       	cpc	r27, r13
     162:	3b 06       	cpc	r3, r27
     164:	ff 05       	cpc	r31, r15
     166:	a5 05       	cpc	r26, r5
     168:	9f 05       	cpc	r25, r15
     16a:	e7 05       	cpc	r30, r7
     16c:	c3 05       	cpc	r28, r3
     16e:	8d 05       	cpc	r24, r13
     170:	ab 05       	cpc	r26, r11
     172:	87 05       	cpc	r24, r7
     174:	99 05       	cpc	r25, r9
     176:	7b 05       	cpc	r23, r11
     178:	81 05       	cpc	r24, r1
     17a:	7b 05       	cpc	r23, r11
     17c:	81 05       	cpc	r24, r1
     17e:	b1 05       	cpc	r27, r1
     180:	8d 05       	cpc	r24, r13
     182:	11 06       	cpc	r1, r17
     184:	a5 05       	cpc	r26, r5
     186:	87 05       	cpc	r24, r7
     188:	93 05       	cpc	r25, r3
     18a:	75 05       	cpc	r23, r5
     18c:	93 05       	cpc	r25, r3
     18e:	75 05       	cpc	r23, r5
     190:	db 05       	cpc	r29, r11
     192:	1d 06       	cpc	r1, r29
     194:	ed 05       	cpc	r30, r13
     196:	b1 05       	cpc	r27, r1
     198:	23 06       	cpc	r2, r19
     19a:	e1 05       	cpc	r30, r1
     19c:	b7 05       	cpc	r27, r7
     19e:	bd 05       	cpc	r27, r13
     1a0:	9f 05       	cpc	r25, r15
     1a2:	a5 05       	cpc	r26, r5
     1a4:	41 06       	cpc	r4, r17
     1a6:	c3 05       	cpc	r28, r3
     1a8:	5f 06       	cpc	r5, r31
     1aa:	83 06       	cpc	r8, r19
     1ac:	59 06       	cpc	r5, r25
     1ae:	7d 06       	cpc	r7, r29
     1b0:	01 07       	cpc	r16, r17
     1b2:	fb 06       	cpc	r15, r27
     1b4:	59 06       	cpc	r5, r25
     1b6:	83 06       	cpc	r8, r19
     1b8:	89 06       	cpc	r8, r25
     1ba:	65 06       	cpc	r6, r21
     1bc:	0d 07       	cpc	r16, r29
     1be:	59 06       	cpc	r5, r25
     1c0:	5f 06       	cpc	r5, r31
     1c2:	7d 06       	cpc	r7, r29
     1c4:	59 06       	cpc	r5, r25
     1c6:	c5 06       	cpc	r12, r21
     1c8:	59 06       	cpc	r5, r25
     1ca:	71 06       	cpc	r7, r17
     1cc:	5f 06       	cpc	r5, r31
     1ce:	a1 06       	cpc	r10, r17
     1d0:	89 06       	cpc	r8, r25
     1d2:	65 06       	cpc	r6, r21
     1d4:	9b 06       	cpc	r9, r27
     1d6:	1f 07       	cpc	r17, r31
     1d8:	71 06       	cpc	r7, r17
     1da:	8f 06       	cpc	r8, r31
     1dc:	2b 07       	cpc	r18, r27
     1de:	dd 06       	cpc	r13, r29
     1e0:	8f 06       	cpc	r8, r31
     1e2:	f5 06       	cpc	r15, r21
     1e4:	59 06       	cpc	r5, r25
     1e6:	5f 06       	cpc	r5, r31
     1e8:	7d 06       	cpc	r7, r29
     1ea:	59 06       	cpc	r5, r25
     1ec:	bf 06       	cpc	r11, r31
     1ee:	65 06       	cpc	r6, r21
     1f0:	83 06       	cpc	r8, r19
     1f2:	59 06       	cpc	r5, r25
     1f4:	71 06       	cpc	r7, r17
     1f6:	5f 06       	cpc	r5, r31
     1f8:	a1 06       	cpc	r10, r17
     1fa:	89 06       	cpc	r8, r25
     1fc:	65 06       	cpc	r6, r21
     1fe:	19 07       	cpc	r17, r25
     200:	b3 06       	cpc	r11, r19
     202:	ad 06       	cpc	r10, r29
     204:	77 06       	cpc	r7, r23
     206:	a7 06       	cpc	r10, r23
     208:	95 06       	cpc	r9, r21
     20a:	77 06       	cpc	r7, r23
     20c:	e9 06       	cpc	r14, r25
     20e:	ef 06       	cpc	r14, r31
     210:	e3 06       	cpc	r14, r19
     212:	b3 06       	cpc	r11, r19
     214:	ad 06       	cpc	r10, r29
     216:	77 06       	cpc	r7, r23
     218:	a7 06       	cpc	r10, r23
     21a:	95 06       	cpc	r9, r21
     21c:	07 07       	cpc	r16, r23
     21e:	13 07       	cpc	r17, r19
     220:	9b 06       	cpc	r9, r27
     222:	cb 06       	cpc	r12, r27
     224:	d1 06       	cpc	r13, r17
     226:	db 0b       	sbc	r29, r27
     228:	cf 0b       	sbc	r28, r31
     22a:	c9 0b       	sbc	r28, r25
     22c:	bd 0b       	sbc	r27, r29
     22e:	b7 0b       	sbc	r27, r23
     230:	ab 0b       	sbc	r26, r27
     232:	a5 0b       	sbc	r26, r21
     234:	9f 0b       	sbc	r25, r31
     236:	99 0b       	sbc	r25, r25
     238:	93 0b       	sbc	r25, r19
     23a:	87 0b       	sbc	r24, r23
     23c:	81 0b       	sbc	r24, r17
     23e:	7b 0b       	sbc	r23, r27
     240:	6f 0b       	sbc	r22, r31
     242:	69 0b       	sbc	r22, r25
     244:	5d 0b       	sbc	r21, r29
     246:	57 0b       	sbc	r21, r23
     248:	4b 0b       	sbc	r20, r27
     24a:	45 0b       	sbc	r20, r21
     24c:	39 0b       	sbc	r19, r25
     24e:	33 0b       	sbc	r19, r19
     250:	2d 0b       	sbc	r18, r29
     252:	27 0b       	sbc	r18, r23
     254:	21 0b       	sbc	r18, r17
     256:	15 0b       	sbc	r17, r21
     258:	0f 0b       	sbc	r16, r31
     25a:	09 0b       	sbc	r16, r25
     25c:	03 0b       	sbc	r16, r19
     25e:	fd 0a       	sbc	r15, r29
     260:	f1 0a       	sbc	r15, r17
     262:	eb 0a       	sbc	r14, r27
     264:	df 0a       	sbc	r13, r31
     266:	d9 0a       	sbc	r13, r25
     268:	d3 0a       	sbc	r13, r19
     26a:	cd 0a       	sbc	r12, r29
     26c:	c1 0a       	sbc	r12, r17
     26e:	bb 0a       	sbc	r11, r27
     270:	af 0a       	sbc	r10, r31
     272:	a9 0a       	sbc	r10, r25
     274:	9d 0a       	sbc	r9, r29
     276:	97 0a       	sbc	r9, r23
     278:	8b 0a       	sbc	r8, r27
     27a:	85 0a       	sbc	r8, r21
     27c:	79 0a       	sbc	r7, r25
     27e:	73 0a       	sbc	r7, r19
     280:	67 0a       	sbc	r6, r23
     282:	61 0a       	sbc	r6, r17
     284:	5b 0a       	sbc	r5, r27
     286:	55 0a       	sbc	r5, r21
     288:	4f 0a       	sbc	r4, r31
     28a:	43 0a       	sbc	r4, r19
     28c:	3d 0a       	sbc	r3, r29
     28e:	37 0a       	sbc	r3, r23
     290:	31 0a       	sbc	r3, r17
     292:	2b 0a       	sbc	r2, r27
     294:	1f 0a       	sbc	r1, r31
     296:	19 0a       	sbc	r1, r25
     298:	0d 0a       	sbc	r0, r29
     29a:	07 0a       	sbc	r0, r23
     29c:	01 0a       	sbc	r0, r17
     29e:	fb 09       	sbc	r31, r11
     2a0:	ef 09       	sbc	r30, r15
     2a2:	e9 09       	sbc	r30, r9
     2a4:	e3 09       	sbc	r30, r3
     2a6:	dd 09       	sbc	r29, r13
     2a8:	d7 09       	sbc	r29, r7
     2aa:	cb 09       	sbc	r28, r11
     2ac:	c5 09       	sbc	r28, r5
     2ae:	b9 09       	sbc	r27, r9
     2b0:	b3 09       	sbc	r27, r3
     2b2:	ad 09       	sbc	r26, r13
     2b4:	a7 09       	sbc	r26, r7
     2b6:	9b 09       	sbc	r25, r11
     2b8:	95 09       	sbc	r25, r5
     2ba:	8f 09       	sbc	r24, r15
     2bc:	89 09       	sbc	r24, r9
     2be:	7d 09       	sbc	r23, r13
     2c0:	77 09       	sbc	r23, r7
     2c2:	71 09       	sbc	r23, r1
     2c4:	6b 09       	sbc	r22, r11
     2c6:	65 09       	sbc	r22, r5
     2c8:	59 09       	sbc	r21, r9
     2ca:	53 09       	sbc	r21, r3
     2cc:	47 09       	sbc	r20, r7
     2ce:	41 09       	sbc	r20, r1
     2d0:	35 09       	sbc	r19, r5
     2d2:	2f 09       	sbc	r18, r15
     2d4:	23 09       	sbc	r18, r3
     2d6:	1d 09       	sbc	r17, r13
     2d8:	11 09       	sbc	r17, r1
     2da:	0b 09       	sbc	r16, r11
     2dc:	05 09       	sbc	r16, r5
     2de:	ff 08       	sbc	r15, r15
     2e0:	f9 08       	sbc	r15, r9
     2e2:	ed 08       	sbc	r14, r13
     2e4:	e7 08       	sbc	r14, r7
     2e6:	db 08       	sbc	r13, r11
     2e8:	d5 08       	sbc	r13, r5
     2ea:	cf 08       	sbc	r12, r15
     2ec:	c9 08       	sbc	r12, r9
     2ee:	bd 08       	sbc	r11, r13
     2f0:	b7 08       	sbc	r11, r7
     2f2:	b1 08       	sbc	r11, r1
     2f4:	ab 08       	sbc	r10, r11
     2f6:	9f 08       	sbc	r9, r15
     2f8:	99 08       	sbc	r9, r9
     2fa:	8d 08       	sbc	r8, r13
     2fc:	87 08       	sbc	r8, r7
     2fe:	7b 08       	sbc	r7, r11
     300:	75 08       	sbc	r7, r5
     302:	69 08       	sbc	r6, r9
     304:	63 08       	sbc	r6, r3
     306:	57 08       	sbc	r5, r7
     308:	51 08       	sbc	r5, r1
     30a:	45 08       	sbc	r4, r5
     30c:	3f 08       	sbc	r3, r15
     30e:	33 08       	sbc	r3, r3
     310:	2d 08       	sbc	r2, r13
     312:	27 08       	sbc	r2, r7
     314:	21 08       	sbc	r2, r1
     316:	1b 08       	sbc	r1, r11
     318:	0f 08       	sbc	r0, r15
     31a:	09 08       	sbc	r0, r9
     31c:	03 08       	sbc	r0, r3
     31e:	f7 07       	cpc	r31, r23
     320:	f1 07       	cpc	r31, r17
     322:	e5 07       	cpc	r30, r21
     324:	df 07       	cpc	r29, r31
     326:	d3 07       	cpc	r29, r19
     328:	cd 07       	cpc	r28, r29
     32a:	c1 07       	cpc	r28, r17
     32c:	bb 07       	cpc	r27, r27
     32e:	b5 07       	cpc	r27, r21
     330:	af 07       	cpc	r26, r31
     332:	a3 07       	cpc	r26, r19
     334:	9d 07       	cpc	r25, r29
     336:	91 07       	cpc	r25, r17
     338:	8b 07       	cpc	r24, r27
     33a:	7f 07       	cpc	r23, r31
     33c:	79 07       	cpc	r23, r25
     33e:	6d 07       	cpc	r22, r29
     340:	67 07       	cpc	r22, r23
     342:	61 07       	cpc	r22, r17
     344:	5b 07       	cpc	r21, r27
     346:	55 07       	cpc	r21, r21
     348:	49 07       	cpc	r20, r25
     34a:	43 07       	cpc	r20, r19
     34c:	3d 07       	cpc	r19, r29
     34e:	e1 0b       	sbc	r30, r17
     350:	0b 0c       	add	r0, r11
     352:	f9 0b       	sbc	r31, r25
     354:	0b 0c       	add	r0, r11
     356:	f9 0b       	sbc	r31, r25
     358:	0b 0c       	add	r0, r11
     35a:	f9 0b       	sbc	r31, r25
     35c:	2f 0c       	add	r2, r15
     35e:	f9 0b       	sbc	r31, r25
     360:	2f 0c       	add	r2, r15
     362:	17 0c       	add	r1, r7
     364:	05 0c       	add	r0, r5
     366:	47 0c       	add	r4, r7
     368:	05 0c       	add	r0, r5
     36a:	35 0c       	add	r3, r5
     36c:	23 0c       	add	r2, r3
     36e:	11 0c       	add	r1, r1
     370:	f9 0b       	sbc	r31, r25
     372:	11 0c       	add	r1, r1
     374:	f9 0b       	sbc	r31, r25
     376:	11 0c       	add	r1, r1
     378:	f9 0b       	sbc	r31, r25
     37a:	29 0c       	add	r2, r9
     37c:	f9 0b       	sbc	r31, r25
     37e:	29 0c       	add	r2, r9
     380:	17 0c       	add	r1, r7
     382:	3b 0c       	add	r3, r11
     384:	41 0c       	add	r4, r1
     386:	f9 0b       	sbc	r31, r25
     388:	05 0c       	add	r0, r5
     38a:	4d 0c       	add	r4, r13
     38c:	23 0c       	add	r2, r3
     38e:	96 0d       	add	r25, r6
     390:	93 0d       	add	r25, r3
     392:	90 0d       	add	r25, r0
     394:	8d 0d       	add	r24, r13
     396:	8a 0d       	add	r24, r10
     398:	87 0d       	add	r24, r7
     39a:	84 0d       	add	r24, r4
     39c:	81 0d       	add	r24, r1
     39e:	7e 0d       	add	r23, r14
     3a0:	7b 0d       	add	r23, r11
     3a2:	53 0d       	add	r21, r3
     3a4:	99 0d       	add	r25, r9
     3a6:	96 0d       	add	r25, r6
     3a8:	93 0d       	add	r25, r3
     3aa:	90 0d       	add	r25, r0
     3ac:	8d 0d       	add	r24, r13
     3ae:	8a 0d       	add	r24, r10
     3b0:	87 0d       	add	r24, r7
     3b2:	84 0d       	add	r24, r4
     3b4:	81 0d       	add	r24, r1
     3b6:	7e 0d       	add	r23, r14
     3b8:	7b 0d       	add	r23, r11
     3ba:	53 0d       	add	r21, r3
     3bc:	99 0d       	add	r25, r9
     3be:	5a 15       	cp	r21, r10
     3c0:	31 15       	cp	r19, r1
     3c2:	31 15       	cp	r19, r1
     3c4:	31 15       	cp	r19, r1
     3c6:	31 15       	cp	r19, r1
     3c8:	31 15       	cp	r19, r1
     3ca:	31 15       	cp	r19, r1
     3cc:	31 15       	cp	r19, r1
     3ce:	5a 15       	cp	r21, r10
     3d0:	31 15       	cp	r19, r1
     3d2:	31 15       	cp	r19, r1
     3d4:	31 15       	cp	r19, r1
     3d6:	31 15       	cp	r19, r1
     3d8:	31 15       	cp	r19, r1
     3da:	31 15       	cp	r19, r1
     3dc:	31 15       	cp	r19, r1
     3de:	64 15       	cp	r22, r4
     3e0:	31 15       	cp	r19, r1
     3e2:	31 15       	cp	r19, r1
     3e4:	31 15       	cp	r19, r1
     3e6:	31 15       	cp	r19, r1
     3e8:	31 15       	cp	r19, r1
     3ea:	31 15       	cp	r19, r1
     3ec:	31 15       	cp	r19, r1
     3ee:	31 15       	cp	r19, r1
     3f0:	31 15       	cp	r19, r1
     3f2:	31 15       	cp	r19, r1
     3f4:	31 15       	cp	r19, r1
     3f6:	31 15       	cp	r19, r1
     3f8:	31 15       	cp	r19, r1
     3fa:	31 15       	cp	r19, r1
     3fc:	31 15       	cp	r19, r1
     3fe:	64 15       	cp	r22, r4
     400:	31 15       	cp	r19, r1
     402:	31 15       	cp	r19, r1
     404:	31 15       	cp	r19, r1
     406:	31 15       	cp	r19, r1
     408:	31 15       	cp	r19, r1
     40a:	31 15       	cp	r19, r1
     40c:	31 15       	cp	r19, r1
     40e:	31 15       	cp	r19, r1
     410:	31 15       	cp	r19, r1
     412:	31 15       	cp	r19, r1
     414:	31 15       	cp	r19, r1
     416:	31 15       	cp	r19, r1
     418:	31 15       	cp	r19, r1
     41a:	31 15       	cp	r19, r1
     41c:	31 15       	cp	r19, r1
     41e:	7b 15       	cp	r23, r11
     420:	31 15       	cp	r19, r1
     422:	31 15       	cp	r19, r1
     424:	31 15       	cp	r19, r1
     426:	31 15       	cp	r19, r1
     428:	31 15       	cp	r19, r1
     42a:	31 15       	cp	r19, r1
     42c:	31 15       	cp	r19, r1
     42e:	7f 15       	cp	r23, r15
     430:	31 15       	cp	r19, r1
     432:	31 15       	cp	r19, r1
     434:	31 15       	cp	r19, r1
     436:	31 15       	cp	r19, r1
     438:	31 15       	cp	r19, r1
     43a:	31 15       	cp	r19, r1
     43c:	31 15       	cp	r19, r1
     43e:	31 15       	cp	r19, r1
     440:	31 15       	cp	r19, r1
     442:	31 15       	cp	r19, r1
     444:	31 15       	cp	r19, r1
     446:	31 15       	cp	r19, r1
     448:	31 15       	cp	r19, r1
     44a:	31 15       	cp	r19, r1
     44c:	31 15       	cp	r19, r1
     44e:	8d 15       	cp	r24, r13
     450:	31 15       	cp	r19, r1
     452:	31 15       	cp	r19, r1
     454:	31 15       	cp	r19, r1
     456:	31 15       	cp	r19, r1
     458:	31 15       	cp	r19, r1
     45a:	31 15       	cp	r19, r1
     45c:	31 15       	cp	r19, r1
     45e:	4b 15       	cp	r20, r11

00000460 <__ctors_end>:
     460:	11 24       	eor	r1, r1
     462:	1f be       	out	0x3f, r1	; 63
     464:	cf ef       	ldi	r28, 0xFF	; 255
     466:	d0 e1       	ldi	r29, 0x10	; 16
     468:	de bf       	out	0x3e, r29	; 62
     46a:	cd bf       	out	0x3d, r28	; 61

0000046c <__do_copy_data>:
     46c:	11 e0       	ldi	r17, 0x01	; 1
     46e:	a0 e0       	ldi	r26, 0x00	; 0
     470:	b1 e0       	ldi	r27, 0x01	; 1
     472:	ec ea       	ldi	r30, 0xAC	; 172
     474:	f1 e4       	ldi	r31, 0x41	; 65
     476:	00 e0       	ldi	r16, 0x00	; 0
     478:	0b bf       	out	0x3b, r16	; 59
     47a:	02 c0       	rjmp	.+4      	; 0x480 <__do_copy_data+0x14>
     47c:	07 90       	elpm	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	a8 3a       	cpi	r26, 0xA8	; 168
     482:	b1 07       	cpc	r27, r17
     484:	d9 f7       	brne	.-10     	; 0x47c <__do_copy_data+0x10>

00000486 <__do_clear_bss>:
     486:	22 e0       	ldi	r18, 0x02	; 2
     488:	a8 ea       	ldi	r26, 0xA8	; 168
     48a:	b1 e0       	ldi	r27, 0x01	; 1
     48c:	01 c0       	rjmp	.+2      	; 0x490 <.do_clear_bss_start>

0000048e <.do_clear_bss_loop>:
     48e:	1d 92       	st	X+, r1

00000490 <.do_clear_bss_start>:
     490:	a6 3d       	cpi	r26, 0xD6	; 214
     492:	b2 07       	cpc	r27, r18
     494:	e1 f7       	brne	.-8      	; 0x48e <.do_clear_bss_loop>
     496:	0e 94 03 1c 	call	0x3806	; 0x3806 <main>
     49a:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <_exit>

0000049e <__bad_interrupt>:
     49e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004a2 <play_rest>:
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     4a2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     4a4:	10 92 fd 01 	sts	0x01FD, r1
     4a8:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 f4 01 	sts	0x01F4, r25
     4b2:	80 93 f3 01 	sts	0x01F3, r24
     4b6:	08 95       	ret

000004b8 <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
     4b8:	cf 93       	push	r28
    //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
    //duration is in 64th notes at 120bpm
    //e.g. play_note('D', 1, 0, 16)
    //this would play a Db, octave 0 for 1 quarter note
    //120 bpm (every 32ms inc beat)
    PORTD &= unmute;      //unmute (just in case)
     4ba:	92 98       	cbi	0x12, 2	; 18
    beat = 0;             //reset the beat counter
     4bc:	10 92 fd 01 	sts	0x01FD, r1
     4c0:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;  //set the max beat
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	30 93 f4 01 	sts	0x01F4, r19
     4ca:	20 93 f3 01 	sts	0x01F3, r18
    switch (octave) {
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	49 30       	cpi	r20, 0x09	; 9
     4d2:	51 05       	cpc	r21, r1
     4d4:	20 f0       	brcs	.+8      	; 0x4de <play_note+0x26>
            case 'G': if(flat){OCR1A=Gb8;}
            else {OCR1A=G8;}
                break;
        } 
            break;
        default: OCR1A=0x0000;
     4d6:	1b bc       	out	0x2b, r1	; 43
     4d8:	1a bc       	out	0x2a, r1	; 42
    }
}
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret
    //this would play a Db, octave 0 for 1 quarter note
    //120 bpm (every 32ms inc beat)
    PORTD &= unmute;      //unmute (just in case)
    beat = 0;             //reset the beat counter
    max_beat = duration;  //set the max beat
    switch (octave) {
     4de:	4a 5b       	subi	r20, 0xBA	; 186
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
     4e2:	fa 01       	movw	r30, r20
            case 'G': if(flat){OCR1A=Gb7;}
            else {OCR1A=G7;}
                break;
        } 
            break;
        case 8: switch (note) {
     4e4:	99 27       	eor	r25, r25
     4e6:	87 fd       	sbrc	r24, 7
     4e8:	90 95       	com	r25
     4ea:	a9 2f       	mov	r26, r25
     4ec:	b9 2f       	mov	r27, r25
     4ee:	81 54       	subi	r24, 0x41	; 65
     4f0:	91 09       	sbc	r25, r1
    //this would play a Db, octave 0 for 1 quarter note
    //120 bpm (every 32ms inc beat)
    PORTD &= unmute;      //unmute (just in case)
    beat = 0;             //reset the beat counter
    max_beat = duration;  //set the max beat
    switch (octave) {
     4f2:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb6;}
            else {OCR1A=G6;}
                break;
        } 
            break;
        case 7: switch (note) {
     4f6:	87 30       	cpi	r24, 0x07	; 7
     4f8:	91 05       	cpc	r25, r1
     4fa:	78 f7       	brcc	.-34     	; 0x4da <play_note+0x22>
     4fc:	81 5b       	subi	r24, 0xB1	; 177
     4fe:	9f 4f       	sbci	r25, 0xFF	; 255
     500:	fc 01       	movw	r30, r24
     502:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb7;}
            else {OCR1A=G7;}
                break;
        } 
            break;
        case 8: switch (note) {
     506:	87 30       	cpi	r24, 0x07	; 7
     508:	91 05       	cpc	r25, r1
     50a:	38 f7       	brcc	.-50     	; 0x4da <play_note+0x22>
     50c:	8a 5a       	subi	r24, 0xAA	; 170
     50e:	9f 4f       	sbci	r25, 0xFF	; 255
     510:	fc 01       	movw	r30, r24
     512:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
    //120 bpm (every 32ms inc beat)
    PORTD &= unmute;      //unmute (just in case)
    beat = 0;             //reset the beat counter
    max_beat = duration;  //set the max beat
    switch (octave) {
        case 0: switch (note) {
     516:	87 30       	cpi	r24, 0x07	; 7
     518:	91 05       	cpc	r25, r1
     51a:	f8 f6       	brcc	.-66     	; 0x4da <play_note+0x22>
     51c:	83 5a       	subi	r24, 0xA3	; 163
     51e:	9f 4f       	sbci	r25, 0xFF	; 255
     520:	fc 01       	movw	r30, r24
     522:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb0;}
            else {OCR1A=G0;}
                break;
        }
            break;
        case 1: switch (note) {
     526:	87 30       	cpi	r24, 0x07	; 7
     528:	91 05       	cpc	r25, r1
     52a:	b8 f6       	brcc	.-82     	; 0x4da <play_note+0x22>
     52c:	8c 59       	subi	r24, 0x9C	; 156
     52e:	9f 4f       	sbci	r25, 0xFF	; 255
     530:	fc 01       	movw	r30, r24
     532:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb1;}
            else {OCR1A=G1;}
                break;
        }
            break;
        case 2: switch (note) {
     536:	87 30       	cpi	r24, 0x07	; 7
     538:	91 05       	cpc	r25, r1
     53a:	78 f6       	brcc	.-98     	; 0x4da <play_note+0x22>
     53c:	85 59       	subi	r24, 0x95	; 149
     53e:	9f 4f       	sbci	r25, 0xFF	; 255
     540:	fc 01       	movw	r30, r24
     542:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb2;}
            else {OCR1A=G2;}
                break;
        }
            break;
        case 3: switch (note) {
     546:	87 30       	cpi	r24, 0x07	; 7
     548:	91 05       	cpc	r25, r1
     54a:	38 f6       	brcc	.-114    	; 0x4da <play_note+0x22>
     54c:	8e 58       	subi	r24, 0x8E	; 142
     54e:	9f 4f       	sbci	r25, 0xFF	; 255
     550:	fc 01       	movw	r30, r24
     552:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb3;}
            else {OCR1A=G3;}
                break;
        }
            break;
        case 4: switch (note) {
     556:	87 30       	cpi	r24, 0x07	; 7
     558:	91 05       	cpc	r25, r1
     55a:	08 f0       	brcs	.+2      	; 0x55e <play_note+0xa6>
     55c:	be cf       	rjmp	.-132    	; 0x4da <play_note+0x22>
     55e:	87 58       	subi	r24, 0x87	; 135
     560:	9f 4f       	sbci	r25, 0xFF	; 255
     562:	fc 01       	movw	r30, r24
     564:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb4;}
            else {OCR1A=G4;}
                break;
        } 
            break;
        case 5: switch (note) {
     568:	87 30       	cpi	r24, 0x07	; 7
     56a:	91 05       	cpc	r25, r1
     56c:	08 f0       	brcs	.+2      	; 0x570 <play_note+0xb8>
     56e:	b5 cf       	rjmp	.-150    	; 0x4da <play_note+0x22>
     570:	80 58       	subi	r24, 0x80	; 128
     572:	9f 4f       	sbci	r25, 0xFF	; 255
     574:	fc 01       	movw	r30, r24
     576:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb5;}
            else {OCR1A=G5;}
                break;
        } 
            break;
        case 6: switch (note) {
     57a:	87 30       	cpi	r24, 0x07	; 7
     57c:	91 05       	cpc	r25, r1
     57e:	08 f0       	brcs	.+2      	; 0x582 <play_note+0xca>
     580:	ac cf       	rjmp	.-168    	; 0x4da <play_note+0x22>
     582:	89 57       	subi	r24, 0x79	; 121
     584:	9f 4f       	sbci	r25, 0xFF	; 255
     586:	fc 01       	movw	r30, r24
     588:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            else {OCR1A=D6;}
                break;
            case 'E': if(flat){OCR1A=Eb6;}
            else {OCR1A=E6;}
                break;
            case 'F': OCR1A=F6;
     58c:	88 e5       	ldi	r24, 0x58	; 88
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9b bd       	out	0x2b, r25	; 43
     592:	8a bd       	out	0x2a, r24	; 42
                break;
     594:	a2 cf       	rjmp	.-188    	; 0x4da <play_note+0x22>
            case 'C': OCR1A=C6;
                break;
            case 'D': if(flat){OCR1A=Db6;}
            else {OCR1A=D6;}
                break;
            case 'E': if(flat){OCR1A=Eb6;}
     596:	66 23       	and	r22, r22
     598:	09 f4       	brne	.+2      	; 0x59c <play_note+0xe4>
     59a:	0f c2       	rjmp	.+1054   	; 0x9ba <play_note+0x502>
     59c:	83 e6       	ldi	r24, 0x63	; 99
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	9b bd       	out	0x2b, r25	; 43
     5a2:	8a bd       	out	0x2a, r24	; 42
     5a4:	9a cf       	rjmp	.-204    	; 0x4da <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb6;}
            else {OCR1A=B6;}
                break;
            case 'C': OCR1A=C6;
                break;
            case 'D': if(flat){OCR1A=Db6;}
     5a6:	66 23       	and	r22, r22
     5a8:	09 f4       	brne	.+2      	; 0x5ac <play_note+0xf4>
     5aa:	11 c2       	rjmp	.+1058   	; 0x9ce <play_note+0x516>
     5ac:	8f e6       	ldi	r24, 0x6F	; 111
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9b bd       	out	0x2b, r25	; 43
     5b2:	8a bd       	out	0x2a, r24	; 42
     5b4:	92 cf       	rjmp	.-220    	; 0x4da <play_note+0x22>
            else {OCR1A=A6;}
                break;
            case 'B': if(flat){OCR1A=Bb6;}
            else {OCR1A=B6;}
                break;
            case 'C': OCR1A=C6;
     5b6:	86 e7       	ldi	r24, 0x76	; 118
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	9b bd       	out	0x2b, r25	; 43
     5bc:	8a bd       	out	0x2a, r24	; 42
                break;
     5be:	8d cf       	rjmp	.-230    	; 0x4da <play_note+0x22>
            else {OCR1A=G5;}
                break;
        } 
            break;
        case 6: switch (note) {
            case 'A': if(flat){OCR1A=Ab6;}
     5c0:	66 23       	and	r22, r22
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <play_note+0x10e>
     5c4:	ff c1       	rjmp	.+1022   	; 0x9c4 <play_note+0x50c>
     5c6:	8a e4       	ldi	r24, 0x4A	; 74
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	9b bd       	out	0x2b, r25	; 43
     5cc:	8a bd       	out	0x2a, r24	; 42
     5ce:	85 cf       	rjmp	.-246    	; 0x4da <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb6;}
            else {OCR1A=E6;}
                break;
            case 'F': OCR1A=F6;
                break;
            case 'G': if(flat){OCR1A=Gb6;}
     5d0:	66 23       	and	r22, r22
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <play_note+0x11e>
     5d4:	01 c2       	rjmp	.+1026   	; 0x9d8 <play_note+0x520>
     5d6:	83 e5       	ldi	r24, 0x53	; 83
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	9b bd       	out	0x2b, r25	; 43
     5dc:	8a bd       	out	0x2a, r24	; 42
     5de:	7d cf       	rjmp	.-262    	; 0x4da <play_note+0x22>
            break;
        case 6: switch (note) {
            case 'A': if(flat){OCR1A=Ab6;}
            else {OCR1A=A6;}
                break;
            case 'B': if(flat){OCR1A=Bb6;}
     5e0:	66 23       	and	r22, r22
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <play_note+0x12e>
     5e4:	b8 c1       	rjmp	.+880    	; 0x956 <play_note+0x49e>
     5e6:	82 e4       	ldi	r24, 0x42	; 66
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	9b bd       	out	0x2b, r25	; 43
     5ec:	8a bd       	out	0x2a, r24	; 42
     5ee:	75 cf       	rjmp	.-278    	; 0x4da <play_note+0x22>
            else {OCR1A=D5;}
                break;
            case 'E': if(flat){OCR1A=Eb5;}
            else {OCR1A=E5;}
                break;
            case 'F': OCR1A=F5;
     5f0:	81 eb       	ldi	r24, 0xB1	; 177
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	9b bd       	out	0x2b, r25	; 43
     5f6:	8a bd       	out	0x2a, r24	; 42
                break;
     5f8:	70 cf       	rjmp	.-288    	; 0x4da <play_note+0x22>
            break;
        case 5: switch (note) {
            case 'A': if(flat){OCR1A=Ab5;}
            else {OCR1A=A5;}
                break;
            case 'B': if(flat){OCR1A=Bb5;}
     5fa:	66 23       	and	r22, r22
     5fc:	09 f4       	brne	.+2      	; 0x600 <play_note+0x148>
     5fe:	d3 c1       	rjmp	.+934    	; 0x9a6 <play_note+0x4ee>
     600:	85 e8       	ldi	r24, 0x85	; 133
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	9b bd       	out	0x2b, r25	; 43
     606:	8a bd       	out	0x2a, r24	; 42
     608:	68 cf       	rjmp	.-304    	; 0x4da <play_note+0x22>
            else {OCR1A=G4;}
                break;
        } 
            break;
        case 5: switch (note) {
            case 'A': if(flat){OCR1A=Ab5;}
     60a:	66 23       	and	r22, r22
     60c:	09 f4       	brne	.+2      	; 0x610 <play_note+0x158>
     60e:	c1 c1       	rjmp	.+898    	; 0x992 <play_note+0x4da>
     610:	85 e9       	ldi	r24, 0x95	; 149
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9b bd       	out	0x2b, r25	; 43
     616:	8a bd       	out	0x2a, r24	; 42
     618:	60 cf       	rjmp	.-320    	; 0x4da <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb5;}
            else {OCR1A=E5;}
                break;
            case 'F': OCR1A=F5;
                break;
            case 'G': if(flat){OCR1A=Gb5;}
     61a:	66 23       	and	r22, r22
     61c:	09 f4       	brne	.+2      	; 0x620 <play_note+0x168>
     61e:	be c1       	rjmp	.+892    	; 0x99c <play_note+0x4e4>
     620:	87 ea       	ldi	r24, 0xA7	; 167
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	9b bd       	out	0x2b, r25	; 43
     626:	8a bd       	out	0x2a, r24	; 42
     628:	58 cf       	rjmp	.-336    	; 0x4da <play_note+0x22>
            else {OCR1A=D4;}
                break;
            case 'E': if(flat){OCR1A=Eb4;}
            else {OCR1A=E4;}
                break;
            case 'F': OCR1A=F4;
     62a:	84 e6       	ldi	r24, 0x64	; 100
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	9b bd       	out	0x2b, r25	; 43
     630:	8a bd       	out	0x2a, r24	; 42
                break;
     632:	53 cf       	rjmp	.-346    	; 0x4da <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb5;}
            else {OCR1A=B5;}
                break;
            case 'C': OCR1A=C5;
                break;
            case 'D': if(flat){OCR1A=Db5;}
     634:	66 23       	and	r22, r22
     636:	09 f4       	brne	.+2      	; 0x63a <play_note+0x182>
     638:	bb c1       	rjmp	.+886    	; 0x9b0 <play_note+0x4f8>
     63a:	80 ee       	ldi	r24, 0xE0	; 224
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	9b bd       	out	0x2b, r25	; 43
     640:	8a bd       	out	0x2a, r24	; 42
     642:	4b cf       	rjmp	.-362    	; 0x4da <play_note+0x22>
            else {OCR1A=A5;}
                break;
            case 'B': if(flat){OCR1A=Bb5;}
            else {OCR1A=B5;}
                break;
            case 'C': OCR1A=C5;
     644:	8d ee       	ldi	r24, 0xED	; 237
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	9b bd       	out	0x2b, r25	; 43
     64a:	8a bd       	out	0x2a, r24	; 42
                break;
     64c:	46 cf       	rjmp	.-372    	; 0x4da <play_note+0x22>
            case 'D': if(flat){OCR1A=Db5;}
            else {OCR1A=D5;}
                break;
            case 'E': if(flat){OCR1A=Eb5;}
     64e:	66 23       	and	r22, r22
     650:	09 f4       	brne	.+2      	; 0x654 <play_note+0x19c>
     652:	8b c1       	rjmp	.+790    	; 0x96a <play_note+0x4b2>
     654:	87 ec       	ldi	r24, 0xC7	; 199
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	9b bd       	out	0x2b, r25	; 43
     65a:	8a bd       	out	0x2a, r24	; 42
     65c:	3e cf       	rjmp	.-388    	; 0x4da <play_note+0x22>
            case 'C': OCR1A=C4;
                break;
            case 'D': if(flat){OCR1A=Db4;}
            else {OCR1A=D4;}
                break;
            case 'E': if(flat){OCR1A=Eb4;}
     65e:	66 23       	and	r22, r22
     660:	09 f4       	brne	.+2      	; 0x664 <play_note+0x1ac>
     662:	74 c1       	rjmp	.+744    	; 0x94c <play_note+0x494>
     664:	80 e9       	ldi	r24, 0x90	; 144
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	9b bd       	out	0x2b, r25	; 43
     66a:	8a bd       	out	0x2a, r24	; 42
     66c:	36 cf       	rjmp	.-404    	; 0x4da <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb3;}
            else {OCR1A=B3;}
                break;
            case 'C': OCR1A=C3;
                break;
            case 'D': if(flat){OCR1A=Db3;}
     66e:	66 23       	and	r22, r22
     670:	09 f4       	brne	.+2      	; 0x674 <play_note+0x1bc>
     672:	cb c1       	rjmp	.+918    	; 0xa0a <play_note+0x552>
     674:	84 e8       	ldi	r24, 0x84	; 132
     676:	93 e0       	ldi	r25, 0x03	; 3
     678:	9b bd       	out	0x2b, r25	; 43
     67a:	8a bd       	out	0x2a, r24	; 42
     67c:	2e cf       	rjmp	.-420    	; 0x4da <play_note+0x22>
            else {OCR1A=G3;}
                break;
        }
            break;
        case 4: switch (note) {
            case 'A': if(flat){OCR1A=Ab4;}
     67e:	66 23       	and	r22, r22
     680:	09 f4       	brne	.+2      	; 0x684 <play_note+0x1cc>
     682:	af c1       	rjmp	.+862    	; 0x9e2 <play_note+0x52a>
     684:	8b e2       	ldi	r24, 0x2B	; 43
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	9b bd       	out	0x2b, r25	; 43
     68a:	8a bd       	out	0x2a, r24	; 42
     68c:	26 cf       	rjmp	.-436    	; 0x4da <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb3;}
            else {OCR1A=E3;}
                break;
            case 'F': OCR1A=F3;
                break;
            case 'G': if(flat){OCR1A=Gb3;}
     68e:	66 23       	and	r22, r22
     690:	09 f4       	brne	.+2      	; 0x694 <play_note+0x1dc>
     692:	b1 c1       	rjmp	.+866    	; 0x9f6 <play_note+0x53e>
     694:	82 ea       	ldi	r24, 0xA2	; 162
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	9b bd       	out	0x2b, r25	; 43
     69a:	8a bd       	out	0x2a, r24	; 42
     69c:	1e cf       	rjmp	.-452    	; 0x4da <play_note+0x22>
            else {OCR1A=A4;}
                break;
            case 'B': if(flat){OCR1A=Bb4;}
            else {OCR1A=B4;}
                break;
            case 'C': OCR1A=C4;
     69e:	8c ed       	ldi	r24, 0xDC	; 220
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9b bd       	out	0x2b, r25	; 43
     6a4:	8a bd       	out	0x2a, r24	; 42
                break;
     6a6:	19 cf       	rjmp	.-462    	; 0x4da <play_note+0x22>
            break;
        case 3: switch (note) {
            case 'A': if(flat){OCR1A=Ab3;}
            else {OCR1A=A3;}
                break;
            case 'B': if(flat){OCR1A=Bb3;}
     6a8:	66 23       	and	r22, r22
     6aa:	09 f4       	brne	.+2      	; 0x6ae <play_note+0x1f6>
     6ac:	59 c1       	rjmp	.+690    	; 0x960 <play_note+0x4a8>
     6ae:	87 e1       	ldi	r24, 0x17	; 23
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	9b bd       	out	0x2b, r25	; 43
     6b4:	8a bd       	out	0x2a, r24	; 42
     6b6:	11 cf       	rjmp	.-478    	; 0x4da <play_note+0x22>
            else {OCR1A=G2;}
                break;
        }
            break;
        case 3: switch (note) {
            case 'A': if(flat){OCR1A=Ab3;}
     6b8:	66 23       	and	r22, r22
     6ba:	09 f4       	brne	.+2      	; 0x6be <play_note+0x206>
     6bc:	b0 c1       	rjmp	.+864    	; 0xa1e <play_note+0x566>
     6be:	88 e5       	ldi	r24, 0x58	; 88
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	9b bd       	out	0x2b, r25	; 43
     6c4:	8a bd       	out	0x2a, r24	; 42
     6c6:	09 cf       	rjmp	.-494    	; 0x4da <play_note+0x22>
            else {OCR1A=D3;}
                break;
            case 'E': if(flat){OCR1A=Eb3;}
            else {OCR1A=E3;}
                break;
            case 'F': OCR1A=F3;
     6c8:	8a ec       	ldi	r24, 0xCA	; 202
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	9b bd       	out	0x2b, r25	; 43
     6ce:	8a bd       	out	0x2a, r24	; 42
                break;
     6d0:	04 cf       	rjmp	.-504    	; 0x4da <play_note+0x22>
            case 'C': OCR1A=C2;
                break;
            case 'D': if(flat){OCR1A=Db2;}
            else {OCR1A=D2;}
                break;
            case 'E': if(flat){OCR1A=Eb2;}
     6d2:	66 23       	and	r22, r22
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <play_note+0x220>
     6d6:	35 c1       	rjmp	.+618    	; 0x942 <play_note+0x48a>
     6d8:	86 e4       	ldi	r24, 0x46	; 70
     6da:	96 e0       	ldi	r25, 0x06	; 6
     6dc:	9b bd       	out	0x2b, r25	; 43
     6de:	8a bd       	out	0x2a, r24	; 42
     6e0:	fc ce       	rjmp	.-520    	; 0x4da <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb2;}
            else {OCR1A=B2;}
                break;
            case 'C': OCR1A=C2;
                break;
            case 'D': if(flat){OCR1A=Db2;}
     6e2:	66 23       	and	r22, r22
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <play_note+0x230>
     6e6:	82 c1       	rjmp	.+772    	; 0x9ec <play_note+0x534>
     6e8:	8a e0       	ldi	r24, 0x0A	; 10
     6ea:	97 e0       	ldi	r25, 0x07	; 7
     6ec:	9b bd       	out	0x2b, r25	; 43
     6ee:	8a bd       	out	0x2a, r24	; 42
     6f0:	f4 ce       	rjmp	.-536    	; 0x4da <play_note+0x22>
            else {OCR1A=D2;}
                break;
            case 'E': if(flat){OCR1A=Eb2;}
            else {OCR1A=E2;}
                break;
            case 'F': OCR1A=F2;
     6f2:	86 e9       	ldi	r24, 0x96	; 150
     6f4:	95 e0       	ldi	r25, 0x05	; 5
     6f6:	9b bd       	out	0x2b, r25	; 43
     6f8:	8a bd       	out	0x2a, r24	; 42
                break;
     6fa:	ef ce       	rjmp	.-546    	; 0x4da <play_note+0x22>
            else {OCR1A=A3;}
                break;
            case 'B': if(flat){OCR1A=Bb3;}
            else {OCR1A=B3;}
                break;
            case 'C': OCR1A=C3;
     6fc:	8a eb       	ldi	r24, 0xBA	; 186
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	9b bd       	out	0x2b, r25	; 43
     702:	8a bd       	out	0x2a, r24	; 42
                break;
     704:	ea ce       	rjmp	.-556    	; 0x4da <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb4;}
            else {OCR1A=B4;}
                break;
            case 'C': OCR1A=C4;
                break;
            case 'D': if(flat){OCR1A=Db4;}
     706:	66 23       	and	r22, r22
     708:	09 f4       	brne	.+2      	; 0x70c <play_note+0x254>
     70a:	7a c1       	rjmp	.+756    	; 0xa00 <play_note+0x548>
     70c:	81 ec       	ldi	r24, 0xC1	; 193
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	9b bd       	out	0x2b, r25	; 43
     712:	8a bd       	out	0x2a, r24	; 42
     714:	e2 ce       	rjmp	.-572    	; 0x4da <play_note+0x22>
            break;
        case 4: switch (note) {
            case 'A': if(flat){OCR1A=Ab4;}
            else {OCR1A=A4;}
                break;
            case 'B': if(flat){OCR1A=Bb4;}
     716:	66 23       	and	r22, r22
     718:	09 f4       	brne	.+2      	; 0x71c <play_note+0x264>
     71a:	7c c1       	rjmp	.+760    	; 0xa14 <play_note+0x55c>
     71c:	8b e0       	ldi	r24, 0x0B	; 11
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	9b bd       	out	0x2b, r25	; 43
     722:	8a bd       	out	0x2a, r24	; 42
     724:	da ce       	rjmp	.-588    	; 0x4da <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb4;}
            else {OCR1A=E4;}
                break;
            case 'F': OCR1A=F4;
                break;
            case 'G': if(flat){OCR1A=Gb4;}
     726:	66 23       	and	r22, r22
     728:	09 f4       	brne	.+2      	; 0x72c <play_note+0x274>
     72a:	7e c1       	rjmp	.+764    	; 0xa28 <play_note+0x570>
     72c:	80 e5       	ldi	r24, 0x50	; 80
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9b bd       	out	0x2b, r25	; 43
     732:	8a bd       	out	0x2a, r24	; 42
     734:	d2 ce       	rjmp	.-604    	; 0x4da <play_note+0x22>
            case 'C': OCR1A=C3;
                break;
            case 'D': if(flat){OCR1A=Db3;}
            else {OCR1A=D3;}
                break;
            case 'E': if(flat){OCR1A=Eb3;}
     736:	66 23       	and	r22, r22
     738:	09 f4       	brne	.+2      	; 0x73c <play_note+0x284>
     73a:	ad c1       	rjmp	.+858    	; 0xa96 <play_note+0x5de>
     73c:	82 e2       	ldi	r24, 0x22	; 34
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	9b bd       	out	0x2b, r25	; 43
     742:	8a bd       	out	0x2a, r24	; 42
     744:	ca ce       	rjmp	.-620    	; 0x4da <play_note+0x22>
            else {OCR1A=A2;}
                break;
            case 'B': if(flat){OCR1A=Bb2;}
            else {OCR1A=B2;}
                break;
            case 'C': OCR1A=C2;
     746:	86 e7       	ldi	r24, 0x76	; 118
     748:	97 e0       	ldi	r25, 0x07	; 7
     74a:	9b bd       	out	0x2b, r25	; 43
     74c:	8a bd       	out	0x2a, r24	; 42
                break;
     74e:	c5 ce       	rjmp	.-630    	; 0x4da <play_note+0x22>
    PORTD &= unmute;      //unmute (just in case)
    beat = 0;             //reset the beat counter
    max_beat = duration;  //set the max beat
    switch (octave) {
        case 0: switch (note) {
            case 'A': if(flat){OCR1A=Ab0;}
     750:	66 23       	and	r22, r22
     752:	09 f4       	brne	.+2      	; 0x756 <play_note+0x29e>
     754:	0f c1       	rjmp	.+542    	; 0x974 <play_note+0x4bc>
     756:	8e ec       	ldi	r24, 0xCE	; 206
     758:	92 e1       	ldi	r25, 0x12	; 18
     75a:	9b bd       	out	0x2b, r25	; 43
     75c:	8a bd       	out	0x2a, r24	; 42
     75e:	bd ce       	rjmp	.-646    	; 0x4da <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb0;}
            else {OCR1A=E0;}
                break;
            case 'F': OCR1A=F0;
                break;
            case 'G': if(flat){OCR1A=Gb0;}
     760:	66 23       	and	r22, r22
     762:	09 f4       	brne	.+2      	; 0x766 <play_note+0x2ae>
     764:	7a c1       	rjmp	.+756    	; 0xa5a <play_note+0x5a2>
     766:	8d e1       	ldi	r24, 0x1D	; 29
     768:	95 e1       	ldi	r25, 0x15	; 21
     76a:	9b bd       	out	0x2b, r25	; 43
     76c:	8a bd       	out	0x2a, r24	; 42
     76e:	b5 ce       	rjmp	.-662    	; 0x4da <play_note+0x22>
            break;
        case 1: switch (note) {
            case 'A': if(flat){OCR1A=Ab1;}
            else {OCR1A=A1;}
                break;
            case 'B': if(flat){OCR1A=Bb1;}
     770:	66 23       	and	r22, r22
     772:	09 f4       	brne	.+2      	; 0x776 <play_note+0x2be>
     774:	dc c0       	rjmp	.+440    	; 0x92e <play_note+0x476>
     776:	80 e6       	ldi	r24, 0x60	; 96
     778:	98 e0       	ldi	r25, 0x08	; 8
     77a:	9b bd       	out	0x2b, r25	; 43
     77c:	8a bd       	out	0x2a, r24	; 42
     77e:	ad ce       	rjmp	.-678    	; 0x4da <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb8;}
            else {OCR1A=E8;}
                break;
            case 'F': OCR1A=F8;
                break;
            case 'G': if(flat){OCR1A=Gb8;}
     780:	66 23       	and	r22, r22
     782:	09 f4       	brne	.+2      	; 0x786 <play_note+0x2ce>
     784:	92 c1       	rjmp	.+804    	; 0xaaa <play_note+0x5f2>
     786:	80 e1       	ldi	r24, 0x10	; 16
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	9b bd       	out	0x2b, r25	; 43
     78c:	8a bd       	out	0x2a, r24	; 42
     78e:	a5 ce       	rjmp	.-694    	; 0x4da <play_note+0x22>
            else {OCR1A=D1;}
                break;
            case 'E': if(flat){OCR1A=Eb1;}
            else {OCR1A=E1;}
                break;
            case 'F': OCR1A=F1;
     790:	8e e2       	ldi	r24, 0x2E	; 46
     792:	9b e0       	ldi	r25, 0x0B	; 11
     794:	9b bd       	out	0x2b, r25	; 43
     796:	8a bd       	out	0x2a, r24	; 42
                break;
     798:	a0 ce       	rjmp	.-704    	; 0x4da <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb8;}
            else {OCR1A=B8;}
                break;
            case 'C': OCR1A=C8;
                break;
            case 'D': if(flat){OCR1A=Db8;}
     79a:	66 23       	and	r22, r22
     79c:	09 f4       	brne	.+2      	; 0x7a0 <play_note+0x2e8>
     79e:	49 c1       	rjmp	.+658    	; 0xa32 <play_note+0x57a>
     7a0:	8b e1       	ldi	r24, 0x1B	; 27
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	9b bd       	out	0x2b, r25	; 43
     7a6:	8a bd       	out	0x2a, r24	; 42
     7a8:	98 ce       	rjmp	.-720    	; 0x4da <play_note+0x22>
            else {OCR1A=A8;}
                break;
            case 'B': if(flat){OCR1A=Bb8;}
            else {OCR1A=B8;}
                break;
            case 'C': OCR1A=C8;
     7aa:	8c e1       	ldi	r24, 0x1C	; 28
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9b bd       	out	0x2b, r25	; 43
     7b0:	8a bd       	out	0x2a, r24	; 42
                break;
     7b2:	93 ce       	rjmp	.-730    	; 0x4da <play_note+0x22>
            break;
        case 8: switch (note) {
            case 'A': if(flat){OCR1A=Ab8;}
            else {OCR1A=A8;}
                break;
            case 'B': if(flat){OCR1A=Bb8;}
     7b4:	66 23       	and	r22, r22
     7b6:	09 f4       	brne	.+2      	; 0x7ba <play_note+0x302>
     7b8:	41 c1       	rjmp	.+642    	; 0xa3c <play_note+0x584>
     7ba:	87 e0       	ldi	r24, 0x07	; 7
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	9b bd       	out	0x2b, r25	; 43
     7c0:	8a bd       	out	0x2a, r24	; 42
     7c2:	8b ce       	rjmp	.-746    	; 0x4da <play_note+0x22>
            else {OCR1A=G7;}
                break;
        } 
            break;
        case 8: switch (note) {
            case 'A': if(flat){OCR1A=Ab8;}
     7c4:	66 23       	and	r22, r22
     7c6:	09 f4       	brne	.+2      	; 0x7ca <play_note+0x312>
     7c8:	da c0       	rjmp	.+436    	; 0x97e <play_note+0x4c6>
     7ca:	8b e0       	ldi	r24, 0x0B	; 11
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	9b bd       	out	0x2b, r25	; 43
     7d0:	8a bd       	out	0x2a, r24	; 42
     7d2:	83 ce       	rjmp	.-762    	; 0x4da <play_note+0x22>
            else {OCR1A=D8;}
                break;
            case 'E': if(flat){OCR1A=Eb8;}
            else {OCR1A=E8;}
                break;
            case 'F': OCR1A=F8;
     7d4:	82 e1       	ldi	r24, 0x12	; 18
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	9b bd       	out	0x2b, r25	; 43
     7da:	8a bd       	out	0x2a, r24	; 42
                break;
     7dc:	7e ce       	rjmp	.-772    	; 0x4da <play_note+0x22>
            case 'C': OCR1A=C0;
                break;
            case 'D': if(flat){OCR1A=Db0;}
            else {OCR1A=D0;}
                break;
            case 'E': if(flat){OCR1A=Eb0;}
     7de:	66 23       	and	r22, r22
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <play_note+0x32c>
     7e2:	9b c0       	rjmp	.+310    	; 0x91a <play_note+0x462>
     7e4:	89 e1       	ldi	r24, 0x19	; 25
     7e6:	99 e1       	ldi	r25, 0x19	; 25
     7e8:	9b bd       	out	0x2b, r25	; 43
     7ea:	8a bd       	out	0x2a, r24	; 42
     7ec:	76 ce       	rjmp	.-788    	; 0x4da <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb0;}
            else {OCR1A=B0;}
                break;
            case 'C': OCR1A=C0;
                break;
            case 'D': if(flat){OCR1A=Db0;}
     7ee:	66 23       	and	r22, r22
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <play_note+0x33c>
     7f2:	29 c1       	rjmp	.+594    	; 0xa46 <play_note+0x58e>
     7f4:	80 e3       	ldi	r24, 0x30	; 48
     7f6:	9c e1       	ldi	r25, 0x1C	; 28
     7f8:	9b bd       	out	0x2b, r25	; 43
     7fa:	8a bd       	out	0x2a, r24	; 42
     7fc:	6e ce       	rjmp	.-804    	; 0x4da <play_note+0x22>
            else {OCR1A=A0;}
                break;
            case 'B': if(flat){OCR1A=Bb0;}
            else {OCR1A=B0;}
                break;
            case 'C': OCR1A=C0;
     7fe:	8c ed       	ldi	r24, 0xDC	; 220
     800:	9d e1       	ldi	r25, 0x1D	; 29
     802:	9b bd       	out	0x2b, r25	; 43
     804:	8a bd       	out	0x2a, r24	; 42
                break;
     806:	69 ce       	rjmp	.-814    	; 0x4da <play_note+0x22>
            else {OCR1A=A7;}
                break;
            case 'B': if(flat){OCR1A=Bb7;}
            else {OCR1A=B7;}
                break;
            case 'C': OCR1A=C7;
     808:	8a e3       	ldi	r24, 0x3A	; 58
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	9b bd       	out	0x2b, r25	; 43
     80e:	8a bd       	out	0x2a, r24	; 42
                break;
     810:	64 ce       	rjmp	.-824    	; 0x4da <play_note+0x22>
            break;
        case 7: switch (note) {
            case 'A': if(flat){OCR1A=Ab7;}
            else {OCR1A=A7;}
                break;
            case 'B': if(flat){OCR1A=Bb7;}
     812:	66 23       	and	r22, r22
     814:	09 f4       	brne	.+2      	; 0x818 <play_note+0x360>
     816:	35 c1       	rjmp	.+618    	; 0xa82 <play_note+0x5ca>
     818:	80 e2       	ldi	r24, 0x20	; 32
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9b bd       	out	0x2b, r25	; 43
     81e:	8a bd       	out	0x2a, r24	; 42
     820:	5c ce       	rjmp	.-840    	; 0x4da <play_note+0x22>
            else {OCR1A=G6;}
                break;
        } 
            break;
        case 7: switch (note) {
            case 'A': if(flat){OCR1A=Ab7;}
     822:	66 23       	and	r22, r22
     824:	09 f4       	brne	.+2      	; 0x828 <play_note+0x370>
     826:	32 c1       	rjmp	.+612    	; 0xa8c <play_note+0x5d4>
     828:	84 e2       	ldi	r24, 0x24	; 36
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	9b bd       	out	0x2b, r25	; 43
     82e:	8a bd       	out	0x2a, r24	; 42
     830:	54 ce       	rjmp	.-856    	; 0x4da <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb7;}
            else {OCR1A=E7;}
                break;
            case 'F': OCR1A=F7;
                break;
            case 'G': if(flat){OCR1A=Gb7;}
     832:	66 23       	and	r22, r22
     834:	09 f4       	brne	.+2      	; 0x838 <play_note+0x380>
     836:	76 c0       	rjmp	.+236    	; 0x924 <play_note+0x46c>
     838:	89 e2       	ldi	r24, 0x29	; 41
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	9b bd       	out	0x2b, r25	; 43
     83e:	8a bd       	out	0x2a, r24	; 42
     840:	4c ce       	rjmp	.-872    	; 0x4da <play_note+0x22>
            case 'C': OCR1A=C7;
                break;
            case 'D': if(flat){OCR1A=Db7;}
            else {OCR1A=D7;}
                break;
            case 'E': if(flat){OCR1A=Eb7;}
     842:	66 23       	and	r22, r22
     844:	09 f4       	brne	.+2      	; 0x848 <play_note+0x390>
     846:	78 c0       	rjmp	.+240    	; 0x938 <play_note+0x480>
     848:	81 e3       	ldi	r24, 0x31	; 49
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	9b bd       	out	0x2b, r25	; 43
     84e:	8a bd       	out	0x2a, r24	; 42
     850:	44 ce       	rjmp	.-888    	; 0x4da <play_note+0x22>
            else {OCR1A=E7;}
                break;
            case 'F': OCR1A=F7;
     852:	8b e2       	ldi	r24, 0x2B	; 43
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	9b bd       	out	0x2b, r25	; 43
     858:	8a bd       	out	0x2a, r24	; 42
                break;
     85a:	3f ce       	rjmp	.-898    	; 0x4da <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb7;}
            else {OCR1A=B7;}
                break;
            case 'C': OCR1A=C7;
                break;
            case 'D': if(flat){OCR1A=Db7;}
     85c:	66 23       	and	r22, r22
     85e:	09 f4       	brne	.+2      	; 0x862 <play_note+0x3aa>
     860:	93 c0       	rjmp	.+294    	; 0x988 <play_note+0x4d0>
     862:	87 e3       	ldi	r24, 0x37	; 55
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	9b bd       	out	0x2b, r25	; 43
     868:	8a bd       	out	0x2a, r24	; 42
     86a:	37 ce       	rjmp	.-914    	; 0x4da <play_note+0x22>
            case 'C': OCR1A=C8;
                break;
            case 'D': if(flat){OCR1A=Db8;}
            else {OCR1A=D8;}
                break;
            case 'E': if(flat){OCR1A=Eb8;}
     86c:	66 23       	and	r22, r22
     86e:	09 f4       	brne	.+2      	; 0x872 <play_note+0x3ba>
     870:	4f c0       	rjmp	.+158    	; 0x910 <play_note+0x458>
     872:	88 e1       	ldi	r24, 0x18	; 24
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	9b bd       	out	0x2b, r25	; 43
     878:	8a bd       	out	0x2a, r24	; 42
     87a:	2f ce       	rjmp	.-930    	; 0x4da <play_note+0x22>
            else {OCR1A=G1;}
                break;
        }
            break;
        case 2: switch (note) {
            case 'A': if(flat){OCR1A=Ab2;}
     87c:	66 23       	and	r22, r22
     87e:	09 f4       	brne	.+2      	; 0x882 <play_note+0x3ca>
     880:	f6 c0       	rjmp	.+492    	; 0xa6e <play_note+0x5b6>
     882:	82 eb       	ldi	r24, 0xB2	; 178
     884:	94 e0       	ldi	r25, 0x04	; 4
     886:	9b bd       	out	0x2b, r25	; 43
     888:	8a bd       	out	0x2a, r24	; 42
     88a:	27 ce       	rjmp	.-946    	; 0x4da <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb1;}
            else {OCR1A=E1;}
                break;
            case 'F': OCR1A=F1;
                break;
            case 'G': if(flat){OCR1A=Gb1;}
     88c:	66 23       	and	r22, r22
     88e:	09 f4       	brne	.+2      	; 0x892 <play_note+0x3da>
     890:	16 c1       	rjmp	.+556    	; 0xabe <play_note+0x606>
     892:	8d e8       	ldi	r24, 0x8D	; 141
     894:	9a e0       	ldi	r25, 0x0A	; 10
     896:	9b bd       	out	0x2b, r25	; 43
     898:	8a bd       	out	0x2a, r24	; 42
     89a:	1f ce       	rjmp	.-962    	; 0x4da <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb1;}
            else {OCR1A=B1;}
                break;
            case 'C': OCR1A=C1;
                break;
            case 'D': if(flat){OCR1A=Db1;}
     89c:	66 23       	and	r22, r22
     89e:	09 f4       	brne	.+2      	; 0x8a2 <play_note+0x3ea>
     8a0:	d7 c0       	rjmp	.+430    	; 0xa50 <play_note+0x598>
     8a2:	86 e1       	ldi	r24, 0x16	; 22
     8a4:	9e e0       	ldi	r25, 0x0E	; 14
     8a6:	9b bd       	out	0x2b, r25	; 43
     8a8:	8a bd       	out	0x2a, r24	; 42
     8aa:	17 ce       	rjmp	.-978    	; 0x4da <play_note+0x22>
    switch (octave) {
        case 0: switch (note) {
            case 'A': if(flat){OCR1A=Ab0;}
            else {OCR1A=A0;}
                break;
            case 'B': if(flat){OCR1A=Bb0;}
     8ac:	66 23       	and	r22, r22
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <play_note+0x3fa>
     8b0:	f7 c0       	rjmp	.+494    	; 0xaa0 <play_note+0x5e8>
     8b2:	80 ec       	ldi	r24, 0xC0	; 192
     8b4:	90 e1       	ldi	r25, 0x10	; 16
     8b6:	9b bd       	out	0x2b, r25	; 43
     8b8:	8a bd       	out	0x2a, r24	; 42
     8ba:	0f ce       	rjmp	.-994    	; 0x4da <play_note+0x22>
            break;
        case 2: switch (note) {
            case 'A': if(flat){OCR1A=Ab2;}
            else {OCR1A=A2;}
                break;
            case 'B': if(flat){OCR1A=Bb2;}
     8bc:	66 23       	and	r22, r22
     8be:	09 f4       	brne	.+2      	; 0x8c2 <play_note+0x40a>
     8c0:	d1 c0       	rjmp	.+418    	; 0xa64 <play_note+0x5ac>
     8c2:	8f e2       	ldi	r24, 0x2F	; 47
     8c4:	94 e0       	ldi	r25, 0x04	; 4
     8c6:	9b bd       	out	0x2b, r25	; 43
     8c8:	8a bd       	out	0x2a, r24	; 42
     8ca:	07 ce       	rjmp	.-1010   	; 0x4da <play_note+0x22>
            else {OCR1A=G0;}
                break;
        }
            break;
        case 1: switch (note) {
            case 'A': if(flat){OCR1A=Ab1;}
     8cc:	66 23       	and	r22, r22
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <play_note+0x41a>
     8d0:	f1 c0       	rjmp	.+482    	; 0xab4 <play_note+0x5fc>
     8d2:	87 e6       	ldi	r24, 0x67	; 103
     8d4:	99 e0       	ldi	r25, 0x09	; 9
     8d6:	9b bd       	out	0x2b, r25	; 43
     8d8:	8a bd       	out	0x2a, r24	; 42
     8da:	ff cd       	rjmp	.-1026   	; 0x4da <play_note+0x22>
            case 'C': OCR1A=C1;
                break;
            case 'D': if(flat){OCR1A=Db1;}
            else {OCR1A=D1;}
                break;
            case 'E': if(flat){OCR1A=Eb1;}
     8dc:	66 23       	and	r22, r22
     8de:	09 f4       	brne	.+2      	; 0x8e2 <play_note+0x42a>
     8e0:	cb c0       	rjmp	.+406    	; 0xa78 <play_note+0x5c0>
     8e2:	8d e8       	ldi	r24, 0x8D	; 141
     8e4:	9c e0       	ldi	r25, 0x0C	; 12
     8e6:	9b bd       	out	0x2b, r25	; 43
     8e8:	8a bd       	out	0x2a, r24	; 42
     8ea:	f7 cd       	rjmp	.-1042   	; 0x4da <play_note+0x22>
            else {OCR1A=D0;}
                break;
            case 'E': if(flat){OCR1A=Eb0;}
            else {OCR1A=E0;}
                break;
            case 'F': OCR1A=F0;
     8ec:	8d e5       	ldi	r24, 0x5D	; 93
     8ee:	96 e1       	ldi	r25, 0x16	; 22
     8f0:	9b bd       	out	0x2b, r25	; 43
     8f2:	8a bd       	out	0x2a, r24	; 42
                break;
     8f4:	f2 cd       	rjmp	.-1052   	; 0x4da <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb2;}
            else {OCR1A=E2;}
                break;
            case 'F': OCR1A=F2;
                break;
            case 'G': if(flat){OCR1A=Gb2;}
     8f6:	66 23       	and	r22, r22
     8f8:	09 f4       	brne	.+2      	; 0x8fc <play_note+0x444>
     8fa:	e6 c0       	rjmp	.+460    	; 0xac8 <play_note+0x610>
     8fc:	86 e4       	ldi	r24, 0x46	; 70
     8fe:	95 e0       	ldi	r25, 0x05	; 5
     900:	9b bd       	out	0x2b, r25	; 43
     902:	8a bd       	out	0x2a, r24	; 42
     904:	ea cd       	rjmp	.-1068   	; 0x4da <play_note+0x22>
            else {OCR1A=A1;}
                break;
            case 'B': if(flat){OCR1A=Bb1;}
            else {OCR1A=B1;}
                break;
            case 'C': OCR1A=C1;
     906:	8d ee       	ldi	r24, 0xED	; 237
     908:	9e e0       	ldi	r25, 0x0E	; 14
     90a:	9b bd       	out	0x2b, r25	; 43
     90c:	8a bd       	out	0x2a, r24	; 42
                break;
     90e:	e5 cd       	rjmp	.-1078   	; 0x4da <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db8;}
            else {OCR1A=D8;}
                break;
            case 'E': if(flat){OCR1A=Eb8;}
            else {OCR1A=E8;}
     910:	85 e1       	ldi	r24, 0x15	; 21
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	9b bd       	out	0x2b, r25	; 43
     916:	8a bd       	out	0x2a, r24	; 42
     918:	e0 cd       	rjmp	.-1088   	; 0x4da <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db0;}
            else {OCR1A=D0;}
                break;
            case 'E': if(flat){OCR1A=Eb0;}
            else {OCR1A=E0;}
     91a:	82 eb       	ldi	r24, 0xB2	; 178
     91c:	97 e1       	ldi	r25, 0x17	; 23
     91e:	9b bd       	out	0x2b, r25	; 43
     920:	8a bd       	out	0x2a, r24	; 42
     922:	db cd       	rjmp	.-1098   	; 0x4da <play_note+0x22>
            else {OCR1A=E7;}
                break;
            case 'F': OCR1A=F7;
                break;
            case 'G': if(flat){OCR1A=Gb7;}
            else {OCR1A=G7;}
     924:	86 e2       	ldi	r24, 0x26	; 38
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	9b bd       	out	0x2b, r25	; 43
     92a:	8a bd       	out	0x2a, r24	; 42
     92c:	d6 cd       	rjmp	.-1108   	; 0x4da <play_note+0x22>
        case 1: switch (note) {
            case 'A': if(flat){OCR1A=Ab1;}
            else {OCR1A=A1;}
                break;
            case 'B': if(flat){OCR1A=Bb1;}
            else {OCR1A=B1;}
     92e:	87 ee       	ldi	r24, 0xE7	; 231
     930:	97 e0       	ldi	r25, 0x07	; 7
     932:	9b bd       	out	0x2b, r25	; 43
     934:	8a bd       	out	0x2a, r24	; 42
     936:	d1 cd       	rjmp	.-1118   	; 0x4da <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db7;}
            else {OCR1A=D7;}
                break;
            case 'E': if(flat){OCR1A=Eb7;}
            else {OCR1A=E7;}
     938:	8e e2       	ldi	r24, 0x2E	; 46
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	9b bd       	out	0x2b, r25	; 43
     93e:	8a bd       	out	0x2a, r24	; 42
     940:	cc cd       	rjmp	.-1128   	; 0x4da <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db2;}
            else {OCR1A=D2;}
                break;
            case 'E': if(flat){OCR1A=Eb2;}
            else {OCR1A=E2;}
     942:	8b ee       	ldi	r24, 0xEB	; 235
     944:	95 e0       	ldi	r25, 0x05	; 5
     946:	9b bd       	out	0x2b, r25	; 43
     948:	8a bd       	out	0x2a, r24	; 42
     94a:	c7 cd       	rjmp	.-1138   	; 0x4da <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db4;}
            else {OCR1A=D4;}
                break;
            case 'E': if(flat){OCR1A=Eb4;}
            else {OCR1A=E4;}
     94c:	8a e7       	ldi	r24, 0x7A	; 122
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	9b bd       	out	0x2b, r25	; 43
     952:	8a bd       	out	0x2a, r24	; 42
     954:	c2 cd       	rjmp	.-1148   	; 0x4da <play_note+0x22>
        case 6: switch (note) {
            case 'A': if(flat){OCR1A=Ab6;}
            else {OCR1A=A6;}
                break;
            case 'B': if(flat){OCR1A=Bb6;}
            else {OCR1A=B6;}
     956:	8e e3       	ldi	r24, 0x3E	; 62
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	9b bd       	out	0x2b, r25	; 43
     95c:	8a bd       	out	0x2a, r24	; 42
     95e:	bd cd       	rjmp	.-1158   	; 0x4da <play_note+0x22>
        case 3: switch (note) {
            case 'A': if(flat){OCR1A=Ab3;}
            else {OCR1A=A3;}
                break;
            case 'B': if(flat){OCR1A=Bb3;}
            else {OCR1A=B3;}
     960:	89 ef       	ldi	r24, 0xF9	; 249
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	9b bd       	out	0x2b, r25	; 43
     966:	8a bd       	out	0x2a, r24	; 42
     968:	b8 cd       	rjmp	.-1168   	; 0x4da <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db5;}
            else {OCR1A=D5;}
                break;
            case 'E': if(flat){OCR1A=Eb5;}
            else {OCR1A=E5;}
     96a:	8c eb       	ldi	r24, 0xBC	; 188
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	9b bd       	out	0x2b, r25	; 43
     970:	8a bd       	out	0x2a, r24	; 42
     972:	b3 cd       	rjmp	.-1178   	; 0x4da <play_note+0x22>
    beat = 0;             //reset the beat counter
    max_beat = duration;  //set the max beat
    switch (octave) {
        case 0: switch (note) {
            case 'A': if(flat){OCR1A=Ab0;}
            else {OCR1A=A0;}
     974:	80 ec       	ldi	r24, 0xC0	; 192
     976:	91 e1       	ldi	r25, 0x11	; 17
     978:	9b bd       	out	0x2b, r25	; 43
     97a:	8a bd       	out	0x2a, r24	; 42
     97c:	ae cd       	rjmp	.-1188   	; 0x4da <play_note+0x22>
                break;
        } 
            break;
        case 8: switch (note) {
            case 'A': if(flat){OCR1A=Ab8;}
            else {OCR1A=A8;}
     97e:	89 e0       	ldi	r24, 0x09	; 9
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	9b bd       	out	0x2b, r25	; 43
     984:	8a bd       	out	0x2a, r24	; 42
     986:	a9 cd       	rjmp	.-1198   	; 0x4da <play_note+0x22>
            else {OCR1A=B7;}
                break;
            case 'C': OCR1A=C7;
                break;
            case 'D': if(flat){OCR1A=Db7;}
            else {OCR1A=D7;}
     988:	84 e3       	ldi	r24, 0x34	; 52
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	9b bd       	out	0x2b, r25	; 43
     98e:	8a bd       	out	0x2a, r24	; 42
     990:	a4 cd       	rjmp	.-1208   	; 0x4da <play_note+0x22>
                break;
        } 
            break;
        case 5: switch (note) {
            case 'A': if(flat){OCR1A=Ab5;}
            else {OCR1A=A5;}
     992:	8d e8       	ldi	r24, 0x8D	; 141
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	9b bd       	out	0x2b, r25	; 43
     998:	8a bd       	out	0x2a, r24	; 42
     99a:	9f cd       	rjmp	.-1218   	; 0x4da <play_note+0x22>
            else {OCR1A=E5;}
                break;
            case 'F': OCR1A=F5;
                break;
            case 'G': if(flat){OCR1A=Gb5;}
            else {OCR1A=G5;}
     99c:	8e e9       	ldi	r24, 0x9E	; 158
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	9b bd       	out	0x2b, r25	; 43
     9a2:	8a bd       	out	0x2a, r24	; 42
     9a4:	9a cd       	rjmp	.-1228   	; 0x4da <play_note+0x22>
        case 5: switch (note) {
            case 'A': if(flat){OCR1A=Ab5;}
            else {OCR1A=A5;}
                break;
            case 'B': if(flat){OCR1A=Bb5;}
            else {OCR1A=B5;}
     9a6:	8d e7       	ldi	r24, 0x7D	; 125
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	9b bd       	out	0x2b, r25	; 43
     9ac:	8a bd       	out	0x2a, r24	; 42
     9ae:	95 cd       	rjmp	.-1238   	; 0x4da <play_note+0x22>
                break;
            case 'C': OCR1A=C5;
                break;
            case 'D': if(flat){OCR1A=Db5;}
            else {OCR1A=D5;}
     9b0:	83 ed       	ldi	r24, 0xD3	; 211
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	9b bd       	out	0x2b, r25	; 43
     9b6:	8a bd       	out	0x2a, r24	; 42
     9b8:	90 cd       	rjmp	.-1248   	; 0x4da <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db6;}
            else {OCR1A=D6;}
                break;
            case 'E': if(flat){OCR1A=Eb6;}
            else {OCR1A=E6;}
     9ba:	8d e5       	ldi	r24, 0x5D	; 93
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	9b bd       	out	0x2b, r25	; 43
     9c0:	8a bd       	out	0x2a, r24	; 42
     9c2:	8b cd       	rjmp	.-1258   	; 0x4da <play_note+0x22>
                break;
        } 
            break;
        case 6: switch (note) {
            case 'A': if(flat){OCR1A=Ab6;}
            else {OCR1A=A6;}
     9c4:	86 e4       	ldi	r24, 0x46	; 70
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	9b bd       	out	0x2b, r25	; 43
     9ca:	8a bd       	out	0x2a, r24	; 42
     9cc:	86 cd       	rjmp	.-1268   	; 0x4da <play_note+0x22>
            else {OCR1A=B6;}
                break;
            case 'C': OCR1A=C6;
                break;
            case 'D': if(flat){OCR1A=Db6;}
            else {OCR1A=D6;}
     9ce:	89 e6       	ldi	r24, 0x69	; 105
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	9b bd       	out	0x2b, r25	; 43
     9d4:	8a bd       	out	0x2a, r24	; 42
     9d6:	81 cd       	rjmp	.-1278   	; 0x4da <play_note+0x22>
            else {OCR1A=E6;}
                break;
            case 'F': OCR1A=F6;
                break;
            case 'G': if(flat){OCR1A=Gb6;}
            else {OCR1A=G6;}
     9d8:	8e e4       	ldi	r24, 0x4E	; 78
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	9b bd       	out	0x2b, r25	; 43
     9de:	8a bd       	out	0x2a, r24	; 42
     9e0:	7c cd       	rjmp	.-1288   	; 0x4da <play_note+0x22>
                break;
        }
            break;
        case 4: switch (note) {
            case 'A': if(flat){OCR1A=Ab4;}
            else {OCR1A=A4;}
     9e2:	8b e1       	ldi	r24, 0x1B	; 27
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	9b bd       	out	0x2b, r25	; 43
     9e8:	8a bd       	out	0x2a, r24	; 42
     9ea:	77 cd       	rjmp	.-1298   	; 0x4da <play_note+0x22>
            else {OCR1A=B2;}
                break;
            case 'C': OCR1A=C2;
                break;
            case 'D': if(flat){OCR1A=Db2;}
            else {OCR1A=D2;}
     9ec:	85 ea       	ldi	r24, 0xA5	; 165
     9ee:	96 e0       	ldi	r25, 0x06	; 6
     9f0:	9b bd       	out	0x2b, r25	; 43
     9f2:	8a bd       	out	0x2a, r24	; 42
     9f4:	72 cd       	rjmp	.-1308   	; 0x4da <play_note+0x22>
            else {OCR1A=E3;}
                break;
            case 'F': OCR1A=F3;
                break;
            case 'G': if(flat){OCR1A=Gb3;}
            else {OCR1A=G3;}
     9f6:	8c e7       	ldi	r24, 0x7C	; 124
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	9b bd       	out	0x2b, r25	; 43
     9fc:	8a bd       	out	0x2a, r24	; 42
     9fe:	6d cd       	rjmp	.-1318   	; 0x4da <play_note+0x22>
            else {OCR1A=B4;}
                break;
            case 'C': OCR1A=C4;
                break;
            case 'D': if(flat){OCR1A=Db4;}
            else {OCR1A=D4;}
     a00:	88 ea       	ldi	r24, 0xA8	; 168
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	9b bd       	out	0x2b, r25	; 43
     a06:	8a bd       	out	0x2a, r24	; 42
     a08:	68 cd       	rjmp	.-1328   	; 0x4da <play_note+0x22>
            else {OCR1A=B3;}
                break;
            case 'C': OCR1A=C3;
                break;
            case 'D': if(flat){OCR1A=Db3;}
            else {OCR1A=D3;}
     a0a:	82 e5       	ldi	r24, 0x52	; 82
     a0c:	93 e0       	ldi	r25, 0x03	; 3
     a0e:	9b bd       	out	0x2b, r25	; 43
     a10:	8a bd       	out	0x2a, r24	; 42
     a12:	63 cd       	rjmp	.-1338   	; 0x4da <play_note+0x22>
        case 4: switch (note) {
            case 'A': if(flat){OCR1A=Ab4;}
            else {OCR1A=A4;}
                break;
            case 'B': if(flat){OCR1A=Bb4;}
            else {OCR1A=B4;}
     a14:	8c ef       	ldi	r24, 0xFC	; 252
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	9b bd       	out	0x2b, r25	; 43
     a1a:	8a bd       	out	0x2a, r24	; 42
     a1c:	5e cd       	rjmp	.-1348   	; 0x4da <play_note+0x22>
                break;
        }
            break;
        case 3: switch (note) {
            case 'A': if(flat){OCR1A=Ab3;}
            else {OCR1A=A3;}
     a1e:	87 e3       	ldi	r24, 0x37	; 55
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	9b bd       	out	0x2b, r25	; 43
     a24:	8a bd       	out	0x2a, r24	; 42
     a26:	59 cd       	rjmp	.-1358   	; 0x4da <play_note+0x22>
            else {OCR1A=E4;}
                break;
            case 'F': OCR1A=F4;
                break;
            case 'G': if(flat){OCR1A=Gb4;}
            else {OCR1A=G4;}
     a28:	8d e3       	ldi	r24, 0x3D	; 61
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	9b bd       	out	0x2b, r25	; 43
     a2e:	8a bd       	out	0x2a, r24	; 42
     a30:	54 cd       	rjmp	.-1368   	; 0x4da <play_note+0x22>
            else {OCR1A=B8;}
                break;
            case 'C': OCR1A=C8;
                break;
            case 'D': if(flat){OCR1A=Db8;}
            else {OCR1A=D8;}
     a32:	89 e1       	ldi	r24, 0x19	; 25
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	9b bd       	out	0x2b, r25	; 43
     a38:	8a bd       	out	0x2a, r24	; 42
     a3a:	4f cd       	rjmp	.-1378   	; 0x4da <play_note+0x22>
        case 8: switch (note) {
            case 'A': if(flat){OCR1A=Ab8;}
            else {OCR1A=A8;}
                break;
            case 'B': if(flat){OCR1A=Bb8;}
            else {OCR1A=B8;}
     a3c:	85 e0       	ldi	r24, 0x05	; 5
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	9b bd       	out	0x2b, r25	; 43
     a42:	8a bd       	out	0x2a, r24	; 42
     a44:	4a cd       	rjmp	.-1388   	; 0x4da <play_note+0x22>
            else {OCR1A=B0;}
                break;
            case 'C': OCR1A=C0;
                break;
            case 'D': if(flat){OCR1A=Db0;}
            else {OCR1A=D0;}
     a46:	8a e9       	ldi	r24, 0x9A	; 154
     a48:	9a e1       	ldi	r25, 0x1A	; 26
     a4a:	9b bd       	out	0x2b, r25	; 43
     a4c:	8a bd       	out	0x2a, r24	; 42
     a4e:	45 cd       	rjmp	.-1398   	; 0x4da <play_note+0x22>
            else {OCR1A=B1;}
                break;
            case 'C': OCR1A=C1;
                break;
            case 'D': if(flat){OCR1A=Db1;}
            else {OCR1A=D1;}
     a50:	8c e4       	ldi	r24, 0x4C	; 76
     a52:	9d e0       	ldi	r25, 0x0D	; 13
     a54:	9b bd       	out	0x2b, r25	; 43
     a56:	8a bd       	out	0x2a, r24	; 42
     a58:	40 cd       	rjmp	.-1408   	; 0x4da <play_note+0x22>
            else {OCR1A=E0;}
                break;
            case 'F': OCR1A=F0;
                break;
            case 'G': if(flat){OCR1A=Gb0;}
            else {OCR1A=G0;}
     a5a:	8d ee       	ldi	r24, 0xED	; 237
     a5c:	93 e1       	ldi	r25, 0x13	; 19
     a5e:	9b bd       	out	0x2b, r25	; 43
     a60:	8a bd       	out	0x2a, r24	; 42
     a62:	3b cd       	rjmp	.-1418   	; 0x4da <play_note+0x22>
        case 2: switch (note) {
            case 'A': if(flat){OCR1A=Ab2;}
            else {OCR1A=A2;}
                break;
            case 'B': if(flat){OCR1A=Bb2;}
            else {OCR1A=B2;}
     a64:	83 ef       	ldi	r24, 0xF3	; 243
     a66:	93 e0       	ldi	r25, 0x03	; 3
     a68:	9b bd       	out	0x2b, r25	; 43
     a6a:	8a bd       	out	0x2a, r24	; 42
     a6c:	36 cd       	rjmp	.-1428   	; 0x4da <play_note+0x22>
                break;
        }
            break;
        case 2: switch (note) {
            case 'A': if(flat){OCR1A=Ab2;}
            else {OCR1A=A2;}
     a6e:	8f e6       	ldi	r24, 0x6F	; 111
     a70:	94 e0       	ldi	r25, 0x04	; 4
     a72:	9b bd       	out	0x2b, r25	; 43
     a74:	8a bd       	out	0x2a, r24	; 42
     a76:	31 cd       	rjmp	.-1438   	; 0x4da <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db1;}
            else {OCR1A=D1;}
                break;
            case 'E': if(flat){OCR1A=Eb1;}
            else {OCR1A=E1;}
     a78:	88 ed       	ldi	r24, 0xD8	; 216
     a7a:	9b e0       	ldi	r25, 0x0B	; 11
     a7c:	9b bd       	out	0x2b, r25	; 43
     a7e:	8a bd       	out	0x2a, r24	; 42
     a80:	2c cd       	rjmp	.-1448   	; 0x4da <play_note+0x22>
        case 7: switch (note) {
            case 'A': if(flat){OCR1A=Ab7;}
            else {OCR1A=A7;}
                break;
            case 'B': if(flat){OCR1A=Bb7;}
            else {OCR1A=B7;}
     a82:	8e e1       	ldi	r24, 0x1E	; 30
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	9b bd       	out	0x2b, r25	; 43
     a88:	8a bd       	out	0x2a, r24	; 42
     a8a:	27 cd       	rjmp	.-1458   	; 0x4da <play_note+0x22>
                break;
        } 
            break;
        case 7: switch (note) {
            case 'A': if(flat){OCR1A=Ab7;}
            else {OCR1A=A7;}
     a8c:	82 e2       	ldi	r24, 0x22	; 34
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	9b bd       	out	0x2b, r25	; 43
     a92:	8a bd       	out	0x2a, r24	; 42
     a94:	22 cd       	rjmp	.-1468   	; 0x4da <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db3;}
            else {OCR1A=D3;}
                break;
            case 'E': if(flat){OCR1A=Eb3;}
            else {OCR1A=E3;}
     a96:	85 ef       	ldi	r24, 0xF5	; 245
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	9b bd       	out	0x2b, r25	; 43
     a9c:	8a bd       	out	0x2a, r24	; 42
     a9e:	1d cd       	rjmp	.-1478   	; 0x4da <play_note+0x22>
        case 0: switch (note) {
            case 'A': if(flat){OCR1A=Ab0;}
            else {OCR1A=A0;}
                break;
            case 'B': if(flat){OCR1A=Bb0;}
            else {OCR1A=B0;}
     aa0:	80 ed       	ldi	r24, 0xD0	; 208
     aa2:	9f e0       	ldi	r25, 0x0F	; 15
     aa4:	9b bd       	out	0x2b, r25	; 43
     aa6:	8a bd       	out	0x2a, r24	; 42
     aa8:	18 cd       	rjmp	.-1488   	; 0x4da <play_note+0x22>
            else {OCR1A=E8;}
                break;
            case 'F': OCR1A=F8;
                break;
            case 'G': if(flat){OCR1A=Gb8;}
            else {OCR1A=G8;}
     aaa:	8d e0       	ldi	r24, 0x0D	; 13
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	9b bd       	out	0x2b, r25	; 43
     ab0:	8a bd       	out	0x2a, r24	; 42
     ab2:	13 cd       	rjmp	.-1498   	; 0x4da <play_note+0x22>
                break;
        }
            break;
        case 1: switch (note) {
            case 'A': if(flat){OCR1A=Ab1;}
            else {OCR1A=A1;}
     ab4:	8f ed       	ldi	r24, 0xDF	; 223
     ab6:	98 e0       	ldi	r25, 0x08	; 8
     ab8:	9b bd       	out	0x2b, r25	; 43
     aba:	8a bd       	out	0x2a, r24	; 42
     abc:	0e cd       	rjmp	.-1508   	; 0x4da <play_note+0x22>
            else {OCR1A=E1;}
                break;
            case 'F': OCR1A=F1;
                break;
            case 'G': if(flat){OCR1A=Gb1;}
            else {OCR1A=G1;}
     abe:	86 ef       	ldi	r24, 0xF6	; 246
     ac0:	99 e0       	ldi	r25, 0x09	; 9
     ac2:	9b bd       	out	0x2b, r25	; 43
     ac4:	8a bd       	out	0x2a, r24	; 42
     ac6:	09 cd       	rjmp	.-1518   	; 0x4da <play_note+0x22>
            else {OCR1A=E2;}
                break;
            case 'F': OCR1A=F2;
                break;
            case 'G': if(flat){OCR1A=Gb2;}
            else {OCR1A=G2;}
     ac8:	8a ef       	ldi	r24, 0xFA	; 250
     aca:	94 e0       	ldi	r25, 0x04	; 4
     acc:	9b bd       	out	0x2b, r25	; 43
     ace:	8a bd       	out	0x2a, r24	; 42
     ad0:	04 cd       	rjmp	.-1528   	; 0x4da <play_note+0x22>

00000ad2 <song0>:
volatile uint16_t max_beat;
volatile uint8_t  notes;
volatile uint8_t music_off_flag;  //for snooze function

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
    switch (note) {
     ad2:	86 34       	cpi	r24, 0x46	; 70
     ad4:	91 05       	cpc	r25, r1
     ad6:	20 f0       	brcs	.+8      	; 0xae0 <song0+0xe>
            break;
        case 68: play_note('F', 0, 4, 24);
            break;
        case 69: play_rest(8);
            break;
        default: notes=-1;
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	80 93 e9 01 	sts	0x01E9, r24
     ade:	08 95       	ret
volatile uint16_t max_beat;
volatile uint8_t  notes;
volatile uint8_t music_off_flag;  //for snooze function

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
    switch (note) {
     ae0:	fc 01       	movw	r30, r24
     ae2:	e2 57       	subi	r30, 0x72	; 114
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            break;
        case 55: play_note('A', 0, 4, 2);
            break;
        case 56: play_note('B', 1, 4, 6);
            break;
        case 57: play_note('A', 0, 4, 2);
     aea:	22 e0       	ldi	r18, 0x02	; 2
     aec:	44 e0       	ldi	r20, 0x04	; 4
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	81 e4       	ldi	r24, 0x41	; 65
     af2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 45: play_note('A', 0, 4, 6);
            break;
        case 46: play_note('A', 1, 4, 2);
            break;
        case 47: play_note('A', 0, 4, 6);
     af6:	26 e0       	ldi	r18, 0x06	; 6
     af8:	44 e0       	ldi	r20, 0x04	; 4
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	81 e4       	ldi	r24, 0x41	; 65
     afe:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 48: play_note('A', 1, 4, 2);
     b02:	22 e0       	ldi	r18, 0x02	; 2
     b04:	44 e0       	ldi	r20, 0x04	; 4
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	81 e4       	ldi	r24, 0x41	; 65
     b0a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 51: play_note('G', 1, 4, 8);
            break;
        case 52: play_note('G', 0, 4, 8);
            break;
        case 53: play_note('D', 0, 4, 8);
     b0e:	28 e0       	ldi	r18, 0x08	; 8
     b10:	44 e0       	ldi	r20, 0x04	; 4
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	84 e4       	ldi	r24, 0x44	; 68
     b16:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 48: play_note('A', 1, 4, 2);
            break;
        case 49: play_note('A', 0, 4, 16);
            break;
        case 50: play_note('F', 0, 4, 8);
     b1a:	28 e0       	ldi	r18, 0x08	; 8
     b1c:	44 e0       	ldi	r20, 0x04	; 4
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	86 e4       	ldi	r24, 0x46	; 70
     b22:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 54: play_note('B', 1, 4, 6);
            break;
        case 55: play_note('A', 0, 4, 2);
            break;
        case 56: play_note('B', 1, 4, 6);
     b26:	26 e0       	ldi	r18, 0x06	; 6
     b28:	44 e0       	ldi	r20, 0x04	; 4
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	82 e4       	ldi	r24, 0x42	; 66
     b2e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 42: play_note('E', 0, 4, 8);
            break;
        case 43: play_note('D', 0, 4, 8);
            break;
        case 44: play_note('C', 0, 4, 8);
     b32:	28 e0       	ldi	r18, 0x08	; 8
     b34:	44 e0       	ldi	r20, 0x04	; 4
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	83 e4       	ldi	r24, 0x43	; 67
     b3a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 64: play_note('C', 0, 5, 4);
            break;
        case 65: play_note('D', 0, 5, 4);
            break;
        case 66: play_note('A', 0, 4, 8);
     b3e:	28 e0       	ldi	r18, 0x08	; 8
     b40:	44 e0       	ldi	r20, 0x04	; 4
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	81 e4       	ldi	r24, 0x41	; 65
     b46:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 67: play_note('G', 0, 4, 8);
     b4a:	28 e0       	ldi	r18, 0x08	; 8
     b4c:	44 e0       	ldi	r20, 0x04	; 4
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	87 e4       	ldi	r24, 0x47	; 71
     b52:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 40: play_rest(8);
            break;
        case 41: play_note('F', 0, 4, 8);
            break;
        case 42: play_note('E', 0, 4, 8);
     b56:	28 e0       	ldi	r18, 0x08	; 8
     b58:	44 e0       	ldi	r20, 0x04	; 4
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	85 e4       	ldi	r24, 0x45	; 69
     b5e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;//phrase
        case 59: play_note('D', 0, 4, 16);
            break;
        case 60: play_note('D', 0, 5, 16);
            break;
        case 61: play_note('A', 0, 4, 16);
     b62:	20 e1       	ldi	r18, 0x10	; 16
     b64:	44 e0       	ldi	r20, 0x04	; 4
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	81 e4       	ldi	r24, 0x41	; 65
     b6a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 62: play_note('C', 0, 5, 16);
            break;
        case 63: play_note('B', 1, 4, 8);
            break;
        case 64: play_note('C', 0, 5, 4);
     b6e:	24 e0       	ldi	r18, 0x04	; 4
     b70:	45 e0       	ldi	r20, 0x05	; 5
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	83 e4       	ldi	r24, 0x43	; 67
     b76:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 65: play_note('D', 0, 5, 4);
     b7a:	24 e0       	ldi	r18, 0x04	; 4
     b7c:	45 e0       	ldi	r20, 0x05	; 5
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	84 e4       	ldi	r24, 0x44	; 68
     b82:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     b86:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     b88:	10 92 fd 01 	sts	0x01FD, r1
     b8c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     b90:	88 e0       	ldi	r24, 0x08	; 8
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	90 93 f4 01 	sts	0x01F4, r25
     b98:	80 93 f3 01 	sts	0x01F3, r24
     b9c:	08 95       	ret
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     b9e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     ba0:	10 92 fd 01 	sts	0x01FD, r1
     ba4:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	90 93 f4 01 	sts	0x01F4, r25
     bb0:	80 93 f3 01 	sts	0x01F3, r24
     bb4:	08 95       	ret
            break;
        case 56: play_note('B', 1, 4, 6);
            break;
        case 57: play_note('A', 0, 4, 2);
            break;
        case 58: play_note('B', 1, 4, 16);
     bb6:	20 e1       	ldi	r18, 0x10	; 16
     bb8:	44 e0       	ldi	r20, 0x04	; 4
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	82 e4       	ldi	r24, 0x42	; 66
     bbe:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 61: play_note('A', 0, 4, 16);
            break;
        case 62: play_note('C', 0, 5, 16);
            break;
        case 63: play_note('B', 1, 4, 8);
     bc2:	28 e0       	ldi	r18, 0x08	; 8
     bc4:	44 e0       	ldi	r20, 0x04	; 4
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	82 e4       	ldi	r24, 0x42	; 66
     bca:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 37: play_note('G', 0, 4, 8);
            break;
        case 38: play_note('A', 0, 4, 8);
            break;
        case 39: play_note('G', 0, 4, 24);
     bce:	28 e1       	ldi	r18, 0x18	; 24
     bd0:	44 e0       	ldi	r20, 0x04	; 4
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	87 e4       	ldi	r24, 0x47	; 71
     bd6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 58: play_note('B', 1, 4, 16);
            break;//phrase
        case 59: play_note('D', 0, 4, 16);
            break;
        case 60: play_note('D', 0, 5, 16);
     bda:	20 e1       	ldi	r18, 0x10	; 16
     bdc:	45 e0       	ldi	r20, 0x05	; 5
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	84 e4       	ldi	r24, 0x44	; 68
     be2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     be6:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     be8:	10 92 fd 01 	sts	0x01FD, r1
     bec:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	90 93 f4 01 	sts	0x01F4, r25
     bf8:	80 93 f3 01 	sts	0x01F3, r24
     bfc:	08 95       	ret
            break;
        case 34: play_note('D', 0, 5, 4);
            break;
        case 35: play_note('B', 0, 4, 8);
            break;
        case 36: play_note('A', 0, 4, 4);
     bfe:	24 e0       	ldi	r18, 0x04	; 4
     c00:	44 e0       	ldi	r20, 0x04	; 4
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	81 e4       	ldi	r24, 0x41	; 65
     c06:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 21: play_rest(1); //rest
            break;
        case 22: play_note('G', 1, 4, 4);
            break;
        case 23: play_note('G', 0, 4, 6);
     c0a:	26 e0       	ldi	r18, 0x06	; 6
     c0c:	44 e0       	ldi	r20, 0x04	; 4
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	87 e4       	ldi	r24, 0x47	; 71
     c12:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 20: play_note('G', 0, 4, 7);
            break;
        case 21: play_rest(1); //rest
            break;
        case 22: play_note('G', 1, 4, 4);
     c16:	24 e0       	ldi	r18, 0x04	; 4
     c18:	44 e0       	ldi	r20, 0x04	; 4
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	87 e4       	ldi	r24, 0x47	; 71
     c1e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 49: play_note('A', 0, 4, 16);
            break;
        case 50: play_note('F', 0, 4, 8);
            break;
        case 51: play_note('G', 1, 4, 8);
     c22:	28 e0       	ldi	r18, 0x08	; 8
     c24:	44 e0       	ldi	r20, 0x04	; 4
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	87 e4       	ldi	r24, 0x47	; 71
     c2a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 16: play_note('A', 0, 4, 2);
            break;
        case 17: play_note('B', 1, 4, 16);
            break;
        case 18: play_note('G', 0, 4, 3);
     c2e:	23 e0       	ldi	r18, 0x03	; 3
     c30:	44 e0       	ldi	r20, 0x04	; 4
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	87 e4       	ldi	r24, 0x47	; 71
     c36:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 57: play_note('A', 0, 4, 2);
            break;
        case 58: play_note('B', 1, 4, 16);
            break;//phrase
        case 59: play_note('D', 0, 4, 16);
     c3a:	20 e1       	ldi	r18, 0x10	; 16
     c3c:	44 e0       	ldi	r20, 0x04	; 4
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	84 e4       	ldi	r24, 0x44	; 68
     c42:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 60: play_note('D', 0, 5, 16);
            break;
        case 61: play_note('A', 0, 4, 16);
            break;
        case 62: play_note('C', 0, 5, 16);
     c46:	20 e1       	ldi	r18, 0x10	; 16
     c48:	45 e0       	ldi	r20, 0x05	; 5
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	83 e4       	ldi	r24, 0x43	; 67
     c4e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 29: play_note('A', 1, 4, 4);
            break;
        case 30: play_note('A', 0, 4, 6);
            break;
        case 31: play_note('B', 1, 4, 2);
     c52:	22 e0       	ldi	r18, 0x02	; 2
     c54:	44 e0       	ldi	r20, 0x04	; 4
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	82 e4       	ldi	r24, 0x42	; 66
     c5a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 32: play_note('C', 0, 5, 4);
            break;
        case 33: play_note('D', 1, 5, 4);
     c5e:	24 e0       	ldi	r18, 0x04	; 4
     c60:	45 e0       	ldi	r20, 0x05	; 5
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	84 e4       	ldi	r24, 0x44	; 68
     c66:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 27: play_rest(2);
            break;
        case 28: play_note('A', 0, 4, 8);
            break;
        case 29: play_note('A', 1, 4, 4);
     c6a:	24 e0       	ldi	r18, 0x04	; 4
     c6c:	44 e0       	ldi	r20, 0x04	; 4
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	81 e4       	ldi	r24, 0x41	; 65
     c72:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 33: play_note('D', 1, 5, 4);
            break;
        case 34: play_note('D', 0, 5, 4);
            break;
        case 35: play_note('B', 0, 4, 8);
     c76:	28 e0       	ldi	r18, 0x08	; 8
     c78:	44 e0       	ldi	r20, 0x04	; 4
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	82 e4       	ldi	r24, 0x42	; 66
     c7e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 66: play_note('A', 0, 4, 8);
            break;
        case 67: play_note('G', 0, 4, 8);
            break;
        case 68: play_note('F', 0, 4, 24);
     c82:	28 e1       	ldi	r18, 0x18	; 24
     c84:	44 e0       	ldi	r20, 0x04	; 4
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	86 e4       	ldi	r24, 0x46	; 70
     c8a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 18: play_note('G', 0, 4, 3);
            break;
        case 19: play_rest(1); //rest
            break;
        case 20: play_note('G', 0, 4, 7);
     c8e:	27 e0       	ldi	r18, 0x07	; 7
     c90:	44 e0       	ldi	r20, 0x04	; 4
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	87 e4       	ldi	r24, 0x47	; 71
     c96:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>

00000c9a <song1>:
        default: notes=-1;
    }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
    switch (note) {
     c9a:	8f 33       	cpi	r24, 0x3F	; 63
     c9c:	91 05       	cpc	r25, r1
     c9e:	20 f0       	brcs	.+8      	; 0xca8 <song1+0xe>
            break;//bar
        case 61: play_note('A', 1, 3, 16);
            break;
        case 62: play_rest(16);
            break;//bar phrase
        default: notes=-1;
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	80 93 e9 01 	sts	0x01E9, r24
     ca6:	08 95       	ret
        default: notes=-1;
    }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
    switch (note) {
     ca8:	fc 01       	movw	r30, r24
     caa:	ec 52       	subi	r30, 0x2C	; 44
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            break;
        case 35: play_rest(1);
            break;
        case 36: play_note('B', 0, 3, 4);
            break;
        case 37: play_note('C', 0, 4, 4);
     cb2:	24 e0       	ldi	r18, 0x04	; 4
     cb4:	44 e0       	ldi	r20, 0x04	; 4
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	83 e4       	ldi	r24, 0x43	; 67
     cba:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 38: play_note('D', 0, 4, 8);
            break;
        case 39: play_note('E', 0, 4, 8);
     cbe:	28 e0       	ldi	r18, 0x08	; 8
     cc0:	44 e0       	ldi	r20, 0x04	; 4
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	85 e4       	ldi	r24, 0x45	; 69
     cc6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     cca:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     ccc:	10 92 fd 01 	sts	0x01FD, r1
     cd0:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	90 93 f4 01 	sts	0x01F4, r25
     cdc:	80 93 f3 01 	sts	0x01F3, r24
     ce0:	08 95       	ret
            break;
        case 36: play_note('B', 0, 3, 4);
            break;
        case 37: play_note('C', 0, 4, 4);
            break;
        case 38: play_note('D', 0, 4, 8);
     ce2:	28 e0       	ldi	r18, 0x08	; 8
     ce4:	44 e0       	ldi	r20, 0x04	; 4
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	84 e4       	ldi	r24, 0x44	; 68
     cea:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 53: play_rest(8);
            break;//bar phrase
        case 54: play_note('E', 0, 3, 16);
            break;
        case 55: play_note('C', 0, 3, 16);
     cee:	20 e1       	ldi	r18, 0x10	; 16
     cf0:	43 e0       	ldi	r20, 0x03	; 3
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	83 e4       	ldi	r24, 0x43	; 67
     cf6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 30: play_note('C', 0, 4, 4);
            break;
        case 31: play_note('E', 0, 4, 8);
            break;
        case 32: play_note('D', 0, 4, 4);
     cfa:	24 e0       	ldi	r18, 0x04	; 4
     cfc:	44 e0       	ldi	r20, 0x04	; 4
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	84 e4       	ldi	r24, 0x44	; 68
     d02:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;//bar
        case 34: play_note('B', 0, 3, 7);
            break;
        case 35: play_rest(1);
            break;
        case 36: play_note('B', 0, 3, 4);
     d06:	24 e0       	ldi	r18, 0x04	; 4
     d08:	43 e0       	ldi	r20, 0x03	; 3
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	82 e4       	ldi	r24, 0x42	; 66
     d0e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 39: play_note('E', 0, 4, 8);
            break;
        case 40: play_note('C', 0, 4, 8);
            break;
        case 41: play_note('A', 0, 3, 7);
     d12:	27 e0       	ldi	r18, 0x07	; 7
     d14:	43 e0       	ldi	r20, 0x03	; 3
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	81 e4       	ldi	r24, 0x41	; 65
     d1a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 26: play_note('A', 0, 4, 8);
            break;
        case 27: play_note('G', 0, 4, 4);
            break;
        case 28: play_note('F', 0, 4, 4);
     d1e:	24 e0       	ldi	r18, 0x04	; 4
     d20:	44 e0       	ldi	r20, 0x04	; 4
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	86 e4       	ldi	r24, 0x46	; 70
     d26:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 55: play_note('C', 0, 3, 16);
            break;//bar
        case 56: play_note('D', 0, 3, 16);
            break;
        case 57: play_note('B', 0, 2, 16);
     d2a:	20 e1       	ldi	r18, 0x10	; 16
     d2c:	42 e0       	ldi	r20, 0x02	; 2
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	82 e4       	ldi	r24, 0x42	; 66
     d32:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;//bar
        case 58: play_note('C', 0, 3, 8);
            break;
        case 59: play_note('E', 0, 3, 8);
            break;
        case 60: play_note('A', 0, 3, 16);
     d36:	20 e1       	ldi	r18, 0x10	; 16
     d38:	43 e0       	ldi	r20, 0x03	; 3
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	81 e4       	ldi	r24, 0x41	; 65
     d3e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 38: play_note('D', 0, 4, 8);
            break;
        case 39: play_note('E', 0, 4, 8);
            break;
        case 40: play_note('C', 0, 4, 8);
     d42:	28 e0       	ldi	r18, 0x08	; 8
     d44:	44 e0       	ldi	r20, 0x04	; 4
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	83 e4       	ldi	r24, 0x43	; 67
     d4a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;//bar phrase
        case 54: play_note('E', 0, 3, 16);
            break;
        case 55: play_note('C', 0, 3, 16);
            break;//bar
        case 56: play_note('D', 0, 3, 16);
     d4e:	20 e1       	ldi	r18, 0x10	; 16
     d50:	43 e0       	ldi	r20, 0x03	; 3
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	84 e4       	ldi	r24, 0x44	; 68
     d56:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 52: play_note('B', 0, 2, 8);
            break;
        case 53: play_rest(8);
            break;//bar phrase
        case 54: play_note('E', 0, 3, 16);
     d5a:	20 e1       	ldi	r18, 0x10	; 16
     d5c:	43 e0       	ldi	r20, 0x03	; 3
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	85 e4       	ldi	r24, 0x45	; 69
     d62:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     d66:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     d68:	10 92 fd 01 	sts	0x01FD, r1
     d6c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     d70:	88 e0       	ldi	r24, 0x08	; 8
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	90 93 f4 01 	sts	0x01F4, r25
     d78:	80 93 f3 01 	sts	0x01F3, r24
     d7c:	08 95       	ret
            break;
        case 32: play_note('D', 0, 4, 4);
            break;
        case 33: play_note('C', 0, 4, 4);
            break;//bar
        case 34: play_note('B', 0, 3, 7);
     d7e:	27 e0       	ldi	r18, 0x07	; 7
     d80:	43 e0       	ldi	r20, 0x03	; 3
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	82 e4       	ldi	r24, 0x42	; 66
     d86:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 13: play_note('D', 0, 4, 4);
            break;
        case 14: play_note('C', 0, 4, 4);
            break;//bar
        case 15: play_note('B', 0, 3, 12);
     d8a:	2c e0       	ldi	r18, 0x0C	; 12
     d8c:	43 e0       	ldi	r20, 0x03	; 3
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	82 e4       	ldi	r24, 0x42	; 66
     d92:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 59: play_note('E', 0, 3, 8);
            break;
        case 60: play_note('A', 0, 3, 16);
            break;//bar
        case 61: play_note('A', 1, 3, 16);
     d96:	20 e1       	ldi	r18, 0x10	; 16
     d98:	43 e0       	ldi	r20, 0x03	; 3
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	81 e4       	ldi	r24, 0x41	; 65
     d9e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     da2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     da4:	10 92 fd 01 	sts	0x01FD, r1
     da8:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     dac:	80 e1       	ldi	r24, 0x10	; 16
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	90 93 f4 01 	sts	0x01F4, r25
     db4:	80 93 f3 01 	sts	0x01F3, r24
     db8:	08 95       	ret
            break;
        case 25: play_note('F', 0, 4, 4);
            break;
        case 26: play_note('A', 0, 4, 8);
            break;
        case 27: play_note('G', 0, 4, 4);
     dba:	24 e0       	ldi	r18, 0x04	; 4
     dbc:	44 e0       	ldi	r20, 0x04	; 4
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	87 e4       	ldi	r24, 0x47	; 71
     dc2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 50: play_note('A', 0, 2, 16);
            break;//bar
        case 51: play_note('A', 1, 2, 16);
            break;
        case 52: play_note('B', 0, 2, 8);
     dc6:	28 e0       	ldi	r18, 0x08	; 8
     dc8:	42 e0       	ldi	r20, 0x02	; 2
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	82 e4       	ldi	r24, 0x42	; 66
     dce:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 48: play_note('B', 0, 2, 16);
            break;//bar
        case 49: play_note('C', 0, 3, 16);
            break;
        case 50: play_note('A', 0, 2, 16);
     dd2:	20 e1       	ldi	r18, 0x10	; 16
     dd4:	42 e0       	ldi	r20, 0x02	; 2
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	81 e4       	ldi	r24, 0x41	; 65
     dda:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;//bar
        case 51: play_note('A', 1, 2, 16);
     dde:	20 e1       	ldi	r18, 0x10	; 16
     de0:	42 e0       	ldi	r20, 0x02	; 2
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	81 e4       	ldi	r24, 0x41	; 65
     de6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 27: play_note('G', 0, 4, 4);
            break;
        case 28: play_note('F', 0, 4, 4);
            break;//bar
        case 29: play_note('E', 0, 4, 12);
     dea:	2c e0       	ldi	r18, 0x0C	; 12
     dec:	44 e0       	ldi	r20, 0x04	; 4
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	85 e4       	ldi	r24, 0x45	; 69
     df2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 3: play_note('D', 0, 4, 4);
            break;
        case 4: play_note('E', 0, 4, 2);
            break;
        case 5: play_note('D', 0, 4, 2);
     df6:	22 e0       	ldi	r18, 0x02	; 2
     df8:	44 e0       	ldi	r20, 0x04	; 4
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	84 e4       	ldi	r24, 0x44	; 68
     dfe:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 2: play_note('C', 0, 4, 4);
            break;
        case 3: play_note('D', 0, 4, 4);
            break;
        case 4: play_note('E', 0, 4, 2);
     e02:	22 e0       	ldi	r18, 0x02	; 2
     e04:	44 e0       	ldi	r20, 0x04	; 4
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	85 e4       	ldi	r24, 0x45	; 69
     e0a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;//bar
        case 56: play_note('D', 0, 3, 16);
            break;
        case 57: play_note('B', 0, 2, 16);
            break;//bar
        case 58: play_note('C', 0, 3, 8);
     e0e:	28 e0       	ldi	r18, 0x08	; 8
     e10:	43 e0       	ldi	r20, 0x03	; 3
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	83 e4       	ldi	r24, 0x43	; 67
     e16:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;//bar
        case 8: play_note('A', 0, 3, 7);
            break;
        case 9: play_rest(1);
            break;
        case 10: play_note('A', 0, 3, 4);
     e1a:	24 e0       	ldi	r18, 0x04	; 4
     e1c:	43 e0       	ldi	r20, 0x03	; 3
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	81 e4       	ldi	r24, 0x41	; 65
     e22:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 57: play_note('B', 0, 2, 16);
            break;//bar
        case 58: play_note('C', 0, 3, 8);
            break;
        case 59: play_note('E', 0, 3, 8);
     e26:	28 e0       	ldi	r18, 0x08	; 8
     e28:	43 e0       	ldi	r20, 0x03	; 3
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	85 e4       	ldi	r24, 0x45	; 69
     e2e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 41: play_note('A', 0, 3, 7);
            break;
        case 42: play_rest(1);
            break;
        case 43: play_note('A', 0, 3, 8);
     e32:	28 e0       	ldi	r18, 0x08	; 8
     e34:	43 e0       	ldi	r20, 0x03	; 3
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	81 e4       	ldi	r24, 0x41	; 65
     e3a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     e3e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     e40:	10 92 fd 01 	sts	0x01FD, r1
     e44:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     e48:	84 e0       	ldi	r24, 0x04	; 4
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	90 93 f4 01 	sts	0x01F4, r25
     e50:	80 93 f3 01 	sts	0x01F3, r24
     e54:	08 95       	ret
            break;
        case 24: play_note('D', 0, 4, 8);
            break;
        case 25: play_note('F', 0, 4, 4);
            break;
        case 26: play_note('A', 0, 4, 8);
     e56:	28 e0       	ldi	r18, 0x08	; 8
     e58:	44 e0       	ldi	r20, 0x04	; 4
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	81 e4       	ldi	r24, 0x41	; 65
     e5e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>

00000e62 <song2>:
            
    }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
    switch (note) {
     e62:	85 39       	cpi	r24, 0x95	; 149
     e64:	91 05       	cpc	r25, r1
     e66:	20 f0       	brcs	.+8      	; 0xe70 <song2+0xe>
            break;
        case 147: play_note('G', 0, 3, 4);
            break;
        case 148: play_rest(8);
            break;
        default: notes=-1;
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	80 93 e9 01 	sts	0x01E9, r24
     e6e:	08 95       	ret
            
    }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
    switch (note) {
     e70:	fc 01       	movw	r30, r24
     e72:	ed 5e       	subi	r30, 0xED	; 237
     e74:	fe 4f       	sbci	r31, 0xFE	; 254
     e76:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            break;
        case 145: play_rest(2);
            break;
        case 146: play_note('A', 0, 3, 2);
            break;
        case 147: play_note('G', 0, 3, 4);
     e7a:	24 e0       	ldi	r18, 0x04	; 4
     e7c:	43 e0       	ldi	r20, 0x03	; 3
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	87 e4       	ldi	r24, 0x47	; 71
     e82:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 144: play_note('C', 0, 4, 2);
            break;
        case 145: play_rest(2);
            break;
        case 146: play_note('A', 0, 3, 2);
     e86:	22 e0       	ldi	r18, 0x02	; 2
     e88:	43 e0       	ldi	r20, 0x03	; 3
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	81 e4       	ldi	r24, 0x41	; 65
     e8e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     e92:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     e94:	10 92 fd 01 	sts	0x01FD, r1
     e98:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	90 93 f4 01 	sts	0x01F4, r25
     ea4:	80 93 f3 01 	sts	0x01F3, r24
     ea8:	08 95       	ret
            break;
        case 142: play_note('D', 0, 4, 4);
            break;
        case 143: play_note('E', 0, 4, 2);
            break;
        case 144: play_note('C', 0, 4, 2);
     eaa:	22 e0       	ldi	r18, 0x02	; 2
     eac:	44 e0       	ldi	r20, 0x04	; 4
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	83 e4       	ldi	r24, 0x43	; 67
     eb2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 141: play_note('C', 0, 4, 2);
            break;
        case 142: play_note('D', 0, 4, 4);
            break;
        case 143: play_note('E', 0, 4, 2);
     eb6:	22 e0       	ldi	r18, 0x02	; 2
     eb8:	44 e0       	ldi	r20, 0x04	; 4
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	85 e4       	ldi	r24, 0x45	; 69
     ebe:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 140: play_rest(2);
            break;
        case 141: play_note('C', 0, 4, 2);
            break;
        case 142: play_note('D', 0, 4, 4);
     ec2:	24 e0       	ldi	r18, 0x04	; 4
     ec4:	44 e0       	ldi	r20, 0x04	; 4
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	84 e4       	ldi	r24, 0x44	; 68
     eca:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 139: play_note('C', 0, 4, 2);
            break;
        case 140: play_rest(2);
            break;
        case 141: play_note('C', 0, 4, 2);
     ece:	22 e0       	ldi	r18, 0x02	; 2
     ed0:	44 e0       	ldi	r20, 0x04	; 4
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	83 e4       	ldi	r24, 0x43	; 67
     ed6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     eda:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     edc:	10 92 fd 01 	sts	0x01FD, r1
     ee0:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 f4 01 	sts	0x01F4, r25
     eec:	80 93 f3 01 	sts	0x01F3, r24
     ef0:	08 95       	ret
            break;
        case 137: play_note('C', 0, 4, 2);
            break;
        case 138: play_rest(2);
            break;
        case 139: play_note('C', 0, 4, 2);
     ef2:	22 e0       	ldi	r18, 0x02	; 2
     ef4:	44 e0       	ldi	r20, 0x04	; 4
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	83 e4       	ldi	r24, 0x43	; 67
     efa:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     efe:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     f00:	10 92 fd 01 	sts	0x01FD, r1
     f04:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	90 93 f4 01 	sts	0x01F4, r25
     f10:	80 93 f3 01 	sts	0x01F3, r24
     f14:	08 95       	ret
            break;
        case 135: play_note('C', 0, 4, 2);
            break;
        case 136: play_rest(1);
            break;
        case 137: play_note('C', 0, 4, 2);
     f16:	22 e0       	ldi	r18, 0x02	; 2
     f18:	44 e0       	ldi	r20, 0x04	; 4
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	83 e4       	ldi	r24, 0x43	; 67
     f1e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     f22:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     f24:	10 92 fd 01 	sts	0x01FD, r1
     f28:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	90 93 f4 01 	sts	0x01F4, r25
     f34:	80 93 f3 01 	sts	0x01F3, r24
     f38:	08 95       	ret
            break;
        case 133: play_note('E', 0, 4, 2);
            break;
        case 134: play_rest(16);
            break;
        case 135: play_note('C', 0, 4, 2);
     f3a:	22 e0       	ldi	r18, 0x02	; 2
     f3c:	44 e0       	ldi	r20, 0x04	; 4
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	83 e4       	ldi	r24, 0x43	; 67
     f42:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     f46:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     f48:	10 92 fd 01 	sts	0x01FD, r1
     f4c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     f50:	80 e1       	ldi	r24, 0x10	; 16
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	90 93 f4 01 	sts	0x01F4, r25
     f58:	80 93 f3 01 	sts	0x01F3, r24
     f5c:	08 95       	ret
            break;
        case 131: play_note('C', 0, 4, 2);
            break;
        case 132: play_note('D', 0, 4, 2);
            break;
        case 133: play_note('E', 0, 4, 2);
     f5e:	22 e0       	ldi	r18, 0x02	; 2
     f60:	44 e0       	ldi	r20, 0x04	; 4
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	85 e4       	ldi	r24, 0x45	; 69
     f66:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 130: play_rest(2);
            break;
        case 131: play_note('C', 0, 4, 2);
            break;
        case 132: play_note('D', 0, 4, 2);
     f6a:	22 e0       	ldi	r18, 0x02	; 2
     f6c:	44 e0       	ldi	r20, 0x04	; 4
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	84 e4       	ldi	r24, 0x44	; 68
     f72:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 129: play_note('C', 0, 4, 2);
            break;
        case 130: play_rest(2);
            break;
        case 131: play_note('C', 0, 4, 2);
     f76:	22 e0       	ldi	r18, 0x02	; 2
     f78:	44 e0       	ldi	r20, 0x04	; 4
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	83 e4       	ldi	r24, 0x43	; 67
     f7e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     f82:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     f84:	10 92 fd 01 	sts	0x01FD, r1
     f88:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	90 93 f4 01 	sts	0x01F4, r25
     f94:	80 93 f3 01 	sts	0x01F3, r24
     f98:	08 95       	ret
            break;
        case 127: play_note('C', 0, 4, 2);
            break;
        case 128: play_rest(2);
            break;
        case 129: play_note('C', 0, 4, 2);
     f9a:	22 e0       	ldi	r18, 0x02	; 2
     f9c:	44 e0       	ldi	r20, 0x04	; 4
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	83 e4       	ldi	r24, 0x43	; 67
     fa2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     fa6:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     fa8:	10 92 fd 01 	sts	0x01FD, r1
     fac:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	90 93 f4 01 	sts	0x01F4, r25
     fb8:	80 93 f3 01 	sts	0x01F3, r24
     fbc:	08 95       	ret
            break;
        case 125: play_note('C', 0, 4, 2);
            break;
        case 126: play_rest(1);
            break;
        case 127: play_note('C', 0, 4, 2);
     fbe:	22 e0       	ldi	r18, 0x02	; 2
     fc0:	44 e0       	ldi	r20, 0x04	; 4
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	83 e4       	ldi	r24, 0x43	; 67
     fc6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     fca:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     fcc:	10 92 fd 01 	sts	0x01FD, r1
     fd0:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	90 93 f4 01 	sts	0x01F4, r25
     fdc:	80 93 f3 01 	sts	0x01F3, r24
     fe0:	08 95       	ret
            break;
        case 123: play_note('G', 0, 3, 4);
            break;
        case 124: play_rest(4);
            break;
        case 125: play_note('C', 0, 4, 2);
     fe2:	22 e0       	ldi	r18, 0x02	; 2
     fe4:	44 e0       	ldi	r20, 0x04	; 4
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	83 e4       	ldi	r24, 0x43	; 67
     fea:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     fee:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     ff0:	10 92 fd 01 	sts	0x01FD, r1
     ff4:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
     ff8:	84 e0       	ldi	r24, 0x04	; 4
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	90 93 f4 01 	sts	0x01F4, r25
    1000:	80 93 f3 01 	sts	0x01F3, r24
    1004:	08 95       	ret
            break;
        case 121: play_rest(2);
            break;
        case 122: play_note('A', 0, 3, 2);
            break;
        case 123: play_note('G', 0, 3, 4);
    1006:	24 e0       	ldi	r18, 0x04	; 4
    1008:	43 e0       	ldi	r20, 0x03	; 3
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	87 e4       	ldi	r24, 0x47	; 71
    100e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 120: play_note('C', 0, 4, 2);
            break;
        case 121: play_rest(2);
            break;
        case 122: play_note('A', 0, 3, 2);
    1012:	22 e0       	ldi	r18, 0x02	; 2
    1014:	43 e0       	ldi	r20, 0x03	; 3
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	81 e4       	ldi	r24, 0x41	; 65
    101a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    101e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1020:	10 92 fd 01 	sts	0x01FD, r1
    1024:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	90 93 f4 01 	sts	0x01F4, r25
    1030:	80 93 f3 01 	sts	0x01F3, r24
    1034:	08 95       	ret
            break;
        case 118: play_note('D', 0, 4, 4);
            break;
        case 119: play_note('E', 0, 4, 2);
            break;
        case 120: play_note('C', 0, 4, 2);
    1036:	22 e0       	ldi	r18, 0x02	; 2
    1038:	44 e0       	ldi	r20, 0x04	; 4
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	83 e4       	ldi	r24, 0x43	; 67
    103e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 117: play_note('C', 0, 4, 2);
            break;
        case 118: play_note('D', 0, 4, 4);
            break;
        case 119: play_note('E', 0, 4, 2);
    1042:	22 e0       	ldi	r18, 0x02	; 2
    1044:	44 e0       	ldi	r20, 0x04	; 4
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	85 e4       	ldi	r24, 0x45	; 69
    104a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 116: play_rest(2);
            break;
        case 117: play_note('C', 0, 4, 2);
            break;
        case 118: play_note('D', 0, 4, 4);
    104e:	24 e0       	ldi	r18, 0x04	; 4
    1050:	44 e0       	ldi	r20, 0x04	; 4
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	84 e4       	ldi	r24, 0x44	; 68
    1056:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 115: play_note('C', 0, 4, 2);
            break;
        case 116: play_rest(2);
            break;
        case 117: play_note('C', 0, 4, 2);
    105a:	22 e0       	ldi	r18, 0x02	; 2
    105c:	44 e0       	ldi	r20, 0x04	; 4
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	83 e4       	ldi	r24, 0x43	; 67
    1062:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1066:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1068:	10 92 fd 01 	sts	0x01FD, r1
    106c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	90 93 f4 01 	sts	0x01F4, r25
    1078:	80 93 f3 01 	sts	0x01F3, r24
    107c:	08 95       	ret
            break;
        case 113: play_note('C', 0, 4, 2);
            break;
        case 114: play_rest(2);
            break;
        case 115: play_note('C', 0, 4, 2);
    107e:	22 e0       	ldi	r18, 0x02	; 2
    1080:	44 e0       	ldi	r20, 0x04	; 4
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	83 e4       	ldi	r24, 0x43	; 67
    1086:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    108a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    108c:	10 92 fd 01 	sts	0x01FD, r1
    1090:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	90 93 f4 01 	sts	0x01F4, r25
    109c:	80 93 f3 01 	sts	0x01F3, r24
    10a0:	08 95       	ret
            break;
        case 111: play_note('C', 0, 4, 2);
            break;
        case 112: play_rest(1);
            break;
        case 113: play_note('C', 0, 4, 2);
    10a2:	22 e0       	ldi	r18, 0x02	; 2
    10a4:	44 e0       	ldi	r20, 0x04	; 4
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	83 e4       	ldi	r24, 0x43	; 67
    10aa:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    10ae:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    10b0:	10 92 fd 01 	sts	0x01FD, r1
    10b4:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	90 93 f4 01 	sts	0x01F4, r25
    10c0:	80 93 f3 01 	sts	0x01F3, r24
    10c4:	08 95       	ret
            break;
        case 109: play_note('C', 0, 4, 4);
            break;
        case 110: play_rest(10);
            break;
        case 111: play_note('C', 0, 4, 2);
    10c6:	22 e0       	ldi	r18, 0x02	; 2
    10c8:	44 e0       	ldi	r20, 0x04	; 4
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	83 e4       	ldi	r24, 0x43	; 67
    10ce:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    10d2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    10d4:	10 92 fd 01 	sts	0x01FD, r1
    10d8:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    10dc:	8a e0       	ldi	r24, 0x0A	; 10
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	90 93 f4 01 	sts	0x01F4, r25
    10e4:	80 93 f3 01 	sts	0x01F3, r24
    10e8:	08 95       	ret
            break;
        case 107: play_note('D', 0, 4, 2);
            break;
        case 108: play_rest(4);
            break;
        case 109: play_note('C', 0, 4, 4);
    10ea:	24 e0       	ldi	r18, 0x04	; 4
    10ec:	44 e0       	ldi	r20, 0x04	; 4
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	83 e4       	ldi	r24, 0x43	; 67
    10f2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    10f6:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    10f8:	10 92 fd 01 	sts	0x01FD, r1
    10fc:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1100:	84 e0       	ldi	r24, 0x04	; 4
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	90 93 f4 01 	sts	0x01F4, r25
    1108:	80 93 f3 01 	sts	0x01F3, r24
    110c:	08 95       	ret
            break;
        case 105: play_note('E', 1, 4, 4);
            break;
        case 106: play_rest(2);
            break;
        case 107: play_note('D', 0, 4, 2);
    110e:	22 e0       	ldi	r18, 0x02	; 2
    1110:	44 e0       	ldi	r20, 0x04	; 4
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	84 e4       	ldi	r24, 0x44	; 68
    1116:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    111a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    111c:	10 92 fd 01 	sts	0x01FD, r1
    1120:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	90 93 f4 01 	sts	0x01F4, r25
    112c:	80 93 f3 01 	sts	0x01F3, r24
    1130:	08 95       	ret
            break;
        case 103: play_note('D', 0, 4, 2);
            break;
        case 104: play_rest(4);
            break;
        case 105: play_note('E', 1, 4, 4);
    1132:	24 e0       	ldi	r18, 0x04	; 4
    1134:	44 e0       	ldi	r20, 0x04	; 4
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	85 e4       	ldi	r24, 0x45	; 69
    113a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    113e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1140:	10 92 fd 01 	sts	0x01FD, r1
    1144:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	90 93 f4 01 	sts	0x01F4, r25
    1150:	80 93 f3 01 	sts	0x01F3, r24
    1154:	08 95       	ret
            break;
        case 101: play_note('A', 0, 3, 2);
            break;
        case 102: play_note('C', 0, 4, 2);
            break;
        case 103: play_note('D', 0, 4, 2);
    1156:	22 e0       	ldi	r18, 0x02	; 2
    1158:	44 e0       	ldi	r20, 0x04	; 4
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	84 e4       	ldi	r24, 0x44	; 68
    115e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 100: play_rest(2);
            break;
        case 101: play_note('A', 0, 3, 2);
            break;
        case 102: play_note('C', 0, 4, 2);
    1162:	22 e0       	ldi	r18, 0x02	; 2
    1164:	44 e0       	ldi	r20, 0x04	; 4
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	83 e4       	ldi	r24, 0x43	; 67
    116a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 99: play_note('C', 0, 4, 2);
            break;
        case 100: play_rest(2);
            break;
        case 101: play_note('A', 0, 3, 2);
    116e:	22 e0       	ldi	r18, 0x02	; 2
    1170:	43 e0       	ldi	r20, 0x03	; 3
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	81 e4       	ldi	r24, 0x41	; 65
    1176:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    117a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    117c:	10 92 fd 01 	sts	0x01FD, r1
    1180:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	90 93 f4 01 	sts	0x01F4, r25
    118c:	80 93 f3 01 	sts	0x01F3, r24
    1190:	08 95       	ret
            break;
        case 97: play_note('A', 1, 3, 2);
            break;
        case 98: play_note('A', 0, 3, 2);
            break;
        case 99: play_note('C', 0, 4, 2);
    1192:	22 e0       	ldi	r18, 0x02	; 2
    1194:	44 e0       	ldi	r20, 0x04	; 4
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	83 e4       	ldi	r24, 0x43	; 67
    119a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 96: play_rest(2);
            break;
        case 97: play_note('A', 1, 3, 2);
            break;
        case 98: play_note('A', 0, 3, 2);
    119e:	22 e0       	ldi	r18, 0x02	; 2
    11a0:	43 e0       	ldi	r20, 0x03	; 3
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	81 e4       	ldi	r24, 0x41	; 65
    11a6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 95: play_note('E', 0, 4, 2);
            break;
        case 96: play_rest(2);
            break;
        case 97: play_note('A', 1, 3, 2);
    11aa:	22 e0       	ldi	r18, 0x02	; 2
    11ac:	43 e0       	ldi	r20, 0x03	; 3
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	81 e4       	ldi	r24, 0x41	; 65
    11b2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    11b6:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    11b8:	10 92 fd 01 	sts	0x01FD, r1
    11bc:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	90 93 f4 01 	sts	0x01F4, r25
    11c8:	80 93 f3 01 	sts	0x01F3, r24
    11cc:	08 95       	ret
            break;
        case 93: play_note('E', 1, 4, 2);
            break;
        case 94: play_rest(2);
            break;
        case 95: play_note('E', 0, 4, 2);
    11ce:	22 e0       	ldi	r18, 0x02	; 2
    11d0:	44 e0       	ldi	r20, 0x04	; 4
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	85 e4       	ldi	r24, 0x45	; 69
    11d6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    11da:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    11dc:	10 92 fd 01 	sts	0x01FD, r1
    11e0:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	90 93 f4 01 	sts	0x01F4, r25
    11ec:	80 93 f3 01 	sts	0x01F3, r24
    11f0:	08 95       	ret
            break;
        case 91: play_note('G', 1, 4, 2);
            break;
        case 92: play_note('F', 0, 4, 2);
            break;
        case 93: play_note('E', 1, 4, 2);
    11f2:	22 e0       	ldi	r18, 0x02	; 2
    11f4:	44 e0       	ldi	r20, 0x04	; 4
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	85 e4       	ldi	r24, 0x45	; 69
    11fa:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 90: play_note('G', 0, 4, 2);
            break;
        case 91: play_note('G', 1, 4, 2);
            break;
        case 92: play_note('F', 0, 4, 2);
    11fe:	22 e0       	ldi	r18, 0x02	; 2
    1200:	44 e0       	ldi	r20, 0x04	; 4
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	86 e4       	ldi	r24, 0x46	; 70
    1206:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 89: play_rest(8);
            break;
        case 90: play_note('G', 0, 4, 2);
            break;
        case 91: play_note('G', 1, 4, 2);
    120a:	22 e0       	ldi	r18, 0x02	; 2
    120c:	44 e0       	ldi	r20, 0x04	; 4
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	87 e4       	ldi	r24, 0x47	; 71
    1212:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 88: play_note('G', 0, 4, 4);
            break;
        case 89: play_rest(8);
            break;
        case 90: play_note('G', 0, 4, 2);
    1216:	22 e0       	ldi	r18, 0x02	; 2
    1218:	44 e0       	ldi	r20, 0x04	; 4
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	87 e4       	ldi	r24, 0x47	; 71
    121e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1222:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1224:	10 92 fd 01 	sts	0x01FD, r1
    1228:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    122c:	88 e0       	ldi	r24, 0x08	; 8
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	90 93 f4 01 	sts	0x01F4, r25
    1234:	80 93 f3 01 	sts	0x01F3, r24
    1238:	08 95       	ret
            break;
        case 86: play_note('G', 0, 4, 1);
            break;
        case 87: play_rest(1);
            break;
        case 88: play_note('G', 0, 4, 4);
    123a:	24 e0       	ldi	r18, 0x04	; 4
    123c:	44 e0       	ldi	r20, 0x04	; 4
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	87 e4       	ldi	r24, 0x47	; 71
    1242:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1246:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1248:	10 92 fd 01 	sts	0x01FD, r1
    124c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	90 93 f4 01 	sts	0x01F4, r25
    1258:	80 93 f3 01 	sts	0x01F3, r24
    125c:	08 95       	ret
            break;
        case 84: play_note('G', 0, 4, 2);
            break;
        case 85: play_rest(2);
            break;
        case 86: play_note('G', 0, 4, 1);
    125e:	21 e0       	ldi	r18, 0x01	; 1
    1260:	44 e0       	ldi	r20, 0x04	; 4
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	87 e4       	ldi	r24, 0x47	; 71
    1266:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    126a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    126c:	10 92 fd 01 	sts	0x01FD, r1
    1270:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	90 93 f4 01 	sts	0x01F4, r25
    127c:	80 93 f3 01 	sts	0x01F3, r24
    1280:	08 95       	ret
            break;
        case 82: play_note('E', 0, 3, 2);
            break;
        case 83: play_rest(2);
            break;
        case 84: play_note('G', 0, 4, 2);
    1282:	22 e0       	ldi	r18, 0x02	; 2
    1284:	44 e0       	ldi	r20, 0x04	; 4
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	87 e4       	ldi	r24, 0x47	; 71
    128a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    128e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1290:	10 92 fd 01 	sts	0x01FD, r1
    1294:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	90 93 f4 01 	sts	0x01F4, r25
    12a0:	80 93 f3 01 	sts	0x01F3, r24
    12a4:	08 95       	ret
            break;
        case 80: play_note('E', 1, 3, 2);
            break;
        case 81: play_rest(2);
            break;
        case 82: play_note('E', 0, 3, 2);
    12a6:	22 e0       	ldi	r18, 0x02	; 2
    12a8:	43 e0       	ldi	r20, 0x03	; 3
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	85 e4       	ldi	r24, 0x45	; 69
    12ae:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    12b2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    12b4:	10 92 fd 01 	sts	0x01FD, r1
    12b8:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	90 93 f4 01 	sts	0x01F4, r25
    12c4:	80 93 f3 01 	sts	0x01F3, r24
    12c8:	08 95       	ret
            break;
        case 78: play_note('G', 1, 3, 2);
            break;
        case 79: play_note('F', 0, 3, 2);
            break;
        case 80: play_note('E', 1, 3, 2);
    12ca:	22 e0       	ldi	r18, 0x02	; 2
    12cc:	43 e0       	ldi	r20, 0x03	; 3
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	85 e4       	ldi	r24, 0x45	; 69
    12d2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 77: play_note('G', 0, 3, 2);
            break;
        case 78: play_note('G', 1, 3, 2);
            break;
        case 79: play_note('F', 0, 3, 2);
    12d6:	22 e0       	ldi	r18, 0x02	; 2
    12d8:	43 e0       	ldi	r20, 0x03	; 3
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	86 e4       	ldi	r24, 0x46	; 70
    12de:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 76: play_rest(4);
            break;
        case 77: play_note('G', 0, 3, 2);
            break;
        case 78: play_note('G', 1, 3, 2);
    12e2:	22 e0       	ldi	r18, 0x02	; 2
    12e4:	43 e0       	ldi	r20, 0x03	; 3
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	87 e4       	ldi	r24, 0x47	; 71
    12ea:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 75: play_note('D', 0, 4, 2);
            break;
        case 76: play_rest(4);
            break;
        case 77: play_note('G', 0, 3, 2);
    12ee:	22 e0       	ldi	r18, 0x02	; 2
    12f0:	43 e0       	ldi	r20, 0x03	; 3
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	87 e4       	ldi	r24, 0x47	; 71
    12f6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    12fa:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    12fc:	10 92 fd 01 	sts	0x01FD, r1
    1300:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	90 93 f4 01 	sts	0x01F4, r25
    130c:	80 93 f3 01 	sts	0x01F3, r24
    1310:	08 95       	ret
            break;
        case 73: play_note('A', 0, 3, 2);
            break;
        case 74: play_note('C', 0, 4, 2);
            break;
        case 75: play_note('D', 0, 4, 2);
    1312:	22 e0       	ldi	r18, 0x02	; 2
    1314:	44 e0       	ldi	r20, 0x04	; 4
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	84 e4       	ldi	r24, 0x44	; 68
    131a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 72: play_rest(2);
            break;
        case 73: play_note('A', 0, 3, 2);
            break;
        case 74: play_note('C', 0, 4, 2);
    131e:	22 e0       	ldi	r18, 0x02	; 2
    1320:	44 e0       	ldi	r20, 0x04	; 4
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	83 e4       	ldi	r24, 0x43	; 67
    1326:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 71: play_note('C', 0, 4, 2);
            break;
        case 72: play_rest(2);
            break;
        case 73: play_note('A', 0, 3, 2);
    132a:	22 e0       	ldi	r18, 0x02	; 2
    132c:	43 e0       	ldi	r20, 0x03	; 3
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	81 e4       	ldi	r24, 0x41	; 65
    1332:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1336:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1338:	10 92 fd 01 	sts	0x01FD, r1
    133c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	90 93 f4 01 	sts	0x01F4, r25
    1348:	80 93 f3 01 	sts	0x01F3, r24
    134c:	08 95       	ret
            break;
        case 69: play_note('A', 1, 3, 2);
            break;
        case 70: play_note('A', 0, 3, 2);
            break;
        case 71: play_note('C', 0, 4, 2);
    134e:	22 e0       	ldi	r18, 0x02	; 2
    1350:	44 e0       	ldi	r20, 0x04	; 4
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	83 e4       	ldi	r24, 0x43	; 67
    1356:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 68: play_rest(2);
            break;
        case 69: play_note('A', 1, 3, 2);
            break;
        case 70: play_note('A', 0, 3, 2);
    135a:	22 e0       	ldi	r18, 0x02	; 2
    135c:	43 e0       	ldi	r20, 0x03	; 3
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	81 e4       	ldi	r24, 0x41	; 65
    1362:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 67: play_note('E', 0, 4, 2);
            break;
        case 68: play_rest(2);
            break;
        case 69: play_note('A', 1, 3, 2);
    1366:	22 e0       	ldi	r18, 0x02	; 2
    1368:	43 e0       	ldi	r20, 0x03	; 3
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	81 e4       	ldi	r24, 0x41	; 65
    136e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1372:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1374:	10 92 fd 01 	sts	0x01FD, r1
    1378:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	90 93 f4 01 	sts	0x01F4, r25
    1384:	80 93 f3 01 	sts	0x01F3, r24
    1388:	08 95       	ret
            break;
        case 65: play_note('E', 1, 4, 2);
            break;
        case 66: play_rest(2);
            break;
        case 67: play_note('E', 0, 4, 2);
    138a:	22 e0       	ldi	r18, 0x02	; 2
    138c:	44 e0       	ldi	r20, 0x04	; 4
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	85 e4       	ldi	r24, 0x45	; 69
    1392:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1396:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1398:	10 92 fd 01 	sts	0x01FD, r1
    139c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	90 93 f4 01 	sts	0x01F4, r25
    13a8:	80 93 f3 01 	sts	0x01F3, r24
    13ac:	08 95       	ret
            break;
        case 63: play_note('G', 1, 4, 2);
            break;
        case 64: play_note('F', 0, 4, 2);
            break;
        case 65: play_note('E', 1, 4, 2);
    13ae:	22 e0       	ldi	r18, 0x02	; 2
    13b0:	44 e0       	ldi	r20, 0x04	; 4
    13b2:	61 e0       	ldi	r22, 0x01	; 1
    13b4:	85 e4       	ldi	r24, 0x45	; 69
    13b6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 62: play_note('G', 0, 4, 2);
            break;
        case 63: play_note('G', 1, 4, 2);
            break;
        case 64: play_note('F', 0, 4, 2);
    13ba:	22 e0       	ldi	r18, 0x02	; 2
    13bc:	44 e0       	ldi	r20, 0x04	; 4
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	86 e4       	ldi	r24, 0x46	; 70
    13c2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 61: play_rest(8);
            break;
        case 62: play_note('G', 0, 4, 2);
            break;
        case 63: play_note('G', 1, 4, 2);
    13c6:	22 e0       	ldi	r18, 0x02	; 2
    13c8:	44 e0       	ldi	r20, 0x04	; 4
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	87 e4       	ldi	r24, 0x47	; 71
    13ce:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 60: play_note('B', 0, 3, 2);
            break;
        case 61: play_rest(8);
            break;
        case 62: play_note('G', 0, 4, 2);
    13d2:	22 e0       	ldi	r18, 0x02	; 2
    13d4:	44 e0       	ldi	r20, 0x04	; 4
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	87 e4       	ldi	r24, 0x47	; 71
    13da:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    13de:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    13e0:	10 92 fd 01 	sts	0x01FD, r1
    13e4:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    13e8:	88 e0       	ldi	r24, 0x08	; 8
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	90 93 f4 01 	sts	0x01F4, r25
    13f0:	80 93 f3 01 	sts	0x01F3, r24
    13f4:	08 95       	ret
            break;
        case 58: play_note('C', 0, 4, 2);
            break;
        case 59: play_note('D', 0, 4, 2);
            break;
        case 60: play_note('B', 0, 3, 2);
    13f6:	22 e0       	ldi	r18, 0x02	; 2
    13f8:	43 e0       	ldi	r20, 0x03	; 3
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	82 e4       	ldi	r24, 0x42	; 66
    13fe:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 57: play_rest(2);
            break;
        case 58: play_note('C', 0, 4, 2);
            break;
        case 59: play_note('D', 0, 4, 2);
    1402:	22 e0       	ldi	r18, 0x02	; 2
    1404:	44 e0       	ldi	r20, 0x04	; 4
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	84 e4       	ldi	r24, 0x44	; 68
    140a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 56: play_note('E', 0, 4, 2);
            break;
        case 57: play_rest(2);
            break;
        case 58: play_note('C', 0, 4, 2);
    140e:	22 e0       	ldi	r18, 0x02	; 2
    1410:	44 e0       	ldi	r20, 0x04	; 4
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	83 e4       	ldi	r24, 0x43	; 67
    1416:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    141a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    141c:	10 92 fd 01 	sts	0x01FD, r1
    1420:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	90 93 f4 01 	sts	0x01F4, r25
    142c:	80 93 f3 01 	sts	0x01F3, r24
    1430:	08 95       	ret
            break;
        case 54: play_note('G', 0, 4, 2);
            break;
        case 55: play_rest(2);
            break;
        case 56: play_note('E', 0, 4, 2);
    1432:	22 e0       	ldi	r18, 0x02	; 2
    1434:	44 e0       	ldi	r20, 0x04	; 4
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	85 e4       	ldi	r24, 0x45	; 69
    143a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    143e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1440:	10 92 fd 01 	sts	0x01FD, r1
    1444:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	90 93 f4 01 	sts	0x01F4, r25
    1450:	80 93 f3 01 	sts	0x01F3, r24
    1454:	08 95       	ret
            break;
        case 52: play_note('A', 0, 4, 4);
            break;
        case 53: play_note('F', 0, 4, 2);
            break;
        case 54: play_note('G', 0, 4, 2);
    1456:	22 e0       	ldi	r18, 0x02	; 2
    1458:	44 e0       	ldi	r20, 0x04	; 4
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	87 e4       	ldi	r24, 0x47	; 71
    145e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 51: play_note('G', 0, 4, 2);
            break;
        case 52: play_note('A', 0, 4, 4);
            break;
        case 53: play_note('F', 0, 4, 2);
    1462:	22 e0       	ldi	r18, 0x02	; 2
    1464:	44 e0       	ldi	r20, 0x04	; 4
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	86 e4       	ldi	r24, 0x46	; 70
    146a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 50: play_rest(1);
            break;
        case 51: play_note('G', 0, 4, 2);
            break;
        case 52: play_note('A', 0, 4, 4);
    146e:	24 e0       	ldi	r18, 0x04	; 4
    1470:	44 e0       	ldi	r20, 0x04	; 4
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	81 e4       	ldi	r24, 0x41	; 65
    1476:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 49: play_note('E', 0, 4, 2);
            break;
        case 50: play_rest(1);
            break;
        case 51: play_note('G', 0, 4, 2);
    147a:	22 e0       	ldi	r18, 0x02	; 2
    147c:	44 e0       	ldi	r20, 0x04	; 4
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	87 e4       	ldi	r24, 0x47	; 71
    1482:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1486:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1488:	10 92 fd 01 	sts	0x01FD, r1
    148c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	90 93 f4 01 	sts	0x01F4, r25
    1498:	80 93 f3 01 	sts	0x01F3, r24
    149c:	08 95       	ret
            break;
        case 47: play_note('A', 0, 3, 4); //phrase
            break;
        case 48: play_note('G' , 0, 3, 3);
            break;
        case 49: play_note('E', 0, 4, 2);
    149e:	22 e0       	ldi	r18, 0x02	; 2
    14a0:	44 e0       	ldi	r20, 0x04	; 4
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	85 e4       	ldi	r24, 0x45	; 69
    14a6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 46: play_note('B', 1, 3, 2);
            break;
        case 47: play_note('A', 0, 3, 4); //phrase
            break;
        case 48: play_note('G' , 0, 3, 3);
    14aa:	23 e0       	ldi	r18, 0x03	; 3
    14ac:	43 e0       	ldi	r20, 0x03	; 3
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	87 e4       	ldi	r24, 0x47	; 71
    14b2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 45: play_rest(2);
            break;
        case 46: play_note('B', 1, 3, 2);
            break;
        case 47: play_note('A', 0, 3, 4); //phrase
    14b6:	24 e0       	ldi	r18, 0x04	; 4
    14b8:	43 e0       	ldi	r20, 0x03	; 3
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	81 e4       	ldi	r24, 0x41	; 65
    14be:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 44: play_note('B', 0, 3, 2);
            break;
        case 45: play_rest(2);
            break;
        case 46: play_note('B', 1, 3, 2);
    14c2:	22 e0       	ldi	r18, 0x02	; 2
    14c4:	43 e0       	ldi	r20, 0x03	; 3
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	82 e4       	ldi	r24, 0x42	; 66
    14ca:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    14ce:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    14d0:	10 92 fd 01 	sts	0x01FD, r1
    14d4:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	90 93 f4 01 	sts	0x01F4, r25
    14e0:	80 93 f3 01 	sts	0x01F3, r24
    14e4:	08 95       	ret
            break;
        case 42: play_note('A', 0, 3, 2);
            break;
        case 43: play_rest(2);
            break;
        case 44: play_note('B', 0, 3, 2);
    14e6:	22 e0       	ldi	r18, 0x02	; 2
    14e8:	43 e0       	ldi	r20, 0x03	; 3
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	82 e4       	ldi	r24, 0x42	; 66
    14ee:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    14f2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    14f4:	10 92 fd 01 	sts	0x01FD, r1
    14f8:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	90 93 f4 01 	sts	0x01F4, r25
    1504:	80 93 f3 01 	sts	0x01F3, r24
    1508:	08 95       	ret
            break;
        case 40: play_note('E', 0, 3, 4);
            break;
        case 41: play_rest(2);
            break;
        case 42: play_note('A', 0, 3, 2);
    150a:	22 e0       	ldi	r18, 0x02	; 2
    150c:	43 e0       	ldi	r20, 0x03	; 3
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	81 e4       	ldi	r24, 0x41	; 65
    1512:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1516:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1518:	10 92 fd 01 	sts	0x01FD, r1
    151c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	90 93 f4 01 	sts	0x01F4, r25
    1528:	80 93 f3 01 	sts	0x01F3, r24
    152c:	08 95       	ret
            break;
        case 38: play_note('G', 0, 3, 2);
            break;
        case 39: play_rest(3);
            break;
        case 40: play_note('E', 0, 3, 4);
    152e:	24 e0       	ldi	r18, 0x04	; 4
    1530:	43 e0       	ldi	r20, 0x03	; 3
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	85 e4       	ldi	r24, 0x45	; 69
    1536:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    153a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    153c:	10 92 fd 01 	sts	0x01FD, r1
    1540:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1544:	83 e0       	ldi	r24, 0x03	; 3
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	90 93 f4 01 	sts	0x01F4, r25
    154c:	80 93 f3 01 	sts	0x01F3, r24
    1550:	08 95       	ret
            break;
        case 36: play_note('C', 0, 4, 5);
            break;
        case 37: play_rest(2);
            break;
        case 38: play_note('G', 0, 3, 2);
    1552:	22 e0       	ldi	r18, 0x02	; 2
    1554:	43 e0       	ldi	r20, 0x03	; 3
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	87 e4       	ldi	r24, 0x47	; 71
    155a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    155e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1560:	10 92 fd 01 	sts	0x01FD, r1
    1564:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	90 93 f4 01 	sts	0x01F4, r25
    1570:	80 93 f3 01 	sts	0x01F3, r24
    1574:	08 95       	ret
            break;
        case 34: play_note('B', 0, 3, 2);
            break;
        case 35: play_rest(4);
            break;
        case 36: play_note('C', 0, 4, 5);
    1576:	25 e0       	ldi	r18, 0x05	; 5
    1578:	44 e0       	ldi	r20, 0x04	; 4
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	83 e4       	ldi	r24, 0x43	; 67
    157e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1582:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1584:	10 92 fd 01 	sts	0x01FD, r1
    1588:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    158c:	84 e0       	ldi	r24, 0x04	; 4
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	90 93 f4 01 	sts	0x01F4, r25
    1594:	80 93 f3 01 	sts	0x01F3, r24
    1598:	08 95       	ret
            break;
        case 32: play_note('C', 0, 4, 2);
            break;
        case 33: play_note('D', 0, 4, 2);
            break;
        case 34: play_note('B', 0, 3, 2);
    159a:	22 e0       	ldi	r18, 0x02	; 2
    159c:	43 e0       	ldi	r20, 0x03	; 3
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	82 e4       	ldi	r24, 0x42	; 66
    15a2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 31: play_rest(2);
            break;
        case 32: play_note('C', 0, 4, 2);
            break;
        case 33: play_note('D', 0, 4, 2);
    15a6:	22 e0       	ldi	r18, 0x02	; 2
    15a8:	44 e0       	ldi	r20, 0x04	; 4
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	84 e4       	ldi	r24, 0x44	; 68
    15ae:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 30: play_note('E', 0, 4, 2);
            break;
        case 31: play_rest(2);
            break;
        case 32: play_note('C', 0, 4, 2);
    15b2:	22 e0       	ldi	r18, 0x02	; 2
    15b4:	44 e0       	ldi	r20, 0x04	; 4
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	83 e4       	ldi	r24, 0x43	; 67
    15ba:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    15be:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    15c0:	10 92 fd 01 	sts	0x01FD, r1
    15c4:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	90 93 f4 01 	sts	0x01F4, r25
    15d0:	80 93 f3 01 	sts	0x01F3, r24
    15d4:	08 95       	ret
            break;
        case 28: play_note('G', 0, 4, 2);
            break;
        case 29: play_rest(2);
            break;
        case 30: play_note('E', 0, 4, 2);
    15d6:	22 e0       	ldi	r18, 0x02	; 2
    15d8:	44 e0       	ldi	r20, 0x04	; 4
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	85 e4       	ldi	r24, 0x45	; 69
    15de:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    15e2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    15e4:	10 92 fd 01 	sts	0x01FD, r1
    15e8:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    15ec:	82 e0       	ldi	r24, 0x02	; 2
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	90 93 f4 01 	sts	0x01F4, r25
    15f4:	80 93 f3 01 	sts	0x01F3, r24
    15f8:	08 95       	ret
            break;
        case 26: play_note('A', 0, 4, 4);
            break;
        case 27: play_note('F', 0, 4, 2);
            break;
        case 28: play_note('G', 0, 4, 2);
    15fa:	22 e0       	ldi	r18, 0x02	; 2
    15fc:	44 e0       	ldi	r20, 0x04	; 4
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	87 e4       	ldi	r24, 0x47	; 71
    1602:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 25: play_note('G', 0, 4, 2);
            break;
        case 26: play_note('A', 0, 4, 4);
            break;
        case 27: play_note('F', 0, 4, 2);
    1606:	22 e0       	ldi	r18, 0x02	; 2
    1608:	44 e0       	ldi	r20, 0x04	; 4
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	86 e4       	ldi	r24, 0x46	; 70
    160e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 24: play_rest(1);
            break;
        case 25: play_note('G', 0, 4, 2);
            break;
        case 26: play_note('A', 0, 4, 4);
    1612:	24 e0       	ldi	r18, 0x04	; 4
    1614:	44 e0       	ldi	r20, 0x04	; 4
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	81 e4       	ldi	r24, 0x41	; 65
    161a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 23: play_note('E', 0, 4, 2);
            break;
        case 24: play_rest(1);
            break;
        case 25: play_note('G', 0, 4, 2);
    161e:	22 e0       	ldi	r18, 0x02	; 2
    1620:	44 e0       	ldi	r20, 0x04	; 4
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	87 e4       	ldi	r24, 0x47	; 71
    1626:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    162a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    162c:	10 92 fd 01 	sts	0x01FD, r1
    1630:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	90 93 f4 01 	sts	0x01F4, r25
    163c:	80 93 f3 01 	sts	0x01F3, r24
    1640:	08 95       	ret
            break;
        case 21: play_note('A', 0, 3, 4);
            break;
        case 22: play_note('G' , 0, 3, 3);
            break;
        case 23: play_note('E', 0, 4, 2);
    1642:	22 e0       	ldi	r18, 0x02	; 2
    1644:	44 e0       	ldi	r20, 0x04	; 4
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	85 e4       	ldi	r24, 0x45	; 69
    164a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 20: play_note('B', 1, 3, 2);
            break;
        case 21: play_note('A', 0, 3, 4);
            break;
        case 22: play_note('G' , 0, 3, 3);
    164e:	23 e0       	ldi	r18, 0x03	; 3
    1650:	43 e0       	ldi	r20, 0x03	; 3
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	87 e4       	ldi	r24, 0x47	; 71
    1656:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 19: play_rest(2);
            break;
        case 20: play_note('B', 1, 3, 2);
            break;
        case 21: play_note('A', 0, 3, 4);
    165a:	24 e0       	ldi	r18, 0x04	; 4
    165c:	43 e0       	ldi	r20, 0x03	; 3
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	81 e4       	ldi	r24, 0x41	; 65
    1662:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 18: play_note('B', 0, 3, 2);
            break;
        case 19: play_rest(2);
            break;
        case 20: play_note('B', 1, 3, 2);
    1666:	22 e0       	ldi	r18, 0x02	; 2
    1668:	43 e0       	ldi	r20, 0x03	; 3
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	82 e4       	ldi	r24, 0x42	; 66
    166e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1672:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1674:	10 92 fd 01 	sts	0x01FD, r1
    1678:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	90 93 f4 01 	sts	0x01F4, r25
    1684:	80 93 f3 01 	sts	0x01F3, r24
    1688:	08 95       	ret
            break;
        case 16: play_note('A', 0, 3, 2);
            break;
        case 17: play_rest(2);
            break;
        case 18: play_note('B', 0, 3, 2);
    168a:	22 e0       	ldi	r18, 0x02	; 2
    168c:	43 e0       	ldi	r20, 0x03	; 3
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	82 e4       	ldi	r24, 0x42	; 66
    1692:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1696:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1698:	10 92 fd 01 	sts	0x01FD, r1
    169c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	90 93 f4 01 	sts	0x01F4, r25
    16a8:	80 93 f3 01 	sts	0x01F3, r24
    16ac:	08 95       	ret
            break;
        case 14: play_note('E', 0, 3, 4);
            break;
        case 15: play_rest(2);
            break;
        case 16: play_note('A', 0, 3, 2);
    16ae:	22 e0       	ldi	r18, 0x02	; 2
    16b0:	43 e0       	ldi	r20, 0x03	; 3
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	81 e4       	ldi	r24, 0x41	; 65
    16b6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    16ba:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    16bc:	10 92 fd 01 	sts	0x01FD, r1
    16c0:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	90 93 f4 01 	sts	0x01F4, r25
    16cc:	80 93 f3 01 	sts	0x01F3, r24
    16d0:	08 95       	ret
            break;
        case 12: play_note('G', 0, 3, 2);
            break;
        case 13: play_rest(4);
            break;
        case 14: play_note('E', 0, 3, 4);
    16d2:	24 e0       	ldi	r18, 0x04	; 4
    16d4:	43 e0       	ldi	r20, 0x03	; 3
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	85 e4       	ldi	r24, 0x45	; 69
    16da:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    16de:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    16e0:	10 92 fd 01 	sts	0x01FD, r1
    16e4:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    16e8:	84 e0       	ldi	r24, 0x04	; 4
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	90 93 f4 01 	sts	0x01F4, r25
    16f0:	80 93 f3 01 	sts	0x01F3, r24
    16f4:	08 95       	ret
            break;
        case 10: play_rest(8);
            break;
        case 11: play_note('C', 0, 4, 5);
            break;
        case 12: play_note('G', 0, 3, 2);
    16f6:	22 e0       	ldi	r18, 0x02	; 2
    16f8:	43 e0       	ldi	r20, 0x03	; 3
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	87 e4       	ldi	r24, 0x47	; 71
    16fe:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 9: play_note('G', 0, 2, 8);
            break;
        case 10: play_rest(8);
            break;
        case 11: play_note('C', 0, 4, 5);
    1702:	25 e0       	ldi	r18, 0x05	; 5
    1704:	44 e0       	ldi	r20, 0x04	; 4
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	83 e4       	ldi	r24, 0x43	; 67
    170a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    170e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1710:	10 92 fd 01 	sts	0x01FD, r1
    1714:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1718:	88 e0       	ldi	r24, 0x08	; 8
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	90 93 f4 01 	sts	0x01F4, r25
    1720:	80 93 f3 01 	sts	0x01F3, r24
    1724:	08 95       	ret
            break;
        case 7: play_note('E', 0, 4, 4);
            break;
        case 8: play_note('G', 0, 4, 8);
            break;
        case 9: play_note('G', 0, 2, 8);
    1726:	28 e0       	ldi	r18, 0x08	; 8
    1728:	42 e0       	ldi	r20, 0x02	; 2
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	87 e4       	ldi	r24, 0x47	; 71
    172e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 6: play_note('C', 0, 4, 2);
            break;
        case 7: play_note('E', 0, 4, 4);
            break;
        case 8: play_note('G', 0, 4, 8);
    1732:	28 e0       	ldi	r18, 0x08	; 8
    1734:	44 e0       	ldi	r20, 0x04	; 4
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	87 e4       	ldi	r24, 0x47	; 71
    173a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 5: play_rest(2);
            break;
        case 6: play_note('C', 0, 4, 2);
            break;
        case 7: play_note('E', 0, 4, 4);
    173e:	24 e0       	ldi	r18, 0x04	; 4
    1740:	44 e0       	ldi	r20, 0x04	; 4
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	85 e4       	ldi	r24, 0x45	; 69
    1746:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 4: play_note('E', 0, 4, 2);
            break;
        case 5: play_rest(2);
            break;
        case 6: play_note('C', 0, 4, 2);
    174a:	22 e0       	ldi	r18, 0x02	; 2
    174c:	44 e0       	ldi	r20, 0x04	; 4
    174e:	60 e0       	ldi	r22, 0x00	; 0
    1750:	83 e4       	ldi	r24, 0x43	; 67
    1752:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1756:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1758:	10 92 fd 01 	sts	0x01FD, r1
    175c:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	90 93 f4 01 	sts	0x01F4, r25
    1768:	80 93 f3 01 	sts	0x01F3, r24
    176c:	08 95       	ret
            break;
        case 2: play_note('E', 0, 4, 3);
            break;
        case 3: play_rest(1);
            break;
        case 4: play_note('E', 0, 4, 2);
    176e:	22 e0       	ldi	r18, 0x02	; 2
    1770:	44 e0       	ldi	r20, 0x04	; 4
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	85 e4       	ldi	r24, 0x45	; 69
    1776:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    177a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    177c:	10 92 fd 01 	sts	0x01FD, r1
    1780:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	90 93 f4 01 	sts	0x01F4, r25
    178c:	80 93 f3 01 	sts	0x01F3, r24
    1790:	08 95       	ret
    switch (note) {
        case 0: play_note('E', 0, 4, 1);
            break;
        case 1: play_rest(1);
            break;
        case 2: play_note('E', 0, 4, 3);
    1792:	23 e0       	ldi	r18, 0x03	; 3
    1794:	44 e0       	ldi	r20, 0x04	; 4
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	85 e4       	ldi	r24, 0x45	; 69
    179a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    179e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    17a0:	10 92 fd 01 	sts	0x01FD, r1
    17a4:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	90 93 f4 01 	sts	0x01F4, r25
    17b0:	80 93 f3 01 	sts	0x01F3, r24
    17b4:	08 95       	ret
    }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
    switch (note) {
        case 0: play_note('E', 0, 4, 1);
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	44 e0       	ldi	r20, 0x04	; 4
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	85 e4       	ldi	r24, 0x45	; 69
    17be:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    17c2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    17c4:	10 92 fd 01 	sts	0x01FD, r1
    17c8:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    17cc:	88 e0       	ldi	r24, 0x08	; 8
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	90 93 f4 01 	sts	0x01F4, r25
    17d4:	80 93 f3 01 	sts	0x01F3, r24
    17d8:	08 95       	ret

000017da <song3>:
            
    }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
    switch (note) {
    17da:	8f 31       	cpi	r24, 0x1F	; 31
    17dc:	91 05       	cpc	r25, r1
    17de:	20 f0       	brcs	.+8      	; 0x17e8 <song3+0xe>
            break;
        case 29: play_note('G', 1, 5, 8);
            break;
        case 30: play_note('E', 0, 5, 8);
            break;
        default: notes=-1;
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	80 93 e9 01 	sts	0x01E9, r24
    17e6:	08 95       	ret
            
    }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
    switch (note) {
    17e8:	fc 01       	movw	r30, r24
    17ea:	e8 55       	subi	r30, 0x58	; 88
    17ec:	fe 4f       	sbci	r31, 0xFE	; 254
    17ee:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    17f2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    17f4:	10 92 fd 01 	sts	0x01FD, r1
    17f8:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	90 93 f4 01 	sts	0x01F4, r25
    1804:	80 93 f3 01 	sts	0x01F3, r24
    1808:	08 95       	ret
            break;
        case 26: play_note('E', 0, 5, 3);
            break;
        case 27: play_rest(1); //rest 1
            break;
        case 28: play_note('E', 0, 5, 4);
    180a:	24 e0       	ldi	r18, 0x04	; 4
    180c:	45 e0       	ldi	r20, 0x05	; 5
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	85 e4       	ldi	r24, 0x45	; 69
    1812:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 2: play_note('E', 0, 4, 7);
            break;
        case 3: play_rest(1);
            break;
        case 4: play_note('E', 0, 4, 7);
    1816:	27 e0       	ldi	r18, 0x07	; 7
    1818:	44 e0       	ldi	r20, 0x04	; 4
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	85 e4       	ldi	r24, 0x45	; 69
    181e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 17: play_note('E', 1, 4, 7);
            break;
        case 18: play_rest(1);
            break;
        case 19: play_note('E', 1, 4, 7);
    1822:	27 e0       	ldi	r18, 0x07	; 7
    1824:	44 e0       	ldi	r20, 0x04	; 4
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	85 e4       	ldi	r24, 0x45	; 69
    182a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    182e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1830:	10 92 fd 01 	sts	0x01FD, r1
    1834:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = duration;
    1838:	85 e0       	ldi	r24, 0x05	; 5
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	90 93 f4 01 	sts	0x01F4, r25
    1840:	80 93 f3 01 	sts	0x01F3, r24
    1844:	08 95       	ret
            break;
        case 28: play_note('E', 0, 5, 4);
            break;
        case 29: play_note('G', 1, 5, 8);
            break;
        case 30: play_note('E', 0, 5, 8);
    1846:	28 e0       	ldi	r18, 0x08	; 8
    1848:	45 e0       	ldi	r20, 0x05	; 5
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	85 e4       	ldi	r24, 0x45	; 69
    184e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 21: play_note('E', 1, 4, 3);
            break;
        case 22: play_rest(1);
            break;
        case 23: play_note('E', 1, 4, 3);
    1852:	23 e0       	ldi	r18, 0x03	; 3
    1854:	44 e0       	ldi	r20, 0x04	; 4
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	85 e4       	ldi	r24, 0x45	; 69
    185a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 6: play_note('E', 0, 4, 3);
            break;
        case 7: play_rest(1);
            break;
        case 8: play_note('E', 0, 4, 3);
    185e:	23 e0       	ldi	r18, 0x03	; 3
    1860:	44 e0       	ldi	r20, 0x04	; 4
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	85 e4       	ldi	r24, 0x45	; 69
    1866:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 11: play_note('G', 1, 5, 4);
            break;
        case 12: play_note('E', 0, 5, 4);
            break;
        case 13: play_note('G', 0, 5, 8);
    186a:	28 e0       	ldi	r18, 0x08	; 8
    186c:	45 e0       	ldi	r20, 0x05	; 5
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	87 e4       	ldi	r24, 0x47	; 71
    1872:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 23: play_note('E', 1, 4, 3);
            break;
        case 24: play_rest(5);
            break;
        case 25: play_note('E', 1, 5, 4);
    1876:	24 e0       	ldi	r18, 0x04	; 4
    1878:	45 e0       	ldi	r20, 0x05	; 5
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	85 e4       	ldi	r24, 0x45	; 69
    187e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 26: play_note('E', 0, 5, 3);
    1882:	23 e0       	ldi	r18, 0x03	; 3
    1884:	45 e0       	ldi	r20, 0x05	; 5
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	85 e4       	ldi	r24, 0x45	; 69
    188a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 9: play_rest(5);
            break;
        case 10: play_note('E', 0, 5, 4);
            break;
        case 11: play_note('G', 1, 5, 4);
    188e:	24 e0       	ldi	r18, 0x04	; 4
    1890:	45 e0       	ldi	r20, 0x05	; 5
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	87 e4       	ldi	r24, 0x47	; 71
    1896:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>
            break;
        case 27: play_rest(1); //rest 1
            break;
        case 28: play_note('E', 0, 5, 4);
            break;
        case 29: play_note('G', 1, 5, 8);
    189a:	28 e0       	ldi	r18, 0x08	; 8
    189c:	45 e0       	ldi	r20, 0x05	; 5
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	87 e4       	ldi	r24, 0x47	; 71
    18a2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <play_note>

000018a6 <play_song>:
}//song3

void play_song(uint8_t song, uint8_t note) {
    //if you add a song, you'll have to add it to this
    //switch statement.
    switch (song) {
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	89 f0       	breq	.+34     	; 0x18cc <play_song+0x26>
    18aa:	60 f0       	brcs	.+24     	; 0x18c4 <play_song+0x1e>
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	31 f0       	breq	.+12     	; 0x18bc <play_song+0x16>
    18b0:	83 30       	cpi	r24, 0x03	; 3
    18b2:	41 f4       	brne	.+16     	; 0x18c4 <play_song+0x1e>
            break;
        case 1: song1(note); //tetris theme
            break;
        case 2: song2(note); //super mario bros
            break;
        case 3: song3(note);
    18b4:	86 2f       	mov	r24, r22
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <song3>
    switch (song) {
        case 0: song0(note); //beaver fight song
            break;
        case 1: song1(note); //tetris theme
            break;
        case 2: song2(note); //super mario bros
    18bc:	86 2f       	mov	r24, r22
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0c 94 31 07 	jmp	0xe62	; 0xe62 <song2>
            break;
        case 3: song3(note);
            break;
        default: song0(note); //defaults to beaver fight song
    18c4:	86 2f       	mov	r24, r22
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0c 94 69 05 	jmp	0xad2	; 0xad2 <song0>
    //if you add a song, you'll have to add it to this
    //switch statement.
    switch (song) {
        case 0: song0(note); //beaver fight song
            break;
        case 1: song1(note); //tetris theme
    18cc:	86 2f       	mov	r24, r22
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <song1>

000018d4 <music_off>:
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    18d4:	10 92 e9 01 	sts	0x01E9, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    18d8:	8e b5       	in	r24, 0x2e	; 46
    18da:	8c 7f       	andi	r24, 0xFC	; 252
    18dc:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    18de:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 93 df 01 	sts	0x01DF, r24
    18e6:	08 95       	ret

000018e8 <music_on>:
}

void music_on(void) {
    //this starts the alarm timer running
    notes=0;
    18e8:	10 92 e9 01 	sts	0x01E9, r1
    TCCR1B |= (1<<CS11)|(1<<CS10);
    18ec:	8e b5       	in	r24, 0x2e	; 46
    18ee:	83 60       	ori	r24, 0x03	; 3
    18f0:	8e bd       	out	0x2e, r24	; 46
    //unmutes the output
    PORTD &= unmute;
    18f2:	92 98       	cbi	0x12, 2	; 18
    //and starts the selected song
    play_song(song, notes);
    18f4:	60 91 e9 01 	lds	r22, 0x01E9
    18f8:	80 91 ed 01 	lds	r24, 0x01ED
    18fc:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <play_song>
    music_off_flag = 0;
    1900:	10 92 df 01 	sts	0x01DF, r1
    1904:	08 95       	ret

00001906 <music_init>:
}

// this can be considered a tcnt1_init, so if you run kellen_music, dont init tcnt1 in main file
void music_init(void) {
    //initially turned off (use music_on() to turn on)
    TIMSK |= (1<<OCIE1A);  //enable timer interrupt 1 on compare
    1906:	87 b7       	in	r24, 0x37	; 55
    1908:	80 61       	ori	r24, 0x10	; 16
    190a:	87 bf       	out	0x37, r24	; 55
    TCCR1A = 0x00;         //TCNT1, normal port operation
    190c:	1f bc       	out	0x2f, r1	; 47
    TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
    190e:	8e b5       	in	r24, 0x2e	; 46
    1910:	88 60       	ori	r24, 0x08	; 8
    1912:	8e bd       	out	0x2e, r24	; 46
    TCCR1C = 0x00;         //no forced compare
    1914:	10 92 7a 00 	sts	0x007A, r1
    OCR1A = 0x0031;        //(use to vary alarm frequency)
    1918:	81 e3       	ldi	r24, 0x31	; 49
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9b bd       	out	0x2b, r25	; 43
    191e:	8a bd       	out	0x2a, r24	; 42
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    1920:	10 92 e9 01 	sts	0x01E9, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    1924:	8e b5       	in	r24, 0x2e	; 46
    1926:	8c 7f       	andi	r24, 0xFC	; 252
    1928:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    192a:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	80 93 df 01 	sts	0x01DF, r24
    TCCR1A = 0x00;         //TCNT1, normal port operation
    TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
    TCCR1C = 0x00;         //no forced compare
    OCR1A = 0x0031;        //(use to vary alarm frequency)
    music_off();
    beat = 0;
    1932:	10 92 fd 01 	sts	0x01FD, r1
    1936:	10 92 fc 01 	sts	0x01FC, r1
    max_beat = 0;
    193a:	10 92 f4 01 	sts	0x01F4, r1
    193e:	10 92 f3 01 	sts	0x01F3, r1
    notes = 0;
    1942:	10 92 e9 01 	sts	0x01E9, r1
    song = 1 ;              //beaver fight song (or w/e song you want)
    1946:	80 93 ed 01 	sts	0x01ED, r24
    194a:	08 95       	ret

0000194c <__vector_12>:
/*********************************************************************/
/*                             TIMER1_COMPA                          */
/*Oscillates pin7, PORTD for alarm tone output                       */
/*********************************************************************/

ISR(TIMER1_COMPA_vect) {
    194c:	1f 92       	push	r1
    194e:	0f 92       	push	r0
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	0f 92       	push	r0
    1954:	11 24       	eor	r1, r1
    1956:	0b b6       	in	r0, 0x3b	; 59
    1958:	0f 92       	push	r0
    195a:	2f 93       	push	r18
    195c:	3f 93       	push	r19
    195e:	4f 93       	push	r20
    1960:	5f 93       	push	r21
    1962:	6f 93       	push	r22
    1964:	7f 93       	push	r23
    1966:	8f 93       	push	r24
    1968:	9f 93       	push	r25
    196a:	af 93       	push	r26
    196c:	bf 93       	push	r27
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
    PORTD ^= ALARM_PIN;      //flips the bit, creating a tone
    1972:	82 b3       	in	r24, 0x12	; 18
    1974:	80 58       	subi	r24, 0x80	; 128
    1976:	82 bb       	out	0x12, r24	; 18
    if(beat >= max_beat) {   //if we've played the note long enough
    1978:	20 91 fc 01 	lds	r18, 0x01FC
    197c:	30 91 fd 01 	lds	r19, 0x01FD
    1980:	80 91 f3 01 	lds	r24, 0x01F3
    1984:	90 91 f4 01 	lds	r25, 0x01F4
    1988:	28 17       	cp	r18, r24
    198a:	39 07       	cpc	r19, r25
    198c:	58 f0       	brcs	.+22     	; 0x19a4 <__vector_12+0x58>
        notes++;               //move on to the next note
    198e:	80 91 e9 01 	lds	r24, 0x01E9
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	80 93 e9 01 	sts	0x01E9, r24
        play_song(song, notes);//and play it
    1998:	60 91 e9 01 	lds	r22, 0x01E9
    199c:	80 91 ed 01 	lds	r24, 0x01ED
    19a0:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <play_song>
    }
    19a4:	ff 91       	pop	r31
    19a6:	ef 91       	pop	r30
    19a8:	bf 91       	pop	r27
    19aa:	af 91       	pop	r26
    19ac:	9f 91       	pop	r25
    19ae:	8f 91       	pop	r24
    19b0:	7f 91       	pop	r23
    19b2:	6f 91       	pop	r22
    19b4:	5f 91       	pop	r21
    19b6:	4f 91       	pop	r20
    19b8:	3f 91       	pop	r19
    19ba:	2f 91       	pop	r18
    19bc:	0f 90       	pop	r0
    19be:	0b be       	out	0x3b, r0	; 59
    19c0:	0f 90       	pop	r0
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	0f 90       	pop	r0
    19c6:	1f 90       	pop	r1
    19c8:	18 95       	reti

000019ca <chk_buttons>:
//*********************************************************************************
int16_t chk_buttons(uint8_t button) {  //check which button is pushed
    
    static uint16_t state[8] = {0x0000}; //holds present state
    if (!(PINA & 0x01)){
        state[button] = (state[button] << 1) | (!(PINA&0x01)) | 0xE000;
    19ca:	e8 2f       	mov	r30, r24
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
//  the method will return a 1. Otherwise it returns a 0.
//*********************************************************************************
int16_t chk_buttons(uint8_t button) {  //check which button is pushed
    
    static uint16_t state[8] = {0x0000}; //holds present state
    if (!(PINA & 0x01)){
    19ce:	c8 99       	sbic	0x19, 0	; 25
    19d0:	1d c0       	rjmp	.+58     	; 0x1a0c <chk_buttons+0x42>
        state[button] = (state[button] << 1) | (!(PINA&0x01)) | 0xE000;
    19d2:	89 b3       	in	r24, 0x19	; 25
    19d4:	ee 0f       	add	r30, r30
    19d6:	ff 1f       	adc	r31, r31
    19d8:	e7 53       	subi	r30, 0x37	; 55
    19da:	fe 4f       	sbci	r31, 0xFE	; 254
    19dc:	80 95       	com	r24
    19de:	28 2f       	mov	r18, r24
    19e0:	21 70       	andi	r18, 0x01	; 1
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	30 6e       	ori	r19, 0xE0	; 224
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	28 2b       	or	r18, r24
    19f0:	39 2b       	or	r19, r25
    19f2:	31 83       	std	Z+1, r19	; 0x01
    19f4:	20 83       	st	Z, r18
        if (state[0] == 0xF000) return 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	20 91 c9 01 	lds	r18, 0x01C9
    19fe:	30 91 ca 01 	lds	r19, 0x01CA
    1a02:	21 15       	cp	r18, r1
    1a04:	30 4f       	sbci	r19, 0xF0	; 240
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <chk_buttons+0x40>
        return 0;
    }
    else {
        state[button] = (state[button] << 1) | (!bit_is_clear(PINA,button)) | 0xE000;
        if (state[button] == 0xF000)
    1a08:	80 e0       	ldi	r24, 0x00	; 0
            return 1;
        return 0;
    }
    
}
    1a0a:	08 95       	ret
        state[button] = (state[button] << 1) | (!(PINA&0x01)) | 0xE000;
        if (state[0] == 0xF000) return 1;
        return 0;
    }
    else {
        state[button] = (state[button] << 1) | (!bit_is_clear(PINA,button)) | 0xE000;
    1a0c:	49 b3       	in	r20, 0x19	; 25
    1a0e:	ee 0f       	add	r30, r30
    1a10:	ff 1f       	adc	r31, r31
    1a12:	e7 53       	subi	r30, 0x37	; 55
    1a14:	fe 4f       	sbci	r31, 0xFE	; 254
    1a16:	20 81       	ld	r18, Z
    1a18:	31 81       	ldd	r19, Z+1	; 0x01
    1a1a:	22 0f       	add	r18, r18
    1a1c:	33 1f       	adc	r19, r19
    1a1e:	30 6e       	ori	r19, 0xE0	; 224
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <chk_buttons+0x5e>
    1a24:	55 95       	asr	r21
    1a26:	47 95       	ror	r20
    1a28:	8a 95       	dec	r24
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <chk_buttons+0x5a>
    1a2c:	41 70       	andi	r20, 0x01	; 1
    1a2e:	55 27       	eor	r21, r21
    1a30:	24 2b       	or	r18, r20
    1a32:	35 2b       	or	r19, r21
    1a34:	31 83       	std	Z+1, r19	; 0x01
    1a36:	20 83       	st	Z, r18
        if (state[button] == 0xF000)
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	21 15       	cp	r18, r1
    1a3e:	30 4f       	sbci	r19, 0xF0	; 240
    1a40:	21 f3       	breq	.-56     	; 0x1a0a <chk_buttons+0x40>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	e2 cf       	rjmp	.-60     	; 0x1a0a <chk_buttons+0x40>

00001a46 <segment_value>:
//**********************************************************************************
//                                   segment_value
//  Determines the number value and colon_state blink/blank out of the digit_data segment_data,
//  which would later be displayed by the segment_display method.
//**********************************************************************************
void segment_value() {
    1a46:	8f 92       	push	r8
    1a48:	9f 92       	push	r9
    1a4a:	bf 92       	push	r11
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	40 91 00 01 	lds	r20, 0x0100
    1a60:	eb eb       	ldi	r30, 0xBB	; 187
    1a62:	8e 2e       	mov	r8, r30
    1a64:	e1 e0       	ldi	r30, 0x01	; 1
    1a66:	9e 2e       	mov	r9, r30
    int index;
    
    for (index = 0; index < 5; index++) {
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
                case 7: segment_data[index] = 0xF8; break;  //7
                case 8: segment_data[index] = 0x80; break;  //8
                case 9: segment_data[index] = 0x90; break;  //9
                case 10: segment_data[index] = 0xFF; break; //blank out
                case 11: segment_data[index] = 0x04; break; //colon
                default: segment_data[index] = 0xFF;
    1a6c:	5f ef       	ldi	r21, 0xFF	; 255
                case 6: segment_data[index] = 0x82; break;  //6
                case 7: segment_data[index] = 0xF8; break;  //7
                case 8: segment_data[index] = 0x80; break;  //8
                case 9: segment_data[index] = 0x90; break;  //9
                case 10: segment_data[index] = 0xFF; break; //blank out
                case 11: segment_data[index] = 0x04; break; //colon
    1a6e:	f4 e0       	ldi	r31, 0x04	; 4
    1a70:	bf 2e       	mov	r11, r31
                case 4: segment_data[index] = 0x99; break;  //4
                case 5: segment_data[index] = 0x92; break;  //5
                case 6: segment_data[index] = 0x82; break;  //6
                case 7: segment_data[index] = 0xF8; break;  //7
                case 8: segment_data[index] = 0x80; break;  //8
                case 9: segment_data[index] = 0x90; break;  //9
    1a72:	a0 e9       	ldi	r26, 0x90	; 144
    1a74:	ca 2e       	mov	r12, r26
                case 3: segment_data[index] = 0xB0; break;  //3
                case 4: segment_data[index] = 0x99; break;  //4
                case 5: segment_data[index] = 0x92; break;  //5
                case 6: segment_data[index] = 0x82; break;  //6
                case 7: segment_data[index] = 0xF8; break;  //7
                case 8: segment_data[index] = 0x80; break;  //8
    1a76:	b0 e8       	ldi	r27, 0x80	; 128
    1a78:	db 2e       	mov	r13, r27
                case 2: segment_data[index] = 0xA4; break;  //2
                case 3: segment_data[index] = 0xB0; break;  //3
                case 4: segment_data[index] = 0x99; break;  //4
                case 5: segment_data[index] = 0x92; break;  //5
                case 6: segment_data[index] = 0x82; break;  //6
                case 7: segment_data[index] = 0xF8; break;  //7
    1a7a:	c8 ef       	ldi	r28, 0xF8	; 248
    1a7c:	ec 2e       	mov	r14, r28
                case 1: segment_data[index] = 0xF9; break;  //1
                case 2: segment_data[index] = 0xA4; break;  //2
                case 3: segment_data[index] = 0xB0; break;  //3
                case 4: segment_data[index] = 0x99; break;  //4
                case 5: segment_data[index] = 0x92; break;  //5
                case 6: segment_data[index] = 0x82; break;  //6
    1a7e:	d2 e8       	ldi	r29, 0x82	; 130
    1a80:	fd 2e       	mov	r15, r29
                case 0: segment_data[index] = 0xC0; break;  //0
                case 1: segment_data[index] = 0xF9; break;  //1
                case 2: segment_data[index] = 0xA4; break;  //2
                case 3: segment_data[index] = 0xB0; break;  //3
                case 4: segment_data[index] = 0x99; break;  //4
                case 5: segment_data[index] = 0x92; break;  //5
    1a82:	02 e9       	ldi	r16, 0x92	; 146
            switch (frequency_data[index]){
                case 0: segment_data[index] = 0xC0; break;  //0
                case 1: segment_data[index] = 0xF9; break;  //1
                case 2: segment_data[index] = 0xA4; break;  //2
                case 3: segment_data[index] = 0xB0; break;  //3
                case 4: segment_data[index] = 0x99; break;  //4
    1a84:	19 e9       	ldi	r17, 0x99	; 153
        if(displayTimeFlag == 0){
            switch (frequency_data[index]){
                case 0: segment_data[index] = 0xC0; break;  //0
                case 1: segment_data[index] = 0xF9; break;  //1
                case 2: segment_data[index] = 0xA4; break;  //2
                case 3: segment_data[index] = 0xB0; break;  //3
    1a86:	d0 eb       	ldi	r29, 0xB0	; 176
        //display the frequency
        if(displayTimeFlag == 0){
            switch (frequency_data[index]){
                case 0: segment_data[index] = 0xC0; break;  //0
                case 1: segment_data[index] = 0xF9; break;  //1
                case 2: segment_data[index] = 0xA4; break;  //2
    1a88:	c4 ea       	ldi	r28, 0xA4	; 164
        
        //display the frequency
        if(displayTimeFlag == 0){
            switch (frequency_data[index]){
                case 0: segment_data[index] = 0xC0; break;  //0
                case 1: segment_data[index] = 0xF9; break;  //1
    1a8a:	79 ef       	ldi	r23, 0xF9	; 249
        }
        
        //display the frequency
        if(displayTimeFlag == 0){
            switch (frequency_data[index]){
                case 0: segment_data[index] = 0xC0; break;  //0
    1a8c:	60 ec       	ldi	r22, 0xC0	; 192
    int index;
    
    for (index = 0; index < 5; index++) {
        
        //display the time
        if(displayTimeFlag == 1){
    1a8e:	41 30       	cpi	r20, 0x01	; 1
    1a90:	01 f1       	breq	.+64     	; 0x1ad2 <segment_value+0x8c>
                default: segment_data[index] = 0xFF;
            }//switch
        }
        
        //display the frequency
        if(displayTimeFlag == 0){
    1a92:	41 11       	cpse	r20, r1
    1a94:	0a c0       	rjmp	.+20     	; 0x1aaa <segment_value+0x64>
    1a96:	d9 01       	movw	r26, r18
    1a98:	a9 50       	subi	r26, 0x09	; 9
    1a9a:	be 4f       	sbci	r27, 0xFE	; 254
            switch (frequency_data[index]){
    1a9c:	8c 91       	ld	r24, X
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	8c 30       	cpi	r24, 0x0C	; 12
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	18 f1       	brcs	.+70     	; 0x1aec <segment_value+0xa6>
                case 7: segment_data[index] = 0xF8; break;  //7
                case 8: segment_data[index] = 0x80; break;  //8
                case 9: segment_data[index] = 0x90; break;  //9
                case 10: segment_data[index] = 0xFF; break; //blank out
                case 11: segment_data[index] = 0x04; break; //colon
                default: segment_data[index] = 0xFF;
    1aa6:	f4 01       	movw	r30, r8
    1aa8:	50 83       	st	Z, r21
//  which would later be displayed by the segment_display method.
//**********************************************************************************
void segment_value() {
    int index;
    
    for (index = 0; index < 5; index++) {
    1aaa:	2f 5f       	subi	r18, 0xFF	; 255
    1aac:	3f 4f       	sbci	r19, 0xFF	; 255
    1aae:	ff ef       	ldi	r31, 0xFF	; 255
    1ab0:	8f 1a       	sub	r8, r31
    1ab2:	9f 0a       	sbc	r9, r31
    1ab4:	25 30       	cpi	r18, 0x05	; 5
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	51 f7       	brne	.-44     	; 0x1a8e <segment_value+0x48>
                default: segment_data[index] = 0xFF;
            }//switch
        }
        
    }//for
}
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	ff 90       	pop	r15
    1ac4:	ef 90       	pop	r14
    1ac6:	df 90       	pop	r13
    1ac8:	cf 90       	pop	r12
    1aca:	bf 90       	pop	r11
    1acc:	9f 90       	pop	r9
    1ace:	8f 90       	pop	r8
    1ad0:	08 95       	ret
    1ad2:	d9 01       	movw	r26, r18
    1ad4:	ac 51       	subi	r26, 0x1C	; 28
    1ad6:	be 4f       	sbci	r27, 0xFE	; 254
    
    for (index = 0; index < 5; index++) {
        
        //display the time
        if(displayTimeFlag == 1){
            switch (digit_data[index]){
    1ad8:	8c 91       	ld	r24, X
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	8c 30       	cpi	r24, 0x0C	; 12
    1ade:	91 05       	cpc	r25, r1
    1ae0:	10 f7       	brcc	.-60     	; 0x1aa6 <segment_value+0x60>
    1ae2:	89 53       	subi	r24, 0x39	; 57
    1ae4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
            }//switch
        }
        
        //display the frequency
        if(displayTimeFlag == 0){
            switch (frequency_data[index]){
    1aec:	8d 52       	subi	r24, 0x2D	; 45
    1aee:	9e 4f       	sbci	r25, 0xFE	; 254
    1af0:	fc 01       	movw	r30, r24
    1af2:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
                case 4: segment_data[index] = 0x99; break;  //4
                case 5: segment_data[index] = 0x92; break;  //5
                case 6: segment_data[index] = 0x82; break;  //6
                case 7: segment_data[index] = 0xF8; break;  //7
                case 8: segment_data[index] = 0x80; break;  //8
                case 9: segment_data[index] = 0x90; break;  //9
    1af6:	f4 01       	movw	r30, r8
    1af8:	c0 82       	st	Z, r12
    1afa:	d7 cf       	rjmp	.-82     	; 0x1aaa <segment_value+0x64>
                case 3: segment_data[index] = 0xB0; break;  //3
                case 4: segment_data[index] = 0x99; break;  //4
                case 5: segment_data[index] = 0x92; break;  //5
                case 6: segment_data[index] = 0x82; break;  //6
                case 7: segment_data[index] = 0xF8; break;  //7
                case 8: segment_data[index] = 0x80; break;  //8
    1afc:	f4 01       	movw	r30, r8
    1afe:	d0 82       	st	Z, r13
    1b00:	d4 cf       	rjmp	.-88     	; 0x1aaa <segment_value+0x64>
                case 2: segment_data[index] = 0xA4; break;  //2
                case 3: segment_data[index] = 0xB0; break;  //3
                case 4: segment_data[index] = 0x99; break;  //4
                case 5: segment_data[index] = 0x92; break;  //5
                case 6: segment_data[index] = 0x82; break;  //6
                case 7: segment_data[index] = 0xF8; break;  //7
    1b02:	f4 01       	movw	r30, r8
    1b04:	e0 82       	st	Z, r14
    1b06:	d1 cf       	rjmp	.-94     	; 0x1aaa <segment_value+0x64>
                case 1: segment_data[index] = 0xF9; break;  //1
                case 2: segment_data[index] = 0xA4; break;  //2
                case 3: segment_data[index] = 0xB0; break;  //3
                case 4: segment_data[index] = 0x99; break;  //4
                case 5: segment_data[index] = 0x92; break;  //5
                case 6: segment_data[index] = 0x82; break;  //6
    1b08:	f4 01       	movw	r30, r8
    1b0a:	f0 82       	st	Z, r15
    1b0c:	ce cf       	rjmp	.-100    	; 0x1aaa <segment_value+0x64>
                case 0: segment_data[index] = 0xC0; break;  //0
                case 1: segment_data[index] = 0xF9; break;  //1
                case 2: segment_data[index] = 0xA4; break;  //2
                case 3: segment_data[index] = 0xB0; break;  //3
                case 4: segment_data[index] = 0x99; break;  //4
                case 5: segment_data[index] = 0x92; break;  //5
    1b0e:	f4 01       	movw	r30, r8
    1b10:	00 83       	st	Z, r16
    1b12:	cb cf       	rjmp	.-106    	; 0x1aaa <segment_value+0x64>
            switch (frequency_data[index]){
                case 0: segment_data[index] = 0xC0; break;  //0
                case 1: segment_data[index] = 0xF9; break;  //1
                case 2: segment_data[index] = 0xA4; break;  //2
                case 3: segment_data[index] = 0xB0; break;  //3
                case 4: segment_data[index] = 0x99; break;  //4
    1b14:	f4 01       	movw	r30, r8
    1b16:	10 83       	st	Z, r17
    1b18:	c8 cf       	rjmp	.-112    	; 0x1aaa <segment_value+0x64>
        if(displayTimeFlag == 0){
            switch (frequency_data[index]){
                case 0: segment_data[index] = 0xC0; break;  //0
                case 1: segment_data[index] = 0xF9; break;  //1
                case 2: segment_data[index] = 0xA4; break;  //2
                case 3: segment_data[index] = 0xB0; break;  //3
    1b1a:	f4 01       	movw	r30, r8
    1b1c:	d0 83       	st	Z, r29
    1b1e:	c5 cf       	rjmp	.-118    	; 0x1aaa <segment_value+0x64>
        //display the frequency
        if(displayTimeFlag == 0){
            switch (frequency_data[index]){
                case 0: segment_data[index] = 0xC0; break;  //0
                case 1: segment_data[index] = 0xF9; break;  //1
                case 2: segment_data[index] = 0xA4; break;  //2
    1b20:	f4 01       	movw	r30, r8
    1b22:	c0 83       	st	Z, r28
    1b24:	c2 cf       	rjmp	.-124    	; 0x1aaa <segment_value+0x64>
        
        //display the frequency
        if(displayTimeFlag == 0){
            switch (frequency_data[index]){
                case 0: segment_data[index] = 0xC0; break;  //0
                case 1: segment_data[index] = 0xF9; break;  //1
    1b26:	f4 01       	movw	r30, r8
    1b28:	70 83       	st	Z, r23
    1b2a:	bf cf       	rjmp	.-130    	; 0x1aaa <segment_value+0x64>
        }
        
        //display the frequency
        if(displayTimeFlag == 0){
            switch (frequency_data[index]){
                case 0: segment_data[index] = 0xC0; break;  //0
    1b2c:	f4 01       	movw	r30, r8
    1b2e:	60 83       	st	Z, r22
    1b30:	bc cf       	rjmp	.-136    	; 0x1aaa <segment_value+0x64>
                case 6: segment_data[index] = 0x82; break;  //6
                case 7: segment_data[index] = 0xF8; break;  //7
                case 8: segment_data[index] = 0x80; break;  //8
                case 9: segment_data[index] = 0x90; break;  //9
                case 10: segment_data[index] = 0xFF; break; //blank out
                case 11: segment_data[index] = 0x04; break; //colon
    1b32:	f4 01       	movw	r30, r8
    1b34:	b0 82       	st	Z, r11
    1b36:	b9 cf       	rjmp	.-142    	; 0x1aaa <segment_value+0x64>

00001b38 <segment_display>:
// Otherwise seven segment is blanked out. Doing it this quickly gives the illusion
// of dimming the seven segment.

// All 7-segment LEDS are active low
//**********************************************************************************
void segment_display() {
    1b38:	21 e0       	ldi	r18, 0x01	; 1
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
                        _delay_ms(2);
                    break;
                    
                case 2: //colon_state
                   
                        PORTB = 0x20;
    1b3c:	60 e2       	ldi	r22, 0x20	; 32
                        _delay_ms(2);
                    break;
                    
                case 3: //hundreds digit
                    
                        PORTB = 0x30;
    1b3e:	50 e3       	ldi	r21, 0x30	; 48
                        PORTA = segment_data[0];
                        _delay_ms(2);
                    break;
                    
                case 1: //tens digit
                        PORTB = 0x10;
    1b40:	40 e1       	ldi	r20, 0x10	; 16
    1b42:	c9 01       	movw	r24, r18
    1b44:	01 97       	sbiw	r24, 0x01	; 1
//**********************************************************************************
void segment_display() {
    int digits; //for looping through the digits digit_data
    
    for (digits = 0; digits < 5; digits++) {
            switch (digits) {
    1b46:	82 30       	cpi	r24, 0x02	; 2
    1b48:	91 05       	cpc	r25, r1
    1b4a:	39 f1       	breq	.+78     	; 0x1b9a <segment_display+0x62>
    1b4c:	83 30       	cpi	r24, 0x03	; 3
    1b4e:	91 05       	cpc	r25, r1
    1b50:	8c f0       	brlt	.+34     	; 0x1b74 <segment_display+0x3c>
    1b52:	83 30       	cpi	r24, 0x03	; 3
    1b54:	91 05       	cpc	r25, r1
    1b56:	d1 f1       	breq	.+116    	; 0x1bcc <segment_display+0x94>
    1b58:	04 97       	sbiw	r24, 0x04	; 4
    1b5a:	51 f5       	brne	.+84     	; 0x1bb0 <segment_display+0x78>
                        PORTA = segment_data[3];
                        _delay_ms(2);
                    break;
                    
                case 4: //thousands digit
                        PORTB = 0x40;
    1b5c:	80 e4       	ldi	r24, 0x40	; 64
    1b5e:	88 bb       	out	0x18, r24	; 24
                        PORTA = segment_data[4];
    1b60:	80 91 bf 01 	lds	r24, 0x01BF
    1b64:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b66:	8f e3       	ldi	r24, 0x3F	; 63
    1b68:	9f e1       	ldi	r25, 0x1F	; 31
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <segment_display+0x32>
    1b6e:	00 c0       	rjmp	.+0      	; 0x1b70 <segment_display+0x38>
    1b70:	00 00       	nop
    1b72:	08 95       	ret
//**********************************************************************************
void segment_display() {
    int digits; //for looping through the digits digit_data
    
    for (digits = 0; digits < 5; digits++) {
            switch (digits) {
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	e1 f4       	brne	.+56     	; 0x1bb0 <segment_display+0x78>
                        PORTA = segment_data[0];
                        _delay_ms(2);
                    break;
                    
                case 1: //tens digit
                        PORTB = 0x10;
    1b78:	48 bb       	out	0x18, r20	; 24
                        PORTA = segment_data[1];
    1b7a:	80 91 bc 01 	lds	r24, 0x01BC
    1b7e:	8b bb       	out	0x1b, r24	; 27
    1b80:	8f e3       	ldi	r24, 0x3F	; 63
    1b82:	9f e1       	ldi	r25, 0x1F	; 31
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <segment_display+0x4c>
    1b88:	00 c0       	rjmp	.+0      	; 0x1b8a <segment_display+0x52>
    1b8a:	00 00       	nop
    1b8c:	2f 5f       	subi	r18, 0xFF	; 255
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	c9 01       	movw	r24, r18
    1b92:	01 97       	sbiw	r24, 0x01	; 1
//**********************************************************************************
void segment_display() {
    int digits; //for looping through the digits digit_data
    
    for (digits = 0; digits < 5; digits++) {
            switch (digits) {
    1b94:	82 30       	cpi	r24, 0x02	; 2
    1b96:	91 05       	cpc	r25, r1
    1b98:	c9 f6       	brne	.-78     	; 0x1b4c <segment_display+0x14>
                        _delay_ms(2);
                    break;
                    
                case 2: //colon_state
                   
                        PORTB = 0x20;
    1b9a:	68 bb       	out	0x18, r22	; 24
                        PORTA = segment_data[2];
    1b9c:	80 91 bd 01 	lds	r24, 0x01BD
    1ba0:	8b bb       	out	0x1b, r24	; 27
    1ba2:	8f e3       	ldi	r24, 0x3F	; 63
    1ba4:	9f e1       	ldi	r25, 0x1F	; 31
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <segment_display+0x6e>
    1baa:	00 c0       	rjmp	.+0      	; 0x1bac <segment_display+0x74>
    1bac:	00 00       	nop
    1bae:	ee cf       	rjmp	.-36     	; 0x1b8c <segment_display+0x54>
    int digits; //for looping through the digits digit_data
    
    for (digits = 0; digits < 5; digits++) {
            switch (digits) {
                case 0: //ones digit
                        PORTB = 0x00;
    1bb0:	18 ba       	out	0x18, r1	; 24
                        PORTA = segment_data[0];
    1bb2:	80 91 bb 01 	lds	r24, 0x01BB
    1bb6:	8b bb       	out	0x1b, r24	; 27
    1bb8:	8f e3       	ldi	r24, 0x3F	; 63
    1bba:	9f e1       	ldi	r25, 0x1F	; 31
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <segment_display+0x84>
    1bc0:	00 c0       	rjmp	.+0      	; 0x1bc2 <segment_display+0x8a>
    1bc2:	00 00       	nop
// All 7-segment LEDS are active low
//**********************************************************************************
void segment_display() {
    int digits; //for looping through the digits digit_data
    
    for (digits = 0; digits < 5; digits++) {
    1bc4:	25 30       	cpi	r18, 0x05	; 5
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	09 f7       	brne	.-62     	; 0x1b8c <segment_display+0x54>
    1bca:	08 95       	ret
                        _delay_ms(2);
                    break;
                    
                case 3: //hundreds digit
                    
                        PORTB = 0x30;
    1bcc:	58 bb       	out	0x18, r21	; 24
                        PORTA = segment_data[3];
    1bce:	80 91 be 01 	lds	r24, 0x01BE
    1bd2:	8b bb       	out	0x1b, r24	; 27
    1bd4:	8f e3       	ldi	r24, 0x3F	; 63
    1bd6:	9f e1       	ldi	r25, 0x1F	; 31
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <segment_display+0xa0>
    1bdc:	00 c0       	rjmp	.+0      	; 0x1bde <segment_display+0xa6>
    1bde:	00 00       	nop
    1be0:	d5 cf       	rjmp	.-86     	; 0x1b8c <segment_display+0x54>

00001be2 <spi_init>:
// parameters are set up: master mode, clock=clk/2, half phase cycle,
// low polarity, MSB first interrupts disabled, poll SPIF bit in SPSR to
// check transmit completion.
/***********************************************************************/
void spi_init(void){
    SPCR |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
    1be2:	8d b1       	in	r24, 0x0d	; 13
    1be4:	80 65       	ori	r24, 0x50	; 80
    1be6:	8d b9       	out	0x0d, r24	; 13
    SPSR |= (1<<SPI2X);   // double speed operation
    1be8:	70 9a       	sbi	0x0e, 0	; 14
    1bea:	08 95       	ret

00001bec <tcnt0_init>:
// Initializes timer/counter0. TCNT0 allows running
// in async mode with an external 32khz crystal. If running in normal mode,
// there is no prescaling. Overflow interrupt occurs at 0xFF.
/***********************************************************************/
void tcnt0_init(void){
    ASSR  |= (1<<AS0);  //ext osc TOSC
    1bec:	80 b7       	in	r24, 0x30	; 48
    1bee:	88 60       	ori	r24, 0x08	; 8
    1bf0:	80 bf       	out	0x30, r24	; 48
    TIMSK |= (1<<TOIE0);  //enable timer/counter0 overflow interrupt
    1bf2:	87 b7       	in	r24, 0x37	; 55
    1bf4:	81 60       	ori	r24, 0x01	; 1
    1bf6:	87 bf       	out	0x37, r24	; 55
    TCCR0 |= (1<<CS00);  //normal mode, no prescale
    1bf8:	83 b7       	in	r24, 0x33	; 51
    1bfa:	81 60       	ori	r24, 0x01	; 1
    1bfc:	83 bf       	out	0x33, r24	; 51
    1bfe:	08 95       	ret

00001c00 <tcnt2_init>:
//***********************************************************************/
//                          tcnt2_init
// Initialize timer counter 2 to allow LED dimming through PWM
//***********************************************************************/
void tcnt2_init(void){
    DDRB  |= (1<<PB7);
    1c00:	bf 9a       	sbi	0x17, 7	; 23
    TCCR2 &= (0<<FOC2); //no forced compare. fast pwm mode. Set OC2 on compare match
    1c02:	85 b5       	in	r24, 0x25	; 37
    1c04:	15 bc       	out	0x25, r1	; 37
    TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20);
    1c06:	85 b5       	in	r24, 0x25	; 37
    1c08:	88 67       	ori	r24, 0x78	; 120
    1c0a:	85 bd       	out	0x25, r24	; 37
    TCCR2 |= (1<<CS20); //normal mode, no prescaler
    1c0c:	85 b5       	in	r24, 0x25	; 37
    1c0e:	81 60       	ori	r24, 0x01	; 1
    1c10:	85 bd       	out	0x25, r24	; 37
    OCR2  = 0x00; //initialize OCR register for PWM
    1c12:	13 bc       	out	0x23, r1	; 35
    1c14:	08 95       	ret

00001c16 <tcnt3_init>:
// cleared at BOTTOM. Function is for automatically changing volume of
// alarm on the audio amplifier board.
//
//***********************************************************************/
void tcnt3_init(void){
    DDRE  |= (1<<PE3); //volume pin for PWM output (allows the OCR3A to be enabled)
    1c16:	13 9a       	sbi	0x02, 3	; 2
    PORTE |= (1<<PE3); //enable pullups
    1c18:	1b 9a       	sbi	0x03, 3	; 3
    TCCR3A |= ( 1<<COM3A1 ) | ( 1<<COM3A0 ) | ( 1<<WGM31 ); // fast pwm, set on match.
    1c1a:	eb e8       	ldi	r30, 0x8B	; 139
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	82 6c       	ori	r24, 0xC2	; 194
    1c22:	80 83       	st	Z, r24
    TCCR3B |= ( 1<<WGM33 ) | ( 1<<WGM32 ) | ( 1<<CS30 );  // ICR3 for TOP, clk/1, no prescale
    1c24:	ea e8       	ldi	r30, 0x8A	; 138
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	89 61       	ori	r24, 0x19	; 25
    1c2c:	80 83       	st	Z, r24
    TCCR3C  = 0x00; //no forced compare
    1c2e:	10 92 8c 00 	sts	0x008C, r1
    //OCR3A = 200;
    ICR3 = 0x0FFF; //Input capture register
    1c32:	8f ef       	ldi	r24, 0xFF	; 255
    1c34:	9f e0       	ldi	r25, 0x0F	; 15
    1c36:	90 93 81 00 	sts	0x0081, r25
    1c3a:	80 93 80 00 	sts	0x0080, r24
    1c3e:	08 95       	ret

00001c40 <adc_init>:
// The ADC module contains a prescaler that generates a acceptable ADC clock
// frequency from CPU. This prescaler is decided by the ADPSn registers.
//***********************************************************************/
void adc_init(void)
{
    DDRF &= 0xFE;
    1c40:	e1 e6       	ldi	r30, 0x61	; 97
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8e 7f       	andi	r24, 0xFE	; 254
    1c48:	80 83       	st	Z, r24
    PORTF &= 0xFE;
    1c4a:	e2 e6       	ldi	r30, 0x62	; 98
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8e 7f       	andi	r24, 0xFE	; 254
    1c52:	80 83       	st	Z, r24
    ADMUX |= (1<<REFS0) | (1<<ADLAR); //AVCC with external capacitor at AREF pin.
    1c54:	87 b1       	in	r24, 0x07	; 7
    1c56:	80 66       	ori	r24, 0x60	; 96
    1c58:	87 b9       	out	0x07, r24	; 7
    //left adjusted, just read ADCH, otherwise,
    //need to read ADCL at first, then read ADCH
    //set ADC enable, start conversion, free running mode, enable adc interrupt
    ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADFR) | (1<<ADIE);
    1c5a:	86 b1       	in	r24, 0x06	; 6
    1c5c:	88 6e       	ori	r24, 0xE8	; 232
    1c5e:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // set clk/128 prescaler
    1c60:	86 b1       	in	r24, 0x06	; 6
    1c62:	87 60       	ori	r24, 0x07	; 7
    1c64:	86 b9       	out	0x06, r24	; 6
    1c66:	08 95       	ret

00001c68 <encoders>:
    uint8_t tempRight, prevRight;
    uint8_t tempLeft, prevLeft;
    
    uint8_t encoder_mode; //determines left or right rotation
    uint8_t left_encoder;
    PORTE = 0x00;         // SH/LD = 0 CLK_INH = 0
    1c68:	13 b8       	out	0x03, r1	; 3
    PORTE |= 0x80;        // SH/LD = 1 CLK_INH = 0
    1c6a:	1f 9a       	sbi	0x03, 7	; 3
    
    //make a copy of the left and right encoder data
    tempLeft = spi_out & 0x03;
    tempRight = spi_out & 0x0C;
    1c6c:	98 2f       	mov	r25, r24
    1c6e:	9c 70       	andi	r25, 0x0C	; 12
    
    if (tempLeft == prevLeft) encoder_mode = 1;       //keep left state and switch right state
    if (tempRight == prevRight) encoder_mode = 0;     //keep right state and switch left state
    1c70:	29 f1       	breq	.+74     	; 0x1cbc <encoders+0x54>
        if ((left_encoder == 0xC0) & (clock_mode == 0)) displayBits |= 0x80;
        //show that left encoder can work underlying this state of right one
    }
    
    if(encoder_mode == 1) {  //switch right encoder
        spi_out = (spi_out & 0x0C) >> 2;
    1c72:	89 2f       	mov	r24, r25
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	95 95       	asr	r25
    1c78:	87 95       	ror	r24
    1c7a:	95 95       	asr	r25
    1c7c:	87 95       	ror	r24
    1c7e:	38 2f       	mov	r19, r24
        switch (rightState){
    1c80:	20 91 24 02 	lds	r18, 0x0224
    1c84:	21 30       	cpi	r18, 0x01	; 1
    1c86:	d1 f1       	breq	.+116    	; 0x1cfc <encoders+0x94>
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <encoders+0x24>
    1c8a:	b2 c0       	rjmp	.+356    	; 0x1df0 <encoders+0x188>
    1c8c:	22 30       	cpi	r18, 0x02	; 2
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <encoders+0x2a>
    1c90:	95 c0       	rjmp	.+298    	; 0x1dbc <encoders+0x154>
    1c92:	23 30       	cpi	r18, 0x03	; 3
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <encoders+0x30>
    1c96:	46 c0       	rjmp	.+140    	; 0x1d24 <encoders+0xbc>
                if (spi_out == 2) rightState = 2;
                if (spi_out == 3) rightState = 3;
                break;
                
            case 3:
                if (prevRightState == 1) {
    1c98:	20 91 28 02 	lds	r18, 0x0228
    1c9c:	21 30       	cpi	r18, 0x01	; 1
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <encoders+0x3a>
    1ca0:	fb c0       	rjmp	.+502    	; 0x1e98 <encoders+0x230>
                    count = 1;
                    count_sign = 1;
                    //volume += 20;
                }//clockwise
                
                if (prevRightState == 2) {
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <encoders+0x40>
    1ca6:	ce c0       	rjmp	.+412    	; 0x1e44 <encoders+0x1dc>
                    count = 1;
                    count_sign = -1;
                    //volume -= 20;
                }//counterclockwise
                
                prevRightState = rightState;
    1ca8:	23 e0       	ldi	r18, 0x03	; 3
    1caa:	20 93 28 02 	sts	0x0228, r18
                
                if (spi_out == 0) rightState = 0;
    1cae:	33 23       	and	r19, r19
    1cb0:	b1 f1       	breq	.+108    	; 0x1d1e <encoders+0xb6>
                if (spi_out == 1) rightState = 1;
    1cb2:	31 30       	cpi	r19, 0x01	; 1
    1cb4:	c1 f1       	breq	.+112    	; 0x1d26 <encoders+0xbe>
                if (spi_out == 2) rightState = 2;
    1cb6:	32 30       	cpi	r19, 0x02	; 2
    1cb8:	b1 f1       	breq	.+108    	; 0x1d26 <encoders+0xbe>
    1cba:	08 95       	ret
    
    if (tempLeft == prevLeft) encoder_mode = 1;       //keep left state and switch right state
    if (tempRight == prevRight) encoder_mode = 0;     //keep right state and switch left state
    
    if(encoder_mode == 0) {  //switch left encoder
        spi_out &= 0x03;
    1cbc:	83 70       	andi	r24, 0x03	; 3
        switch (leftState){
    1cbe:	90 91 21 02 	lds	r25, 0x0221
    1cc2:	91 30       	cpi	r25, 0x01	; 1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <encoders+0x60>
    1cc6:	51 c0       	rjmp	.+162    	; 0x1d6a <encoders+0x102>
    1cc8:	88 f1       	brcs	.+98     	; 0x1d2c <encoders+0xc4>
    1cca:	92 30       	cpi	r25, 0x02	; 2
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <encoders+0x68>
    1cce:	61 c0       	rjmp	.+194    	; 0x1d92 <encoders+0x12a>
    1cd0:	93 30       	cpi	r25, 0x03	; 3
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <encoders+0x6e>
    1cd4:	5a c0       	rjmp	.+180    	; 0x1d8a <encoders+0x122>
                if (spi_out == 2) leftState = 2;
                if (spi_out == 3) leftState = 3;
                break;
                
            case 3:
                if (prevLeftState == 1) {
    1cd6:	90 91 3b 02 	lds	r25, 0x023B
    1cda:	91 30       	cpi	r25, 0x01	; 1
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <encoders+0x78>
    1cde:	c5 c0       	rjmp	.+394    	; 0x1e6a <encoders+0x202>
                    count = 1;
                    count_sign = 1;
                    //volume += 20;
                }//clockwise
                
                if (prevLeftState == 2) {
    1ce0:	92 30       	cpi	r25, 0x02	; 2
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <encoders+0x7e>
    1ce4:	a8 c0       	rjmp	.+336    	; 0x1e36 <encoders+0x1ce>
                    count = 1;
                    count_sign = -1;
                    //volume -= 20;
                }//counterclockwise
                
                prevLeftState = leftState;
    1ce6:	93 e0       	ldi	r25, 0x03	; 3
    1ce8:	90 93 3b 02 	sts	0x023B, r25
                if (spi_out == 0) leftState = 0;
    1cec:	88 23       	and	r24, r24
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <encoders+0x8a>
    1cf0:	49 c0       	rjmp	.+146    	; 0x1d84 <encoders+0x11c>
                if (spi_out == 1) leftState = 1;
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	59 f1       	breq	.+86     	; 0x1d4c <encoders+0xe4>
                if (spi_out == 2) leftState = 2;
    1cf6:	82 30       	cpi	r24, 0x02	; 2
    1cf8:	49 f1       	breq	.+82     	; 0x1d4c <encoders+0xe4>
    1cfa:	2a c0       	rjmp	.+84     	; 0x1d50 <encoders+0xe8>
                if (spi_out == 2) rightState = 2;
                if (spi_out == 3) rightState = 3;
                break;
                
            case 1:
                if (prevRightState == 0) {
    1cfc:	40 91 28 02 	lds	r20, 0x0228
    1d00:	44 23       	and	r20, r20
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <encoders+0x9e>
    1d04:	8d c0       	rjmp	.+282    	; 0x1e20 <encoders+0x1b8>
                    count = 1;
                    count_sign = 1;
                    //volume -= 20;
                }//counterclockwise
                
                if (prevRightState == 3) {
    1d06:	43 30       	cpi	r20, 0x03	; 3
    1d08:	29 f4       	brne	.+10     	; 0x1d14 <encoders+0xac>
                    count = 1;
    1d0a:	20 93 04 01 	sts	0x0104, r18
                    count_sign = -1;
    1d0e:	2f ef       	ldi	r18, 0xFF	; 255
    1d10:	20 93 e3 01 	sts	0x01E3, r18
                    //volume += 20;
                }//clockwise
                
                prevRightState = rightState;
    1d14:	21 e0       	ldi	r18, 0x01	; 1
    1d16:	20 93 28 02 	sts	0x0228, r18
                if (spi_out == 0) rightState = 0;
    1d1a:	31 11       	cpse	r19, r1
    1d1c:	75 c0       	rjmp	.+234    	; 0x1e08 <encoders+0x1a0>
                    //volume -= 20;
                }//counterclockwise
                
                prevRightState = rightState;
                
                if (spi_out == 0) rightState = 0;
    1d1e:	10 92 24 02 	sts	0x0224, r1
    1d22:	08 95       	ret
                if (spi_out == 1) rightState = 1;
                if (spi_out == 2) rightState = 2;
                break;
                
            default: rightState = 3;
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	80 93 24 02 	sts	0x0224, r24
    1d2a:	08 95       	ret
                if (spi_out == 1) leftState = 1;
                if (spi_out == 3) leftState = 3;
                break;
                
            case 0:
                if (prevLeftState == 2) {
    1d2c:	90 91 3b 02 	lds	r25, 0x023B
    1d30:	92 30       	cpi	r25, 0x02	; 2
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <encoders+0xce>
    1d34:	94 c0       	rjmp	.+296    	; 0x1e5e <encoders+0x1f6>
                    count = 1;
                    count_sign = 1;
                    //volume += 20;
                }//clockwise
                
                if (prevLeftState == 1) {
    1d36:	91 30       	cpi	r25, 0x01	; 1
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <encoders+0xd4>
    1d3a:	77 c0       	rjmp	.+238    	; 0x1e2a <encoders+0x1c2>
                    count = 1;
                    count_sign = -1;
                    //volume -= 20;
                }//counterclockwise
                
                prevLeftState = leftState;
    1d3c:	10 92 3b 02 	sts	0x023B, r1
                if (spi_out == 1) leftState = 1;
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	21 f0       	breq	.+8      	; 0x1d4c <encoders+0xe4>
                    //volume -= 20;
                }//counterclockwise
                
                prevLeftState = leftState;
                if (spi_out == 0) leftState = 0;
                if (spi_out == 2) leftState = 2;
    1d44:	82 30       	cpi	r24, 0x02	; 2
    1d46:	11 f0       	breq	.+4      	; 0x1d4c <encoders+0xe4>
                if (spi_out == 3) leftState = 3;
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <encoders+0xe8>
                }//counterclockwise
                
                prevLeftState = leftState;
                if (spi_out == 0) leftState = 0;
                if (spi_out == 1) leftState = 1;
                if (spi_out == 2) leftState = 2;
    1d4c:	80 93 21 02 	sts	0x0221, r24
                default: leftState = 3;
        }//switch
        
        left_encoder &= 0xC0;
        left_encoder |= (spi_out << 6);
        if ((left_encoder == 0xC0) & (clock_mode == 0)) displayBits |= 0x80;
    1d50:	83 30       	cpi	r24, 0x03	; 3
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <encoders+0xee>
    1d54:	b2 cf       	rjmp	.-156    	; 0x1cba <encoders+0x52>
    1d56:	80 91 b3 01 	lds	r24, 0x01B3
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	ae cf       	rjmp	.-164    	; 0x1cba <encoders+0x52>
    1d5e:	80 91 ba 01 	lds	r24, 0x01BA
    1d62:	80 68       	ori	r24, 0x80	; 128
    1d64:	80 93 ba 01 	sts	0x01BA, r24
    1d68:	08 95       	ret
                if (spi_out == 2) leftState = 2;
                if (spi_out == 3) leftState = 3;
                break;
                
            case 1:
                if (prevLeftState == 0) {
    1d6a:	20 91 3b 02 	lds	r18, 0x023B
    1d6e:	21 11       	cpse	r18, r1
    1d70:	4e c0       	rjmp	.+156    	; 0x1e0e <encoders+0x1a6>
                    count = 1;
    1d72:	90 93 04 01 	sts	0x0104, r25
                    count_sign = 1;
    1d76:	90 93 e3 01 	sts	0x01E3, r25
                    count = 1;
                    count_sign = -1;
                    //volume -= 20;
                }//counterclockwise
                
                prevLeftState = leftState;
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	90 93 3b 02 	sts	0x023B, r25
                if (spi_out == 0) leftState = 0;
    1d80:	81 11       	cpse	r24, r1
    1d82:	e0 cf       	rjmp	.-64     	; 0x1d44 <encoders+0xdc>
                    count_sign = -1;
                    //volume -= 20;
                }//counterclockwise
                
                prevLeftState = leftState;
                if (spi_out == 0) leftState = 0;
    1d84:	10 92 21 02 	sts	0x0221, r1
    1d88:	e3 cf       	rjmp	.-58     	; 0x1d50 <encoders+0xe8>
                if (spi_out == 1) leftState = 1;
                if (spi_out == 2) leftState = 2;
                break;
                
                default: leftState = 3;
    1d8a:	93 e0       	ldi	r25, 0x03	; 3
    1d8c:	90 93 21 02 	sts	0x0221, r25
    1d90:	df cf       	rjmp	.-66     	; 0x1d50 <encoders+0xe8>
    
    if(encoder_mode == 0) {  //switch left encoder
        spi_out &= 0x03;
        switch (leftState){
            case 2:
                if (prevLeftState == 3) {
    1d92:	90 91 3b 02 	lds	r25, 0x023B
    1d96:	93 30       	cpi	r25, 0x03	; 3
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <encoders+0x134>
    1d9a:	6c c0       	rjmp	.+216    	; 0x1e74 <encoders+0x20c>
                    count = 1;
                    count_sign = 1;
                    //volume += 20;
                }//turn clockwise, the sum is incremented
                if (prevLeftState == 0) {
    1d9c:	91 11       	cpse	r25, r1
    1d9e:	06 c0       	rjmp	.+12     	; 0x1dac <encoders+0x144>
                    count = 1;
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	90 93 04 01 	sts	0x0104, r25
                    count_sign = -1;
    1da6:	9f ef       	ldi	r25, 0xFF	; 255
    1da8:	90 93 e3 01 	sts	0x01E3, r25
                    //volume -= 20;
                }//turn counterclockwise, the sum is decremented
                
                prevLeftState = leftState; //store current left state as previous state for next case
    1dac:	92 e0       	ldi	r25, 0x02	; 2
    1dae:	90 93 3b 02 	sts	0x023B, r25
                if (spi_out == 0) leftState = 0;
    1db2:	88 23       	and	r24, r24
    1db4:	39 f3       	breq	.-50     	; 0x1d84 <encoders+0x11c>
                if (spi_out == 1) leftState = 1;
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	49 f2       	breq	.-110    	; 0x1d4c <encoders+0xe4>
    1dba:	c6 cf       	rjmp	.-116    	; 0x1d48 <encoders+0xe0>
    
    if(encoder_mode == 1) {  //switch right encoder
        spi_out = (spi_out & 0x0C) >> 2;
        switch (rightState){
            case 2:
                if (prevRightState == 3) {
    1dbc:	20 91 28 02 	lds	r18, 0x0228
    1dc0:	23 30       	cpi	r18, 0x03	; 3
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <encoders+0x15e>
    1dc4:	5d c0       	rjmp	.+186    	; 0x1e80 <encoders+0x218>
                    count_sign = 1;
                    //volume += 20;

                }//turn clockwise, the sum is incremented
                
                if (prevRightState == 0) {
    1dc6:	21 11       	cpse	r18, r1
    1dc8:	06 c0       	rjmp	.+12     	; 0x1dd6 <encoders+0x16e>
                    count = 1;
    1dca:	21 e0       	ldi	r18, 0x01	; 1
    1dcc:	20 93 04 01 	sts	0x0104, r18
                    count_sign = -1;
    1dd0:	2f ef       	ldi	r18, 0xFF	; 255
    1dd2:	20 93 e3 01 	sts	0x01E3, r18
                    //volume -= 20;
                }//turns counterclockwise, the sum is decremented
                
                prevRightState = rightState; //store current state for next case call
    1dd6:	22 e0       	ldi	r18, 0x02	; 2
    1dd8:	20 93 28 02 	sts	0x0228, r18
                if (spi_out == 0) rightState = 0;
    1ddc:	33 23       	and	r19, r19
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <encoders+0x17a>
    1de0:	9e cf       	rjmp	.-196    	; 0x1d1e <encoders+0xb6>
                if (spi_out == 1) rightState = 1;
    1de2:	31 30       	cpi	r19, 0x01	; 1
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <encoders+0x180>
    1de6:	9f cf       	rjmp	.-194    	; 0x1d26 <encoders+0xbe>
                }//clockwise
                
                prevRightState = rightState;
                if (spi_out == 0) rightState = 0;
                if (spi_out == 2) rightState = 2;
                if (spi_out == 3) rightState = 3;
    1de8:	33 30       	cpi	r19, 0x03	; 3
    1dea:	09 f4       	brne	.+2      	; 0x1dee <encoders+0x186>
    1dec:	9c cf       	rjmp	.-200    	; 0x1d26 <encoders+0xbe>
    1dee:	65 cf       	rjmp	.-310    	; 0x1cba <encoders+0x52>
                if (spi_out == 1) rightState = 1;
                if (spi_out == 3) rightState = 3;
                break;
                
            case 0:
                if (prevRightState == 2) {
    1df0:	20 91 28 02 	lds	r18, 0x0228
    1df4:	22 30       	cpi	r18, 0x02	; 2
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <encoders+0x192>
    1df8:	49 c0       	rjmp	.+146    	; 0x1e8c <encoders+0x224>
                    count = 1;
                    count_sign = 1;
                    //volume += 20;
                }//clockwise
                
                if (prevRightState == 1) {
    1dfa:	21 30       	cpi	r18, 0x01	; 1
    1dfc:	51 f1       	breq	.+84     	; 0x1e52 <encoders+0x1ea>
                    count = 1;
                    count_sign = -1;
                    //volume -= 20;
                }//counterclockwise
                
                prevRightState = rightState;
    1dfe:	10 92 28 02 	sts	0x0228, r1
                if (spi_out == 1) rightState = 1;
    1e02:	31 30       	cpi	r19, 0x01	; 1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <encoders+0x1a0>
    1e06:	8f cf       	rjmp	.-226    	; 0x1d26 <encoders+0xbe>
                    //volume += 20;
                }//clockwise
                
                prevRightState = rightState;
                if (spi_out == 0) rightState = 0;
                if (spi_out == 2) rightState = 2;
    1e08:	32 30       	cpi	r19, 0x02	; 2
    1e0a:	71 f7       	brne	.-36     	; 0x1de8 <encoders+0x180>
    1e0c:	8c cf       	rjmp	.-232    	; 0x1d26 <encoders+0xbe>
                    count = 1;
                    count_sign = 1;
                    //volume += 20;
                }//clockwise
                
                if (prevLeftState == 3) {
    1e0e:	23 30       	cpi	r18, 0x03	; 3
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <encoders+0x1ac>
    1e12:	b3 cf       	rjmp	.-154    	; 0x1d7a <encoders+0x112>
                    count = 1;
    1e14:	90 93 04 01 	sts	0x0104, r25
                    count_sign = -1;
    1e18:	9f ef       	ldi	r25, 0xFF	; 255
    1e1a:	90 93 e3 01 	sts	0x01E3, r25
    1e1e:	ad cf       	rjmp	.-166    	; 0x1d7a <encoders+0x112>
                if (spi_out == 3) rightState = 3;
                break;
                
            case 1:
                if (prevRightState == 0) {
                    count = 1;
    1e20:	20 93 04 01 	sts	0x0104, r18
                    count_sign = 1;
    1e24:	20 93 e3 01 	sts	0x01E3, r18
    1e28:	75 cf       	rjmp	.-278    	; 0x1d14 <encoders+0xac>
                    count_sign = 1;
                    //volume += 20;
                }//clockwise
                
                if (prevLeftState == 1) {
                    count = 1;
    1e2a:	90 93 04 01 	sts	0x0104, r25
                    count_sign = -1;
    1e2e:	9f ef       	ldi	r25, 0xFF	; 255
    1e30:	90 93 e3 01 	sts	0x01E3, r25
    1e34:	83 cf       	rjmp	.-250    	; 0x1d3c <encoders+0xd4>
                    count_sign = 1;
                    //volume += 20;
                }//clockwise
                
                if (prevLeftState == 2) {
                    count = 1;
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	90 93 04 01 	sts	0x0104, r25
                    count_sign = -1;
    1e3c:	9f ef       	ldi	r25, 0xFF	; 255
    1e3e:	90 93 e3 01 	sts	0x01E3, r25
    1e42:	51 cf       	rjmp	.-350    	; 0x1ce6 <encoders+0x7e>
                    count_sign = 1;
                    //volume += 20;
                }//clockwise
                
                if (prevRightState == 2) {
                    count = 1;
    1e44:	21 e0       	ldi	r18, 0x01	; 1
    1e46:	20 93 04 01 	sts	0x0104, r18
                    count_sign = -1;
    1e4a:	2f ef       	ldi	r18, 0xFF	; 255
    1e4c:	20 93 e3 01 	sts	0x01E3, r18
    1e50:	2b cf       	rjmp	.-426    	; 0x1ca8 <encoders+0x40>
                    count_sign = 1;
                    //volume += 20;
                }//clockwise
                
                if (prevRightState == 1) {
                    count = 1;
    1e52:	20 93 04 01 	sts	0x0104, r18
                    count_sign = -1;
    1e56:	2f ef       	ldi	r18, 0xFF	; 255
    1e58:	20 93 e3 01 	sts	0x01E3, r18
    1e5c:	d0 cf       	rjmp	.-96     	; 0x1dfe <encoders+0x196>
                if (spi_out == 3) leftState = 3;
                break;
                
            case 0:
                if (prevLeftState == 2) {
                    count = 1;
    1e5e:	91 e0       	ldi	r25, 0x01	; 1
    1e60:	90 93 04 01 	sts	0x0104, r25
                    count_sign = 1;
    1e64:	90 93 e3 01 	sts	0x01E3, r25
    1e68:	69 cf       	rjmp	.-302    	; 0x1d3c <encoders+0xd4>
                if (spi_out == 3) leftState = 3;
                break;
                
            case 3:
                if (prevLeftState == 1) {
                    count = 1;
    1e6a:	90 93 04 01 	sts	0x0104, r25
                    count_sign = 1;
    1e6e:	90 93 e3 01 	sts	0x01E3, r25
    1e72:	39 cf       	rjmp	.-398    	; 0x1ce6 <encoders+0x7e>
    if(encoder_mode == 0) {  //switch left encoder
        spi_out &= 0x03;
        switch (leftState){
            case 2:
                if (prevLeftState == 3) {
                    count = 1;
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	90 93 04 01 	sts	0x0104, r25
                    count_sign = 1;
    1e7a:	90 93 e3 01 	sts	0x01E3, r25
    1e7e:	96 cf       	rjmp	.-212    	; 0x1dac <encoders+0x144>
    if(encoder_mode == 1) {  //switch right encoder
        spi_out = (spi_out & 0x0C) >> 2;
        switch (rightState){
            case 2:
                if (prevRightState == 3) {
                    count = 1;
    1e80:	21 e0       	ldi	r18, 0x01	; 1
    1e82:	20 93 04 01 	sts	0x0104, r18
                    count_sign = 1;
    1e86:	20 93 e3 01 	sts	0x01E3, r18
    1e8a:	a5 cf       	rjmp	.-182    	; 0x1dd6 <encoders+0x16e>
                if (spi_out == 3) rightState = 3;
                break;
                
            case 0:
                if (prevRightState == 2) {
                    count = 1;
    1e8c:	21 e0       	ldi	r18, 0x01	; 1
    1e8e:	20 93 04 01 	sts	0x0104, r18
                    count_sign = 1;
    1e92:	20 93 e3 01 	sts	0x01E3, r18
    1e96:	b3 cf       	rjmp	.-154    	; 0x1dfe <encoders+0x196>
                if (spi_out == 3) rightState = 3;
                break;
                
            case 3:
                if (prevRightState == 1) {
                    count = 1;
    1e98:	20 93 04 01 	sts	0x0104, r18
                    count_sign = 1;
    1e9c:	20 93 e3 01 	sts	0x01E3, r18
    1ea0:	03 cf       	rjmp	.-506    	; 0x1ca8 <encoders+0x40>

00001ea2 <__vector_26>:
/*********************************************************************
//                              TIMER3_COMPA_vect
// TIMER3 vector which runs whenever a volume change service routine is requested.
//
//********************************************************************/
ISR(TIMER3_COMPA_vect){
    1ea2:	1f 92       	push	r1
    1ea4:	0f 92       	push	r0
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	0f 92       	push	r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	2f 93       	push	r18
    1eae:	3f 93       	push	r19
    1eb0:	8f 93       	push	r24
    1eb2:	9f 93       	push	r25
    volume = count_sign * 10;
    1eb4:	20 91 e3 01 	lds	r18, 0x01E3
    1eb8:	8a e0       	ldi	r24, 0x0A	; 10
    1eba:	28 02       	muls	r18, r24
    1ebc:	90 01       	movw	r18, r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	30 93 ec 01 	sts	0x01EC, r19
    1ec4:	20 93 eb 01 	sts	0x01EB, r18
    //OCR3A = OCR3A + volume;          //output volume PWM
    OCR3A = OCR3A - volume;
    1ec8:	80 91 86 00 	lds	r24, 0x0086
    1ecc:	90 91 87 00 	lds	r25, 0x0087
    1ed0:	82 1b       	sub	r24, r18
    1ed2:	93 0b       	sbc	r25, r19
    1ed4:	90 93 87 00 	sts	0x0087, r25
    1ed8:	80 93 86 00 	sts	0x0086, r24
    
    //if(OCR3A < 0) OCR3A = 0;
    //if(OCR3A > 200) OCR3A = 200;
    
    if (OCR3A < 100) alarm_state = 0; //mute mode
    1edc:	80 91 86 00 	lds	r24, 0x0086
    1ee0:	90 91 87 00 	lds	r25, 0x0087
    1ee4:	84 36       	cpi	r24, 0x64	; 100
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	60 f0       	brcs	.+24     	; 0x1f02 <__vector_26+0x60>
    else alarm_state = 1;            //active mode
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	80 93 01 01 	sts	0x0101, r24
}
    1ef0:	9f 91       	pop	r25
    1ef2:	8f 91       	pop	r24
    1ef4:	3f 91       	pop	r19
    1ef6:	2f 91       	pop	r18
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti
    OCR3A = OCR3A - volume;
    
    //if(OCR3A < 0) OCR3A = 0;
    //if(OCR3A > 200) OCR3A = 200;
    
    if (OCR3A < 100) alarm_state = 0; //mute mode
    1f02:	10 92 01 01 	sts	0x0101, r1
    1f06:	f4 cf       	rjmp	.-24     	; 0x1ef0 <__vector_26+0x4e>

00001f08 <__vector_21>:
// Everytime the interrupt is called, the ADC reads voltage from the photoresistor
// voltage divider. Then, the ADC integer value is fed into a lookup table, and
// OCR2 will have its value set accordingly. The dimming occurs through comparison
// between OCR2 and TCNT2.
//***********************************************************************/
ISR(ADC_vect){
    1f08:	1f 92       	push	r1
    1f0a:	0f 92       	push	r0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	0f 92       	push	r0
    1f10:	11 24       	eor	r1, r1
    1f12:	8f 93       	push	r24
    1f14:	9f 93       	push	r25
    
    uint8_t adc_out;
    adc_out = ADCH; //ADCL and ADCH, but only 8 bits needed
    1f16:	85 b1       	in	r24, 0x05	; 5
    
    //look up table
    
    if(adc_out >= 0 && adc_out <= 15) {OCR2 = 255;}
    1f18:	80 31       	cpi	r24, 0x10	; 16
    1f1a:	10 f4       	brcc	.+4      	; 0x1f20 <__vector_21+0x18>
    1f1c:	9f ef       	ldi	r25, 0xFF	; 255
    1f1e:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 16 && adc_out <= 31) {OCR2 = 240;}
    1f20:	90 ef       	ldi	r25, 0xF0	; 240
    1f22:	98 0f       	add	r25, r24
    1f24:	90 31       	cpi	r25, 0x10	; 16
    1f26:	10 f4       	brcc	.+4      	; 0x1f2c <__vector_21+0x24>
    1f28:	90 ef       	ldi	r25, 0xF0	; 240
    1f2a:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 31 && adc_out <= 46) {OCR2 = 225;}
    1f2c:	91 ee       	ldi	r25, 0xE1	; 225
    1f2e:	98 0f       	add	r25, r24
    1f30:	90 31       	cpi	r25, 0x10	; 16
    1f32:	10 f4       	brcc	.+4      	; 0x1f38 <__vector_21+0x30>
    1f34:	91 ee       	ldi	r25, 0xE1	; 225
    1f36:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 47 && adc_out <= 62) {OCR2 = 210;}
    1f38:	91 ed       	ldi	r25, 0xD1	; 209
    1f3a:	98 0f       	add	r25, r24
    1f3c:	90 31       	cpi	r25, 0x10	; 16
    1f3e:	10 f4       	brcc	.+4      	; 0x1f44 <__vector_21+0x3c>
    1f40:	92 ed       	ldi	r25, 0xD2	; 210
    1f42:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 63 && adc_out <= 78) {OCR2 = 195;}
    1f44:	91 ec       	ldi	r25, 0xC1	; 193
    1f46:	98 0f       	add	r25, r24
    1f48:	90 31       	cpi	r25, 0x10	; 16
    1f4a:	10 f4       	brcc	.+4      	; 0x1f50 <__vector_21+0x48>
    1f4c:	93 ec       	ldi	r25, 0xC3	; 195
    1f4e:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 79 && adc_out <= 94) {OCR2 = 180;}
    1f50:	91 eb       	ldi	r25, 0xB1	; 177
    1f52:	98 0f       	add	r25, r24
    1f54:	90 31       	cpi	r25, 0x10	; 16
    1f56:	10 f4       	brcc	.+4      	; 0x1f5c <__vector_21+0x54>
    1f58:	94 eb       	ldi	r25, 0xB4	; 180
    1f5a:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 95 && adc_out <= 110) {OCR2 = 165;}
    1f5c:	91 ea       	ldi	r25, 0xA1	; 161
    1f5e:	98 0f       	add	r25, r24
    1f60:	90 31       	cpi	r25, 0x10	; 16
    1f62:	10 f4       	brcc	.+4      	; 0x1f68 <__vector_21+0x60>
    1f64:	95 ea       	ldi	r25, 0xA5	; 165
    1f66:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 110 && adc_out <= 125) {OCR2 = 150;}
    1f68:	92 e9       	ldi	r25, 0x92	; 146
    1f6a:	98 0f       	add	r25, r24
    1f6c:	90 31       	cpi	r25, 0x10	; 16
    1f6e:	10 f4       	brcc	.+4      	; 0x1f74 <__vector_21+0x6c>
    1f70:	96 e9       	ldi	r25, 0x96	; 150
    1f72:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 126 && adc_out <= 141) {OCR2 = 135;}
    1f74:	92 e8       	ldi	r25, 0x82	; 130
    1f76:	98 0f       	add	r25, r24
    1f78:	90 31       	cpi	r25, 0x10	; 16
    1f7a:	10 f4       	brcc	.+4      	; 0x1f80 <__vector_21+0x78>
    1f7c:	97 e8       	ldi	r25, 0x87	; 135
    1f7e:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 142 && adc_out <= 157) {OCR2 = 120;}
    1f80:	92 e7       	ldi	r25, 0x72	; 114
    1f82:	98 0f       	add	r25, r24
    1f84:	90 31       	cpi	r25, 0x10	; 16
    1f86:	10 f4       	brcc	.+4      	; 0x1f8c <__vector_21+0x84>
    1f88:	98 e7       	ldi	r25, 0x78	; 120
    1f8a:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 158 && adc_out <= 173) {OCR2 = 105;}
    1f8c:	92 e6       	ldi	r25, 0x62	; 98
    1f8e:	98 0f       	add	r25, r24
    1f90:	90 31       	cpi	r25, 0x10	; 16
    1f92:	10 f4       	brcc	.+4      	; 0x1f98 <__vector_21+0x90>
    1f94:	99 e6       	ldi	r25, 0x69	; 105
    1f96:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 174 && adc_out <= 189) {OCR2 = 90;}
    1f98:	92 e5       	ldi	r25, 0x52	; 82
    1f9a:	98 0f       	add	r25, r24
    1f9c:	90 31       	cpi	r25, 0x10	; 16
    1f9e:	10 f4       	brcc	.+4      	; 0x1fa4 <__vector_21+0x9c>
    1fa0:	9a e5       	ldi	r25, 0x5A	; 90
    1fa2:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 190 && adc_out <= 205) {OCR2 = 75;}
    1fa4:	92 e4       	ldi	r25, 0x42	; 66
    1fa6:	98 0f       	add	r25, r24
    1fa8:	90 31       	cpi	r25, 0x10	; 16
    1faa:	10 f4       	brcc	.+4      	; 0x1fb0 <__vector_21+0xa8>
    1fac:	9b e4       	ldi	r25, 0x4B	; 75
    1fae:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 206 && adc_out <= 221) {OCR2 = 60;}
    1fb0:	92 e3       	ldi	r25, 0x32	; 50
    1fb2:	98 0f       	add	r25, r24
    1fb4:	90 31       	cpi	r25, 0x10	; 16
    1fb6:	10 f4       	brcc	.+4      	; 0x1fbc <__vector_21+0xb4>
    1fb8:	9c e3       	ldi	r25, 0x3C	; 60
    1fba:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 222 && adc_out <= 237) {OCR2 = 45;}
    1fbc:	92 e2       	ldi	r25, 0x22	; 34
    1fbe:	98 0f       	add	r25, r24
    1fc0:	90 31       	cpi	r25, 0x10	; 16
    1fc2:	10 f4       	brcc	.+4      	; 0x1fc8 <__vector_21+0xc0>
    1fc4:	9d e2       	ldi	r25, 0x2D	; 45
    1fc6:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 238 && adc_out <= 253) {OCR2 = 30;}
    1fc8:	8e 5e       	subi	r24, 0xEE	; 238
    1fca:	80 31       	cpi	r24, 0x10	; 16
    1fcc:	10 f4       	brcc	.+4      	; 0x1fd2 <__vector_21+0xca>
    1fce:	8e e1       	ldi	r24, 0x1E	; 30
    1fd0:	83 bd       	out	0x23, r24	; 35
    if(adc_out >= 206 && adc_out <= 221) {OCR2 = 160;}
    if(adc_out >= 222 && adc_out <= 237) {OCR2 = 170;}
    if(adc_out >= 238 && adc_out <= 253) {OCR2 = 180;}
    */
    
}
    1fd2:	9f 91       	pop	r25
    1fd4:	8f 91       	pop	r24
    1fd6:	0f 90       	pop	r0
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	0f 90       	pop	r0
    1fdc:	1f 90       	pop	r1
    1fde:	18 95       	reti

00001fe0 <run_alarm>:
//***********************************************************************************
//                                      run_alarm
// when called, runs the alarm, using case statements from kellen_music.c as the audio
//***********************************************************************************
void run_alarm() {
    if (alarm == 0) {
    1fe0:	80 91 ab 01 	lds	r24, 0x01AB
    1fe4:	88 23       	and	r24, r24
    1fe6:	89 f0       	breq	.+34     	; 0x200a <run_alarm+0x2a>
        alarm_state = 1;
        alarm = 1;
        stop = 0;
    }
    else {  // run alarm
        ms++;
    1fe8:	80 91 ee 01 	lds	r24, 0x01EE
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	80 93 ee 01 	sts	0x01EE, r24
        if(ms % 8 == 0) beat++;   //play notes (64th notes)
    1ff2:	87 70       	andi	r24, 0x07	; 7
    1ff4:	49 f4       	brne	.+18     	; 0x2008 <run_alarm+0x28>
    1ff6:	80 91 fc 01 	lds	r24, 0x01FC
    1ffa:	90 91 fd 01 	lds	r25, 0x01FD
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	90 93 fd 01 	sts	0x01FD, r25
    2004:	80 93 fc 01 	sts	0x01FC, r24
    2008:	08 95       	ret
//                                      run_alarm
// when called, runs the alarm, using case statements from kellen_music.c as the audio
//***********************************************************************************
void run_alarm() {
    if (alarm == 0) {
        music_on();
    200a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <music_on>
        alarm_state = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	80 93 01 01 	sts	0x0101, r24
        alarm = 1;
    2014:	80 93 ab 01 	sts	0x01AB, r24
        stop = 0;
    2018:	10 92 aa 01 	sts	0x01AA, r1
    201c:	08 95       	ret

0000201e <alarm_mode>:
// Runs the alarm again after the snooze method has been called.
//***********************************************************************************
void alarm_mode() {
    
    //24hr mode (24hr mode alarm / 12hr mode alarm at p.m.)
    if ((time_notation_flag == 0) && (am_pm_flag == 0)) {
    201e:	80 91 ad 01 	lds	r24, 0x01AD
    2022:	81 11       	cpse	r24, r1
    2024:	1d c0       	rjmp	.+58     	; 0x2060 <alarm_mode+0x42>
    2026:	80 91 ac 01 	lds	r24, 0x01AC
    202a:	81 11       	cpse	r24, r1
    202c:	1b c0       	rjmp	.+54     	; 0x2064 <alarm_mode+0x46>
        if ((displayBits & 0x10) != 0x10) {    //24hr mode
    202e:	80 91 ba 01 	lds	r24, 0x01BA
            if ((minutes == alarm_m) && (hours == (alarm_h))) {
    2032:	90 91 b6 01 	lds	r25, 0x01B6
//***********************************************************************************
void alarm_mode() {
    
    //24hr mode (24hr mode alarm / 12hr mode alarm at p.m.)
    if ((time_notation_flag == 0) && (am_pm_flag == 0)) {
        if ((displayBits & 0x10) != 0x10) {    //24hr mode
    2036:	84 fd       	sbrc	r24, 4
    2038:	3c c0       	rjmp	.+120    	; 0x20b2 <alarm_mode+0x94>
            if ((minutes == alarm_m) && (hours == (alarm_h))) {
    203a:	80 91 af 01 	lds	r24, 0x01AF
    203e:	98 17       	cp	r25, r24
    2040:	09 f4       	brne	.+2      	; 0x2044 <alarm_mode+0x26>
    2042:	47 c0       	rjmp	.+142    	; 0x20d2 <alarm_mode+0xb4>
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    2044:	10 92 e9 01 	sts	0x01E9, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    2048:	8e b5       	in	r24, 0x2e	; 46
    204a:	8c 7f       	andi	r24, 0xFC	; 252
    204c:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    204e:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	80 93 df 01 	sts	0x01DF, r24
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm_state = 0;
    2056:	10 92 01 01 	sts	0x0101, r1
    alarm = 0;     // reset alarm
    205a:	10 92 ab 01 	sts	0x01AB, r1
    205e:	08 95       	ret
            if ((minutes == alarm_m) && (hours == (alarm_h - 12)))
                run_alarm();  // run alarm
            else stop_alarm();
        }
    }
    else if ((time_notation_flag == 1) && (am_pm_flag == 0)) { //12hr mode clock and 24hr mode alarm
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	29 f0       	breq	.+10     	; 0x206e <alarm_mode+0x50>
        else if ((hours == 12) && ((displayBits & 0x10) == 0x10)) {// at noon
            if ((minutes == alarm_m) && (hours == alarm_h)) run_alarm();
            else stop_alarm();
        }
    }
    else if (snooze_flag == 1) { //if S6 is pressed
    2064:	80 91 a9 01 	lds	r24, 0x01A9
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	e1 f0       	breq	.+56     	; 0x20a4 <alarm_mode+0x86>
    206c:	08 95       	ret
            if ((minutes == alarm_m) && (hours == (alarm_h - 12)))
                run_alarm();  // run alarm
            else stop_alarm();
        }
    }
    else if ((time_notation_flag == 1) && (am_pm_flag == 0)) { //12hr mode clock and 24hr mode alarm
    206e:	80 91 ac 01 	lds	r24, 0x01AC
    2072:	81 11       	cpse	r24, r1
    2074:	f7 cf       	rjmp	.-18     	; 0x2064 <alarm_mode+0x46>
        if ((hours == 12) && ((displayBits & 0x20) == 0x20)) { // at midnights
    2076:	20 91 b7 01 	lds	r18, 0x01B7
    207a:	80 91 ba 01 	lds	r24, 0x01BA
    207e:	2c 30       	cpi	r18, 0x0C	; 12
    2080:	99 f1       	breq	.+102    	; 0x20e8 <alarm_mode+0xca>
            if ((minutes == alarm_m) && (hours == (alarm_h + 12))) run_alarm();
            else stop_alarm();
        }
        else if ((displayBits & 0x20) == 0x20) {  // from 1:00 am to 11:59 am
    2082:	85 ff       	sbrs	r24, 5
    2084:	4c c0       	rjmp	.+152    	; 0x211e <alarm_mode+0x100>
            if ((minutes == alarm_m) && (hours == (alarm_h + 12))) run_alarm();
    2086:	90 91 b6 01 	lds	r25, 0x01B6
    208a:	80 91 af 01 	lds	r24, 0x01AF
    208e:	98 13       	cpse	r25, r24
    2090:	d9 cf       	rjmp	.-78     	; 0x2044 <alarm_mode+0x26>
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	80 91 ae 01 	lds	r24, 0x01AE
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0c 96       	adiw	r24, 0x0c	; 12
    209c:	28 17       	cp	r18, r24
    209e:	39 07       	cpc	r19, r25
    20a0:	89 f6       	brne	.-94     	; 0x2044 <alarm_mode+0x26>
    20a2:	05 c0       	rjmp	.+10     	; 0x20ae <alarm_mode+0x90>
            if ((minutes == alarm_m) && (hours == alarm_h)) run_alarm();
            else stop_alarm();
        }
    }
    else if (snooze_flag == 1) { //if S6 is pressed
        song++;      //switch to next song
    20a4:	80 91 ed 01 	lds	r24, 0x01ED
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
    20aa:	80 93 ed 01 	sts	0x01ED, r24
        run_alarm(); //run alarm again
    20ae:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <run_alarm>
                else stop_alarm();  // stop alarm after running for 1 minute
            }
            else stop_alarm();  // stop alarm after running 1 min
        }
        else if ((displayBits & 0x10) == 0x10) {  //from 1:00 pm to 11:59 pm
            if ((minutes == alarm_m) && (hours == (alarm_h - 12)))
    20b2:	80 91 af 01 	lds	r24, 0x01AF
    20b6:	98 13       	cpse	r25, r24
    20b8:	c5 cf       	rjmp	.-118    	; 0x2044 <alarm_mode+0x26>
    20ba:	20 91 b7 01 	lds	r18, 0x01B7
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	80 91 ae 01 	lds	r24, 0x01AE
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	0c 97       	sbiw	r24, 0x0c	; 12
    20c8:	28 17       	cp	r18, r24
    20ca:	39 07       	cpc	r19, r25
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <alarm_mode+0xb2>
    20ce:	ba cf       	rjmp	.-140    	; 0x2044 <alarm_mode+0x26>
    20d0:	ee cf       	rjmp	.-36     	; 0x20ae <alarm_mode+0x90>
void alarm_mode() {
    
    //24hr mode (24hr mode alarm / 12hr mode alarm at p.m.)
    if ((time_notation_flag == 0) && (am_pm_flag == 0)) {
        if ((displayBits & 0x10) != 0x10) {    //24hr mode
            if ((minutes == alarm_m) && (hours == (alarm_h))) {
    20d2:	90 91 b7 01 	lds	r25, 0x01B7
    20d6:	80 91 ae 01 	lds	r24, 0x01AE
    20da:	98 13       	cpse	r25, r24
    20dc:	b3 cf       	rjmp	.-154    	; 0x2044 <alarm_mode+0x26>
                if (stop == 0)  run_alarm();  // run alarm
    20de:	80 91 aa 01 	lds	r24, 0x01AA
    20e2:	81 11       	cpse	r24, r1
    20e4:	af cf       	rjmp	.-162    	; 0x2044 <alarm_mode+0x26>
    20e6:	e3 cf       	rjmp	.-58     	; 0x20ae <alarm_mode+0x90>
                run_alarm();  // run alarm
            else stop_alarm();
        }
    }
    else if ((time_notation_flag == 1) && (am_pm_flag == 0)) { //12hr mode clock and 24hr mode alarm
        if ((hours == 12) && ((displayBits & 0x20) == 0x20)) { // at midnights
    20e8:	85 ff       	sbrs	r24, 5
    20ea:	0b c0       	rjmp	.+22     	; 0x2102 <alarm_mode+0xe4>
            if ((minutes == alarm_m) && (hours == (alarm_h + 12))) run_alarm();
    20ec:	90 91 b6 01 	lds	r25, 0x01B6
    20f0:	80 91 af 01 	lds	r24, 0x01AF
    20f4:	98 13       	cpse	r25, r24
    20f6:	a6 cf       	rjmp	.-180    	; 0x2044 <alarm_mode+0x26>
    20f8:	80 91 ae 01 	lds	r24, 0x01AE
    20fc:	81 11       	cpse	r24, r1
    20fe:	a2 cf       	rjmp	.-188    	; 0x2044 <alarm_mode+0x26>
    2100:	d6 cf       	rjmp	.-84     	; 0x20ae <alarm_mode+0x90>
        }
        else if ((displayBits & 0x20) == 0x20) {  // from 1:00 am to 11:59 am
            if ((minutes == alarm_m) && (hours == (alarm_h + 12))) run_alarm();
            else stop_alarm();
        }
        else if ((hours == 12) && ((displayBits & 0x10) == 0x10)) {// at noon
    2102:	84 ff       	sbrs	r24, 4
    2104:	b3 cf       	rjmp	.-154    	; 0x206c <alarm_mode+0x4e>
            if ((minutes == alarm_m) && (hours == alarm_h)) run_alarm();
    2106:	90 91 b6 01 	lds	r25, 0x01B6
    210a:	80 91 af 01 	lds	r24, 0x01AF
    210e:	98 13       	cpse	r25, r24
    2110:	99 cf       	rjmp	.-206    	; 0x2044 <alarm_mode+0x26>
    2112:	80 91 ae 01 	lds	r24, 0x01AE
    2116:	8c 30       	cpi	r24, 0x0C	; 12
    2118:	09 f0       	breq	.+2      	; 0x211c <alarm_mode+0xfe>
    211a:	94 cf       	rjmp	.-216    	; 0x2044 <alarm_mode+0x26>
    211c:	c8 cf       	rjmp	.-112    	; 0x20ae <alarm_mode+0x90>
    211e:	08 95       	ret

00002120 <clk_count>:
//    am_pm_flag = 0 ---- the time changed from 11:59 a.m. to 12:00 p.m.
//    am_pm_flag = 1 ---- the time changed from 12:59 p.m. to 1:00 p.m.
//***********************************************************************/
void clk_count(uint8_t timer1) {
    
    if ((timer1 % 128) == 0) {
    2120:	8f 77       	andi	r24, 0x7F	; 127
    2122:	89 f4       	brne	.+34     	; 0x2146 <clk_count+0x26>
        colon_state = !colon_state; //blinks or blanks the colon_state every second
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	80 91 f6 01 	lds	r24, 0x01F6
    212a:	81 11       	cpse	r24, r1
    212c:	38 c0       	rjmp	.+112    	; 0x219e <clk_count+0x7e>
    212e:	90 93 f6 01 	sts	0x01F6, r25
        seconds += 1;
    2132:	80 91 b5 01 	lds	r24, 0x01B5
    2136:	8f 5f       	subi	r24, 0xFF	; 255
    2138:	80 93 b5 01 	sts	0x01B5, r24
        if (colon_state == 0) digit_data[2] = 10; //lights up colon_state
    213c:	91 11       	cpse	r25, r1
    213e:	2b c0       	rjmp	.+86     	; 0x2196 <clk_count+0x76>
    2140:	8a e0       	ldi	r24, 0x0A	; 10
    2142:	80 93 e6 01 	sts	0x01E6, r24
        else digit_data[2] = 11;  //blanks out colon_state
    }
    
    //handles time ticking increments and rollovers
    if (inc_multiple == 0) {
    2146:	80 91 0e 02 	lds	r24, 0x020E
    214a:	81 11       	cpse	r24, r1
    214c:	15 c0       	rjmp	.+42     	; 0x2178 <clk_count+0x58>
        if (seconds == 60)
    214e:	80 91 b5 01 	lds	r24, 0x01B5
    2152:	8c 33       	cpi	r24, 0x3C	; 60
    2154:	09 f4       	brne	.+2      	; 0x2158 <clk_count+0x38>
    2156:	67 c0       	rjmp	.+206    	; 0x2226 <clk_count+0x106>
                minutes = 0;
                if (hours == 24) hours = 0;
            }
        }
        
        alarm_mode();  //compare clock time with alarm time
    2158:	0e 94 0f 10 	call	0x201e	; 0x201e <alarm_mode>
        
        if (s4_switch == 1) {       //changes from 24hr to 12hr
    215c:	80 91 b1 01 	lds	r24, 0x01B1
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	09 f4       	brne	.+2      	; 0x2166 <clk_count+0x46>
    2164:	4c c0       	rjmp	.+152    	; 0x21fe <clk_count+0xde>
            }
            else if ((hours > 0) && (hours <= 11) && ((displayBits & 0x10) != 0x10)) am_or_pm = 0; //morning
                time_notation = 1;
        }
        
        if (s4_switch == 0) {       //changes from 12hr to 24hr
    2166:	81 11       	cpse	r24, r1
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <clk_count+0x54>
            if (time_notation == 1) {
    216a:	80 91 dc 01 	lds	r24, 0x01DC
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	09 f4       	brne	.+2      	; 0x2174 <clk_count+0x54>
    2172:	8c c0       	rjmp	.+280    	; 0x228c <clk_count+0x16c>
    2174:	80 91 0e 02 	lds	r24, 0x020E
                am_or_pm = 2;           //pm
            }
        }
    }
    
    if ((inc_multiple == 1) && (clock_mode == 1)) {  // set minutes
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	a1 f0       	breq	.+40     	; 0x21a4 <clk_count+0x84>
        else if (alarm_h == 24) alarm_h -= 24;
        else alarm_h = 23;
    }
    
    //bar graph showing am or pm
    switch (am_or_pm) {
    217c:	80 91 02 01 	lds	r24, 0x0102
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	b1 f1       	breq	.+108    	; 0x21f0 <clk_count+0xd0>
    2184:	68 f1       	brcs	.+90     	; 0x21e0 <clk_count+0xc0>
    2186:	82 30       	cpi	r24, 0x02	; 2
    2188:	61 f4       	brne	.+24     	; 0x21a2 <clk_count+0x82>
        case 0: displayBits &= 0x8F; displayBits |= 0x20; break; // am
        case 1: displayBits &= 0x8F; displayBits |= 0x10; break; // pm
        case 2: displayBits &= 0x8F; break;
    218a:	80 91 ba 01 	lds	r24, 0x01BA
    218e:	8f 78       	andi	r24, 0x8F	; 143
    2190:	80 93 ba 01 	sts	0x01BA, r24
    2194:	08 95       	ret
    
    if ((timer1 % 128) == 0) {
        colon_state = !colon_state; //blinks or blanks the colon_state every second
        seconds += 1;
        if (colon_state == 0) digit_data[2] = 10; //lights up colon_state
        else digit_data[2] = 11;  //blanks out colon_state
    2196:	8b e0       	ldi	r24, 0x0B	; 11
    2198:	80 93 e6 01 	sts	0x01E6, r24
    219c:	d4 cf       	rjmp	.-88     	; 0x2146 <clk_count+0x26>
//    am_pm_flag = 1 ---- the time changed from 12:59 p.m. to 1:00 p.m.
//***********************************************************************/
void clk_count(uint8_t timer1) {
    
    if ((timer1 % 128) == 0) {
        colon_state = !colon_state; //blinks or blanks the colon_state every second
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	c6 cf       	rjmp	.-116    	; 0x212e <clk_count+0xe>
    21a2:	08 95       	ret
                am_or_pm = 2;           //pm
            }
        }
    }
    
    if ((inc_multiple == 1) && (clock_mode == 1)) {  // set minutes
    21a4:	90 91 b3 01 	lds	r25, 0x01B3
    21a8:	91 30       	cpi	r25, 0x01	; 1
    21aa:	09 f4       	brne	.+2      	; 0x21ae <clk_count+0x8e>
    21ac:	81 c0       	rjmp	.+258    	; 0x22b0 <clk_count+0x190>
        if ((minutes >= 0) && (minutes < 60)) minutes += count * count_sign * inc_multiple;
        else if (minutes == 60) minutes -= 60; //minute rollover
        else minutes -= 196;
    }
    
    if ((inc_multiple == 1) && (clock_mode == 2)) {   // set hours
    21ae:	92 30       	cpi	r25, 0x02	; 2
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <clk_count+0x94>
    21b2:	50 c0       	rjmp	.+160    	; 0x2254 <clk_count+0x134>
        else if (hours == 24) hours -= 24;
        else hours = 23;
    }
    
    // set alarm minutes
    if ((inc_multiple == 1) && (clock_mode == 3)) {
    21b4:	93 30       	cpi	r25, 0x03	; 3
    21b6:	09 f4       	brne	.+2      	; 0x21ba <clk_count+0x9a>
    21b8:	5e c0       	rjmp	.+188    	; 0x2276 <clk_count+0x156>
        else if (alarm_m == 60) alarm_m -= 60;
        else alarm_m -= 196;
    }
    
    // set alarm hours
    if ((inc_multiple == 1) && (clock_mode == 4)) {
    21ba:	94 30       	cpi	r25, 0x04	; 4
    21bc:	f9 f6       	brne	.-66     	; 0x217c <clk_count+0x5c>
        if (time_notation == 1) {              // 12hr mode
    21be:	80 91 dc 01 	lds	r24, 0x01DC
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <clk_count+0xa8>
    21c6:	de c0       	rjmp	.+444    	; 0x2384 <clk_count+0x264>
                    else am_pm_flag = 0;
                }
            }
            else if (alarm_h == 0) alarm_h = 12;   //1pm to noon
        }
        else if ((alarm_h >= 0) && (alarm_h < 24)) alarm_h += count * count_sign * inc_multiple;
    21c8:	80 91 ae 01 	lds	r24, 0x01AE
    21cc:	88 31       	cpi	r24, 0x18	; 24
    21ce:	08 f4       	brcc	.+2      	; 0x21d2 <clk_count+0xb2>
    21d0:	a8 c0       	rjmp	.+336    	; 0x2322 <clk_count+0x202>
        else if (alarm_h == 24) alarm_h -= 24;
    21d2:	88 31       	cpi	r24, 0x18	; 24
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <clk_count+0xb8>
    21d6:	32 c1       	rjmp	.+612    	; 0x243c <clk_count+0x31c>
        else alarm_h = 23;
    21d8:	87 e1       	ldi	r24, 0x17	; 23
    21da:	80 93 ae 01 	sts	0x01AE, r24
    21de:	ce cf       	rjmp	.-100    	; 0x217c <clk_count+0x5c>
    21e0:	90 91 ba 01 	lds	r25, 0x01BA
    }
    
    //bar graph showing am or pm
    switch (am_or_pm) {
        case 0: displayBits &= 0x8F; displayBits |= 0x20; break; // am
    21e4:	89 2f       	mov	r24, r25
    21e6:	8f 78       	andi	r24, 0x8F	; 143
    21e8:	80 62       	ori	r24, 0x20	; 32
    21ea:	80 93 ba 01 	sts	0x01BA, r24
    21ee:	08 95       	ret
    21f0:	80 91 ba 01 	lds	r24, 0x01BA
        case 1: displayBits &= 0x8F; displayBits |= 0x10; break; // pm
    21f4:	8f 78       	andi	r24, 0x8F	; 143
    21f6:	80 61       	ori	r24, 0x10	; 16
    21f8:	80 93 ba 01 	sts	0x01BA, r24
    21fc:	08 95       	ret
        }
        
        alarm_mode();  //compare clock time with alarm time
        
        if (s4_switch == 1) {       //changes from 24hr to 12hr
            if (hours >= 12) {      // 12:00/12:00 p.m. ~ 23:59/11:59 p.m.
    21fe:	90 91 b7 01 	lds	r25, 0x01B7
    2202:	9c 30       	cpi	r25, 0x0C	; 12
    2204:	08 f4       	brcc	.+2      	; 0x2208 <clk_count+0xe8>
    2206:	5f c0       	rjmp	.+190    	; 0x22c6 <clk_count+0x1a6>
                if (hours > 12) {
    2208:	9c 30       	cpi	r25, 0x0C	; 12
    220a:	09 f0       	breq	.+2      	; 0x220e <clk_count+0xee>
    220c:	81 c0       	rjmp	.+258    	; 0x2310 <clk_count+0x1f0>
                    else {
                        hours -= 12; //  noon
                        am_or_pm = 1;    //pm
                    }
                }
                else if (time_notation_flag != 1) {
    220e:	90 91 ad 01 	lds	r25, 0x01AD
    2212:	91 30       	cpi	r25, 0x01	; 1
    2214:	11 f0       	breq	.+4      	; 0x221a <clk_count+0xfa>
                    hours = 12;
                    am_or_pm = 1;        //pm
    2216:	80 93 02 01 	sts	0x0102, r24
                hours += 12;
                time_notation_flag = 1;
                am_or_pm = 0;          //am
            }
            else if ((hours > 0) && (hours <= 11) && ((displayBits & 0x10) != 0x10)) am_or_pm = 0; //morning
                time_notation = 1;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	80 93 dc 01 	sts	0x01DC, r24
    2220:	80 91 0e 02 	lds	r24, 0x020E
    2224:	a9 cf       	rjmp	.-174    	; 0x2178 <clk_count+0x58>
    
    //handles time ticking increments and rollovers
    if (inc_multiple == 0) {
        if (seconds == 60)
        {
            minutes += 1;
    2226:	80 91 b6 01 	lds	r24, 0x01B6
    222a:	8f 5f       	subi	r24, 0xFF	; 255
    222c:	80 93 b6 01 	sts	0x01B6, r24
            seconds = 0;
    2230:	10 92 b5 01 	sts	0x01B5, r1
            if (minutes == 60) {
    2234:	8c 33       	cpi	r24, 0x3C	; 60
    2236:	09 f0       	breq	.+2      	; 0x223a <clk_count+0x11a>
    2238:	8f cf       	rjmp	.-226    	; 0x2158 <clk_count+0x38>
                hours++;
    223a:	80 91 b7 01 	lds	r24, 0x01B7
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	80 93 b7 01 	sts	0x01B7, r24
                minutes = 0;
    2244:	10 92 b6 01 	sts	0x01B6, r1
                if (hours == 24) hours = 0;
    2248:	88 31       	cpi	r24, 0x18	; 24
    224a:	09 f0       	breq	.+2      	; 0x224e <clk_count+0x12e>
    224c:	85 cf       	rjmp	.-246    	; 0x2158 <clk_count+0x38>
    224e:	10 92 b7 01 	sts	0x01B7, r1
    2252:	82 cf       	rjmp	.-252    	; 0x2158 <clk_count+0x38>
        else if (minutes == 60) minutes -= 60; //minute rollover
        else minutes -= 196;
    }
    
    if ((inc_multiple == 1) && (clock_mode == 2)) {   // set hours
        if (time_notation == 1) {                     // 12hr mode
    2254:	90 91 dc 01 	lds	r25, 0x01DC
    2258:	91 30       	cpi	r25, 0x01	; 1
    225a:	09 f4       	brne	.+2      	; 0x225e <clk_count+0x13e>
    225c:	76 c0       	rjmp	.+236    	; 0x234a <clk_count+0x22a>
                    else am_pm_flag = 0;
                }
            }
            else if (hours == 0) hours = 12;   //1pm to noon
        }
        else if ((hours >= 0) && (hours < 24)) hours += count * count_sign * inc_multiple;
    225e:	80 91 b7 01 	lds	r24, 0x01B7
    2262:	88 31       	cpi	r24, 0x18	; 24
    2264:	08 f4       	brcc	.+2      	; 0x2268 <clk_count+0x148>
    2266:	67 c0       	rjmp	.+206    	; 0x2336 <clk_count+0x216>
        else if (hours == 24) hours -= 24;
    2268:	88 31       	cpi	r24, 0x18	; 24
    226a:	09 f4       	brne	.+2      	; 0x226e <clk_count+0x14e>
    226c:	ea c0       	rjmp	.+468    	; 0x2442 <clk_count+0x322>
        else hours = 23;
    226e:	87 e1       	ldi	r24, 0x17	; 23
    2270:	80 93 b7 01 	sts	0x01B7, r24
    2274:	83 cf       	rjmp	.-250    	; 0x217c <clk_count+0x5c>
    }
    
    // set alarm minutes
    if ((inc_multiple == 1) && (clock_mode == 3)) {
        if ((alarm_m >= 0) && (alarm_m < 60)) alarm_m +=  count * count_sign * inc_multiple;
    2276:	80 91 af 01 	lds	r24, 0x01AF
    227a:	8c 33       	cpi	r24, 0x3C	; 60
    227c:	b8 f1       	brcs	.+110    	; 0x22ec <clk_count+0x1cc>
        else if (alarm_m == 60) alarm_m -= 60;
    227e:	8c 33       	cpi	r24, 0x3C	; 60
    2280:	09 f4       	brne	.+2      	; 0x2284 <clk_count+0x164>
    2282:	a6 c0       	rjmp	.+332    	; 0x23d0 <clk_count+0x2b0>
        else alarm_m -= 196;
    2284:	84 5c       	subi	r24, 0xC4	; 196
    2286:	80 93 af 01 	sts	0x01AF, r24
    228a:	78 cf       	rjmp	.-272    	; 0x217c <clk_count+0x5c>
                time_notation = 1;
        }
        
        if (s4_switch == 0) {       //changes from 12hr to 24hr
            if (time_notation == 1) {
                if (hours == 12) {   // midnight
    228c:	80 91 b7 01 	lds	r24, 0x01B7
    2290:	8c 30       	cpi	r24, 0x0C	; 12
    2292:	09 f4       	brne	.+2      	; 0x2296 <clk_count+0x176>
    2294:	93 c0       	rjmp	.+294    	; 0x23bc <clk_count+0x29c>
                    if (time_notation_flag == 1) {
                        if (hours == 12) hours = 0;
                        time_notation_flag = 0;
                    }
                }
                else if ((hours != 12) && ((displayBits & 0x10) == 0x10))  hours += 12;
    2296:	90 91 ba 01 	lds	r25, 0x01BA
    229a:	94 ff       	sbrs	r25, 4
    229c:	03 c0       	rjmp	.+6      	; 0x22a4 <clk_count+0x184>
    229e:	84 5f       	subi	r24, 0xF4	; 244
    22a0:	80 93 b7 01 	sts	0x01B7, r24
                time_notation = 0;
    22a4:	10 92 dc 01 	sts	0x01DC, r1
                am_or_pm = 2;           //pm
    22a8:	82 e0       	ldi	r24, 0x02	; 2
    22aa:	80 93 02 01 	sts	0x0102, r24
    22ae:	62 cf       	rjmp	.-316    	; 0x2174 <clk_count+0x54>
            }
        }
    }
    
    if ((inc_multiple == 1) && (clock_mode == 1)) {  // set minutes
        if ((minutes >= 0) && (minutes < 60)) minutes += count * count_sign * inc_multiple;
    22b0:	80 91 b6 01 	lds	r24, 0x01B6
    22b4:	8c 33       	cpi	r24, 0x3C	; 60
    22b6:	80 f0       	brcs	.+32     	; 0x22d8 <clk_count+0x1b8>
        else if (minutes == 60) minutes -= 60; //minute rollover
    22b8:	8c 33       	cpi	r24, 0x3C	; 60
    22ba:	09 f4       	brne	.+2      	; 0x22be <clk_count+0x19e>
    22bc:	b7 c0       	rjmp	.+366    	; 0x242c <clk_count+0x30c>
        else minutes -= 196;
    22be:	84 5c       	subi	r24, 0xC4	; 196
    22c0:	80 93 b6 01 	sts	0x01B6, r24
    22c4:	5b cf       	rjmp	.-330    	; 0x217c <clk_count+0x5c>
                else if (time_notation_flag != 1) {
                    hours = 12;
                    am_or_pm = 1;        //pm
                }
            }
            else if (hours == 0) {     //00:00 to 12:00 am
    22c6:	99 23       	and	r25, r25
    22c8:	d9 f0       	breq	.+54     	; 0x2300 <clk_count+0x1e0>
                hours += 12;
                time_notation_flag = 1;
                am_or_pm = 0;          //am
            }
            else if ((hours > 0) && (hours <= 11) && ((displayBits & 0x10) != 0x10)) am_or_pm = 0; //morning
    22ca:	90 91 ba 01 	lds	r25, 0x01BA
    22ce:	94 fd       	sbrc	r25, 4
    22d0:	a4 cf       	rjmp	.-184    	; 0x221a <clk_count+0xfa>
    22d2:	10 92 02 01 	sts	0x0102, r1
    22d6:	a1 cf       	rjmp	.-190    	; 0x221a <clk_count+0xfa>
            }
        }
    }
    
    if ((inc_multiple == 1) && (clock_mode == 1)) {  // set minutes
        if ((minutes >= 0) && (minutes < 60)) minutes += count * count_sign * inc_multiple;
    22d8:	20 91 e3 01 	lds	r18, 0x01E3
    22dc:	90 91 04 01 	lds	r25, 0x0104
    22e0:	29 9f       	mul	r18, r25
    22e2:	80 0d       	add	r24, r0
    22e4:	11 24       	eor	r1, r1
    22e6:	80 93 b6 01 	sts	0x01B6, r24
    22ea:	48 cf       	rjmp	.-368    	; 0x217c <clk_count+0x5c>
        else hours = 23;
    }
    
    // set alarm minutes
    if ((inc_multiple == 1) && (clock_mode == 3)) {
        if ((alarm_m >= 0) && (alarm_m < 60)) alarm_m +=  count * count_sign * inc_multiple;
    22ec:	20 91 e3 01 	lds	r18, 0x01E3
    22f0:	90 91 04 01 	lds	r25, 0x0104
    22f4:	29 9f       	mul	r18, r25
    22f6:	80 0d       	add	r24, r0
    22f8:	11 24       	eor	r1, r1
    22fa:	80 93 af 01 	sts	0x01AF, r24
    22fe:	3e cf       	rjmp	.-388    	; 0x217c <clk_count+0x5c>
                    hours = 12;
                    am_or_pm = 1;        //pm
                }
            }
            else if (hours == 0) {     //00:00 to 12:00 am
                hours += 12;
    2300:	9c e0       	ldi	r25, 0x0C	; 12
    2302:	90 93 b7 01 	sts	0x01B7, r25
                time_notation_flag = 1;
    2306:	80 93 ad 01 	sts	0x01AD, r24
                am_or_pm = 0;          //am
    230a:	10 92 02 01 	sts	0x0102, r1
    230e:	85 cf       	rjmp	.-246    	; 0x221a <clk_count+0xfa>
        
        if (s4_switch == 1) {       //changes from 24hr to 12hr
            if (hours >= 12) {      // 12:00/12:00 p.m. ~ 23:59/11:59 p.m.
                if (hours > 12) {
                    
                    if (hours == 24) {  //midnight
    2310:	98 31       	cpi	r25, 0x18	; 24
    2312:	09 f4       	brne	.+2      	; 0x2316 <clk_count+0x1f6>
    2314:	8e c0       	rjmp	.+284    	; 0x2432 <clk_count+0x312>
                        hours = 0;
                        am_or_pm = 0;    //am
                    }
                    else {
                        hours -= 12; //  noon
    2316:	9c 50       	subi	r25, 0x0C	; 12
    2318:	90 93 b7 01 	sts	0x01B7, r25
                        am_or_pm = 1;    //pm
    231c:	80 93 02 01 	sts	0x0102, r24
    2320:	7c cf       	rjmp	.-264    	; 0x221a <clk_count+0xfa>
                    else am_pm_flag = 0;
                }
            }
            else if (alarm_h == 0) alarm_h = 12;   //1pm to noon
        }
        else if ((alarm_h >= 0) && (alarm_h < 24)) alarm_h += count * count_sign * inc_multiple;
    2322:	20 91 e3 01 	lds	r18, 0x01E3
    2326:	90 91 04 01 	lds	r25, 0x0104
    232a:	29 9f       	mul	r18, r25
    232c:	80 0d       	add	r24, r0
    232e:	11 24       	eor	r1, r1
    2330:	80 93 ae 01 	sts	0x01AE, r24
    2334:	23 cf       	rjmp	.-442    	; 0x217c <clk_count+0x5c>
                    else am_pm_flag = 0;
                }
            }
            else if (hours == 0) hours = 12;   //1pm to noon
        }
        else if ((hours >= 0) && (hours < 24)) hours += count * count_sign * inc_multiple;
    2336:	20 91 e3 01 	lds	r18, 0x01E3
    233a:	90 91 04 01 	lds	r25, 0x0104
    233e:	29 9f       	mul	r18, r25
    2340:	80 0d       	add	r24, r0
    2342:	11 24       	eor	r1, r1
    2344:	80 93 b7 01 	sts	0x01B7, r24
    2348:	19 cf       	rjmp	.-462    	; 0x217c <clk_count+0x5c>
        else minutes -= 196;
    }
    
    if ((inc_multiple == 1) && (clock_mode == 2)) {   // set hours
        if (time_notation == 1) {                     // 12hr mode
            if ((displayBits & 0x20) == 0x20) {    //at am
    234a:	90 91 ba 01 	lds	r25, 0x01BA
    234e:	95 ff       	sbrs	r25, 5
    2350:	58 c0       	rjmp	.+176    	; 0x2402 <clk_count+0x2e2>
                if ((hours >= 1) && (hours <= 12)) {
    2352:	90 91 b7 01 	lds	r25, 0x01B7
    2356:	2f ef       	ldi	r18, 0xFF	; 255
    2358:	29 0f       	add	r18, r25
    235a:	2c 30       	cpi	r18, 0x0C	; 12
    235c:	08 f0       	brcs	.+2      	; 0x2360 <clk_count+0x240>
    235e:	74 c0       	rjmp	.+232    	; 0x2448 <clk_count+0x328>
                    if (hours == 12) {
    2360:	9c 30       	cpi	r25, 0x0C	; 12
    2362:	09 f4       	brne	.+2      	; 0x2366 <clk_count+0x246>
    2364:	9a c0       	rjmp	.+308    	; 0x249a <clk_count+0x37a>
                            if (hours == 13) hours = 1;    // from 12am to 1am
                            else if (hours == 11) am_or_pm = 1;//from 12am to 11pm
                        }
                    }
                    else {
                        hours += count * count_sign * inc_multiple;
    2366:	20 91 e3 01 	lds	r18, 0x01E3
    236a:	80 91 04 01 	lds	r24, 0x0104
    236e:	28 9f       	mul	r18, r24
    2370:	90 0d       	add	r25, r0
    2372:	11 24       	eor	r1, r1
    2374:	90 93 b7 01 	sts	0x01B7, r25
                        if (hours == 12) am_pm_flag = 0; //11am to 12pm
    2378:	9c 30       	cpi	r25, 0x0C	; 12
    237a:	e9 f0       	breq	.+58     	; 0x23b6 <clk_count+0x296>
                        }
                    }
                    else {
                        alarm_h += count * count_sign * inc_multiple;
                        if (alarm_h == 12) am_pm_flag = 0; //11am to noon(pm)
                        else am_pm_flag = 1;  // am
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 93 ac 01 	sts	0x01AC, r24
    2382:	fc ce       	rjmp	.-520    	; 0x217c <clk_count+0x5c>
    }
    
    // set alarm hours
    if ((inc_multiple == 1) && (clock_mode == 4)) {
        if (time_notation == 1) {              // 12hr mode
            if ((displayBits & 0x20) == 0x20) {  //am
    2384:	90 91 ba 01 	lds	r25, 0x01BA
    2388:	95 ff       	sbrs	r25, 5
    238a:	25 c0       	rjmp	.+74     	; 0x23d6 <clk_count+0x2b6>
                if ((alarm_h >= 1) && (alarm_h <= 12)) {
    238c:	20 91 ae 01 	lds	r18, 0x01AE
    2390:	3f ef       	ldi	r19, 0xFF	; 255
    2392:	32 0f       	add	r19, r18
    2394:	3c 30       	cpi	r19, 0x0C	; 12
    2396:	08 f0       	brcs	.+2      	; 0x239a <clk_count+0x27a>
    2398:	5d c0       	rjmp	.+186    	; 0x2454 <clk_count+0x334>
                    if (alarm_h == 12) {
    239a:	2c 30       	cpi	r18, 0x0C	; 12
    239c:	09 f4       	brne	.+2      	; 0x23a0 <clk_count+0x280>
    239e:	aa c0       	rjmp	.+340    	; 0x24f4 <clk_count+0x3d4>
                            if (alarm_h == 13) alarm_h = 1;    // midnight to 1am
                            else if (alarm_h == 11) am_or_pm = 1; //midnight to 11pm
                        }
                    }
                    else {
                        alarm_h += count * count_sign * inc_multiple;
    23a0:	90 91 e3 01 	lds	r25, 0x01E3
    23a4:	80 91 04 01 	lds	r24, 0x0104
    23a8:	98 9f       	mul	r25, r24
    23aa:	20 0d       	add	r18, r0
    23ac:	11 24       	eor	r1, r1
    23ae:	20 93 ae 01 	sts	0x01AE, r18
                        if (alarm_h == 12) am_pm_flag = 0; //11am to noon(pm)
    23b2:	2c 30       	cpi	r18, 0x0C	; 12
    23b4:	19 f7       	brne	.-58     	; 0x237c <clk_count+0x25c>
    23b6:	10 92 ac 01 	sts	0x01AC, r1
    23ba:	e0 ce       	rjmp	.-576    	; 0x217c <clk_count+0x5c>
        }
        
        if (s4_switch == 0) {       //changes from 12hr to 24hr
            if (time_notation == 1) {
                if (hours == 12) {   // midnight
                    if (time_notation_flag == 1) {
    23bc:	80 91 ad 01 	lds	r24, 0x01AD
    23c0:	81 30       	cpi	r24, 0x01	; 1
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <clk_count+0x2a6>
    23c4:	6f cf       	rjmp	.-290    	; 0x22a4 <clk_count+0x184>
                        if (hours == 12) hours = 0;
    23c6:	10 92 b7 01 	sts	0x01B7, r1
                        time_notation_flag = 0;
    23ca:	10 92 ad 01 	sts	0x01AD, r1
    23ce:	6a cf       	rjmp	.-300    	; 0x22a4 <clk_count+0x184>
    }
    
    // set alarm minutes
    if ((inc_multiple == 1) && (clock_mode == 3)) {
        if ((alarm_m >= 0) && (alarm_m < 60)) alarm_m +=  count * count_sign * inc_multiple;
        else if (alarm_m == 60) alarm_m -= 60;
    23d0:	10 92 af 01 	sts	0x01AF, r1
    23d4:	d3 ce       	rjmp	.-602    	; 0x217c <clk_count+0x5c>
                        else am_pm_flag = 1;  // am
                    }
                }
                else if (alarm_h == 0) alarm_h = 12;    // 1 am to 12 am; 1pm to 12pm
            }
            else if  ((alarm_h >= 1) && (alarm_h <= 12)) { //pm
    23d6:	80 91 ae 01 	lds	r24, 0x01AE
    23da:	2f ef       	ldi	r18, 0xFF	; 255
    23dc:	28 0f       	add	r18, r24
    23de:	2c 30       	cpi	r18, 0x0C	; 12
    23e0:	08 f0       	brcs	.+2      	; 0x23e4 <clk_count+0x2c4>
    23e2:	3e c0       	rjmp	.+124    	; 0x2460 <clk_count+0x340>
                if (alarm_h == 12) {
    23e4:	8c 30       	cpi	r24, 0x0C	; 12
    23e6:	09 f4       	brne	.+2      	; 0x23ea <clk_count+0x2ca>
    23e8:	41 c0       	rjmp	.+130    	; 0x246c <clk_count+0x34c>
                        if (alarm_h == 13) alarm_h = 1;  //noon to 1pm
                        else if (alarm_h == 11) am_or_pm = 0;  // noon to 11am
                    }
                }
                else {
                    alarm_h += count * count_sign * inc_multiple;
    23ea:	20 91 e3 01 	lds	r18, 0x01E3
    23ee:	90 91 04 01 	lds	r25, 0x0104
    23f2:	29 9f       	mul	r18, r25
    23f4:	80 0d       	add	r24, r0
    23f6:	11 24       	eor	r1, r1
    23f8:	80 93 ae 01 	sts	0x01AE, r24
                    if (alarm_h == 12) am_pm_flag = 1;     //noon to 1pm
    23fc:	8c 30       	cpi	r24, 0x0C	; 12
    23fe:	d9 f6       	brne	.-74     	; 0x23b6 <clk_count+0x296>
    2400:	bd cf       	rjmp	.-134    	; 0x237c <clk_count+0x25c>
                        else am_pm_flag = 1;  //am
                    }
                }
                else if (hours == 0) hours = 12;  //hour decrement
            }
            else if  ((hours >= 1) && (hours <= 12)) { //pm
    2402:	80 91 b7 01 	lds	r24, 0x01B7
    2406:	9f ef       	ldi	r25, 0xFF	; 255
    2408:	98 0f       	add	r25, r24
    240a:	9c 30       	cpi	r25, 0x0C	; 12
    240c:	60 f5       	brcc	.+88     	; 0x2466 <clk_count+0x346>
                if (hours == 12) {
    240e:	8c 30       	cpi	r24, 0x0C	; 12
    2410:	09 f4       	brne	.+2      	; 0x2414 <clk_count+0x2f4>
    2412:	5a c0       	rjmp	.+180    	; 0x24c8 <clk_count+0x3a8>
                        if (hours == 13) hours = 1;  //noon to 1pm
                        else if (hours == 11) am_or_pm = 0;//noon to 11am
                    }
                }
                else {
                    hours += count * count_sign * inc_multiple;
    2414:	20 91 e3 01 	lds	r18, 0x01E3
    2418:	90 91 04 01 	lds	r25, 0x0104
    241c:	29 9f       	mul	r18, r25
    241e:	80 0d       	add	r24, r0
    2420:	11 24       	eor	r1, r1
    2422:	80 93 b7 01 	sts	0x01B7, r24
                    if (hours == 12) am_pm_flag = 1;//noon to 1pm
    2426:	8c 30       	cpi	r24, 0x0C	; 12
    2428:	31 f6       	brne	.-116    	; 0x23b6 <clk_count+0x296>
    242a:	a8 cf       	rjmp	.-176    	; 0x237c <clk_count+0x25c>
        }
    }
    
    if ((inc_multiple == 1) && (clock_mode == 1)) {  // set minutes
        if ((minutes >= 0) && (minutes < 60)) minutes += count * count_sign * inc_multiple;
        else if (minutes == 60) minutes -= 60; //minute rollover
    242c:	10 92 b6 01 	sts	0x01B6, r1
    2430:	a5 ce       	rjmp	.-694    	; 0x217c <clk_count+0x5c>
        if (s4_switch == 1) {       //changes from 24hr to 12hr
            if (hours >= 12) {      // 12:00/12:00 p.m. ~ 23:59/11:59 p.m.
                if (hours > 12) {
                    
                    if (hours == 24) {  //midnight
                        hours = 0;
    2432:	10 92 b7 01 	sts	0x01B7, r1
                        am_or_pm = 0;    //am
    2436:	10 92 02 01 	sts	0x0102, r1
    243a:	ef ce       	rjmp	.-546    	; 0x221a <clk_count+0xfa>
                }
            }
            else if (alarm_h == 0) alarm_h = 12;   //1pm to noon
        }
        else if ((alarm_h >= 0) && (alarm_h < 24)) alarm_h += count * count_sign * inc_multiple;
        else if (alarm_h == 24) alarm_h -= 24;
    243c:	10 92 ae 01 	sts	0x01AE, r1
    2440:	9d ce       	rjmp	.-710    	; 0x217c <clk_count+0x5c>
                }
            }
            else if (hours == 0) hours = 12;   //1pm to noon
        }
        else if ((hours >= 0) && (hours < 24)) hours += count * count_sign * inc_multiple;
        else if (hours == 24) hours -= 24;
    2442:	10 92 b7 01 	sts	0x01B7, r1
    2446:	9a ce       	rjmp	.-716    	; 0x217c <clk_count+0x5c>
                        hours += count * count_sign * inc_multiple;
                        if (hours == 12) am_pm_flag = 0; //11am to 12pm
                        else am_pm_flag = 1;  //am
                    }
                }
                else if (hours == 0) hours = 12;  //hour decrement
    2448:	91 11       	cpse	r25, r1
    244a:	98 ce       	rjmp	.-720    	; 0x217c <clk_count+0x5c>
    244c:	8c e0       	ldi	r24, 0x0C	; 12
    244e:	80 93 b7 01 	sts	0x01B7, r24
    2452:	94 ce       	rjmp	.-728    	; 0x217c <clk_count+0x5c>
                        alarm_h += count * count_sign * inc_multiple;
                        if (alarm_h == 12) am_pm_flag = 0; //11am to noon(pm)
                        else am_pm_flag = 1;  // am
                    }
                }
                else if (alarm_h == 0) alarm_h = 12;    // 1 am to 12 am; 1pm to 12pm
    2454:	21 11       	cpse	r18, r1
    2456:	92 ce       	rjmp	.-732    	; 0x217c <clk_count+0x5c>
    2458:	8c e0       	ldi	r24, 0x0C	; 12
    245a:	80 93 ae 01 	sts	0x01AE, r24
    245e:	8e ce       	rjmp	.-740    	; 0x217c <clk_count+0x5c>
                    alarm_h += count * count_sign * inc_multiple;
                    if (alarm_h == 12) am_pm_flag = 1;     //noon to 1pm
                    else am_pm_flag = 0;
                }
            }
            else if (alarm_h == 0) alarm_h = 12;   //1pm to noon
    2460:	88 23       	and	r24, r24
    2462:	d1 f3       	breq	.-12     	; 0x2458 <clk_count+0x338>
    2464:	8b ce       	rjmp	.-746    	; 0x217c <clk_count+0x5c>
                    hours += count * count_sign * inc_multiple;
                    if (hours == 12) am_pm_flag = 1;//noon to 1pm
                    else am_pm_flag = 0;
                }
            }
            else if (hours == 0) hours = 12;   //1pm to noon
    2466:	88 23       	and	r24, r24
    2468:	89 f3       	breq	.-30     	; 0x244c <clk_count+0x32c>
    246a:	88 ce       	rjmp	.-752    	; 0x217c <clk_count+0x5c>
                }
                else if (alarm_h == 0) alarm_h = 12;    // 1 am to 12 am; 1pm to 12pm
            }
            else if  ((alarm_h >= 1) && (alarm_h <= 12)) { //pm
                if (alarm_h == 12) {
                    if (am_pm_flag == 1) am_or_pm = 0;  //am
    246c:	80 91 ac 01 	lds	r24, 0x01AC
    2470:	81 30       	cpi	r24, 0x01	; 1
    2472:	81 f0       	breq	.+32     	; 0x2494 <clk_count+0x374>
                    else {
                        alarm_h += count * count_sign * inc_multiple;
    2474:	20 91 e3 01 	lds	r18, 0x01E3
    2478:	80 91 04 01 	lds	r24, 0x0104
    247c:	28 9f       	mul	r18, r24
    247e:	80 2d       	mov	r24, r0
    2480:	11 24       	eor	r1, r1
    2482:	84 5f       	subi	r24, 0xF4	; 244
    2484:	80 93 ae 01 	sts	0x01AE, r24
                        if (alarm_h == 13) alarm_h = 1;  //noon to 1pm
    2488:	8d 30       	cpi	r24, 0x0D	; 13
    248a:	09 f4       	brne	.+2      	; 0x248e <clk_count+0x36e>
    248c:	4a c0       	rjmp	.+148    	; 0x2522 <clk_count+0x402>
                        else if (alarm_h == 11) am_or_pm = 0;  // noon to 11am
    248e:	8b 30       	cpi	r24, 0x0B	; 11
    2490:	09 f0       	breq	.+2      	; 0x2494 <clk_count+0x374>
    2492:	74 ce       	rjmp	.-792    	; 0x217c <clk_count+0x5c>
    2494:	10 92 02 01 	sts	0x0102, r1
    2498:	a5 ce       	rjmp	.-694    	; 0x21e4 <clk_count+0xc4>
    if ((inc_multiple == 1) && (clock_mode == 2)) {   // set hours
        if (time_notation == 1) {                     // 12hr mode
            if ((displayBits & 0x20) == 0x20) {    //at am
                if ((hours >= 1) && (hours <= 12)) {
                    if (hours == 12) {
                        if (am_pm_flag == 0) am_or_pm = 1;  //noon
    249a:	90 91 ac 01 	lds	r25, 0x01AC
    249e:	99 23       	and	r25, r25
    24a0:	81 f0       	breq	.+32     	; 0x24c2 <clk_count+0x3a2>
                        else {
                            hours += count * count_sign * inc_multiple;
    24a2:	90 91 e3 01 	lds	r25, 0x01E3
    24a6:	80 91 04 01 	lds	r24, 0x0104
    24aa:	98 9f       	mul	r25, r24
    24ac:	80 2d       	mov	r24, r0
    24ae:	11 24       	eor	r1, r1
    24b0:	84 5f       	subi	r24, 0xF4	; 244
    24b2:	80 93 b7 01 	sts	0x01B7, r24
                            if (hours == 13) hours = 1;    // from 12am to 1am
    24b6:	8d 30       	cpi	r24, 0x0D	; 13
    24b8:	c1 f1       	breq	.+112    	; 0x252a <clk_count+0x40a>
                            else if (hours == 11) am_or_pm = 1;//from 12am to 11pm
    24ba:	8b 30       	cpi	r24, 0x0B	; 11
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <clk_count+0x3a0>
    24be:	5e ce       	rjmp	.-836    	; 0x217c <clk_count+0x5c>
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	80 93 02 01 	sts	0x0102, r24
    24c6:	5a ce       	rjmp	.-844    	; 0x217c <clk_count+0x5c>
                }
                else if (hours == 0) hours = 12;  //hour decrement
            }
            else if  ((hours >= 1) && (hours <= 12)) { //pm
                if (hours == 12) {
                    if (am_pm_flag == 1) am_or_pm = 0;  //12am
    24c8:	80 91 ac 01 	lds	r24, 0x01AC
    24cc:	81 30       	cpi	r24, 0x01	; 1
    24ce:	79 f0       	breq	.+30     	; 0x24ee <clk_count+0x3ce>
                    else {
                        hours += count * count_sign * inc_multiple;
    24d0:	90 91 e3 01 	lds	r25, 0x01E3
    24d4:	80 91 04 01 	lds	r24, 0x0104
    24d8:	98 9f       	mul	r25, r24
    24da:	80 2d       	mov	r24, r0
    24dc:	11 24       	eor	r1, r1
    24de:	84 5f       	subi	r24, 0xF4	; 244
    24e0:	80 93 b7 01 	sts	0x01B7, r24
                        if (hours == 13) hours = 1;  //noon to 1pm
    24e4:	8d 30       	cpi	r24, 0x0D	; 13
    24e6:	09 f1       	breq	.+66     	; 0x252a <clk_count+0x40a>
                        else if (hours == 11) am_or_pm = 0;//noon to 11am
    24e8:	8b 30       	cpi	r24, 0x0B	; 11
    24ea:	09 f0       	breq	.+2      	; 0x24ee <clk_count+0x3ce>
    24ec:	47 ce       	rjmp	.-882    	; 0x217c <clk_count+0x5c>
    24ee:	10 92 02 01 	sts	0x0102, r1
    24f2:	44 ce       	rjmp	.-888    	; 0x217c <clk_count+0x5c>
    if ((inc_multiple == 1) && (clock_mode == 4)) {
        if (time_notation == 1) {              // 12hr mode
            if ((displayBits & 0x20) == 0x20) {  //am
                if ((alarm_h >= 1) && (alarm_h <= 12)) {
                    if (alarm_h == 12) {
                        if (am_pm_flag == 0) am_or_pm = 1;      //noon
    24f4:	20 91 ac 01 	lds	r18, 0x01AC
    24f8:	22 23       	and	r18, r18
    24fa:	79 f0       	breq	.+30     	; 0x251a <clk_count+0x3fa>
                        else {
                            alarm_h += count * count_sign * inc_multiple;
    24fc:	30 91 e3 01 	lds	r19, 0x01E3
    2500:	20 91 04 01 	lds	r18, 0x0104
    2504:	32 9f       	mul	r19, r18
    2506:	20 2d       	mov	r18, r0
    2508:	11 24       	eor	r1, r1
    250a:	24 5f       	subi	r18, 0xF4	; 244
    250c:	20 93 ae 01 	sts	0x01AE, r18
                            if (alarm_h == 13) alarm_h = 1;    // midnight to 1am
    2510:	2d 30       	cpi	r18, 0x0D	; 13
    2512:	39 f0       	breq	.+14     	; 0x2522 <clk_count+0x402>
                            else if (alarm_h == 11) am_or_pm = 1; //midnight to 11pm
    2514:	2b 30       	cpi	r18, 0x0B	; 11
    2516:	09 f0       	breq	.+2      	; 0x251a <clk_count+0x3fa>
    2518:	31 ce       	rjmp	.-926    	; 0x217c <clk_count+0x5c>
    251a:	80 93 02 01 	sts	0x0102, r24
    251e:	89 2f       	mov	r24, r25
    2520:	69 ce       	rjmp	.-814    	; 0x21f4 <clk_count+0xd4>
                if ((alarm_h >= 1) && (alarm_h <= 12)) {
                    if (alarm_h == 12) {
                        if (am_pm_flag == 0) am_or_pm = 1;      //noon
                        else {
                            alarm_h += count * count_sign * inc_multiple;
                            if (alarm_h == 13) alarm_h = 1;    // midnight to 1am
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	80 93 ae 01 	sts	0x01AE, r24
    2528:	29 ce       	rjmp	.-942    	; 0x217c <clk_count+0x5c>
                if ((hours >= 1) && (hours <= 12)) {
                    if (hours == 12) {
                        if (am_pm_flag == 0) am_or_pm = 1;  //noon
                        else {
                            hours += count * count_sign * inc_multiple;
                            if (hours == 13) hours = 1;    // from 12am to 1am
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	80 93 b7 01 	sts	0x01B7, r24
    2530:	25 ce       	rjmp	.-950    	; 0x217c <clk_count+0x5c>

00002532 <stop_alarm>:
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    2532:	10 92 e9 01 	sts	0x01E9, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    2536:	8e b5       	in	r24, 0x2e	; 46
    2538:	8c 7f       	andi	r24, 0xFC	; 252
    253a:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    253c:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	80 93 df 01 	sts	0x01DF, r24
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm_state = 0;
    2544:	10 92 01 01 	sts	0x0101, r1
    alarm = 0;     // reset alarm
    2548:	10 92 ab 01 	sts	0x01AB, r1
    254c:	08 95       	ret

0000254e <snooze>:
// when called, alarm clock enters snooze modes
// alarm music is turned off automatically. No intervention from user needed
//***********************************************************************************
void snooze(uint8_t s7_timer) {
    
    if ((s7_timer % 128) == 0) { //if snooze button is pushed
    254e:	8f 77       	andi	r24, 0x7F	; 127
    2550:	59 f4       	brne	.+22     	; 0x2568 <snooze+0x1a>
        alarm_s += 1; //increment snooze count
    2552:	80 91 b0 01 	lds	r24, 0x01B0
    2556:	8f 5f       	subi	r24, 0xFF	; 255
    2558:	80 93 b0 01 	sts	0x01B0, r24
        if (alarm_s > 10) {    //wait 10s for alarm to buzz again
    255c:	8b 30       	cpi	r24, 0x0B	; 11
    255e:	20 f0       	brcs	.+8      	; 0x2568 <snooze+0x1a>
            if (alarm_s == 11) {
    2560:	8b 30       	cpi	r24, 0x0B	; 11
    2562:	19 f0       	breq	.+6      	; 0x256a <snooze+0x1c>
                LCD_Init();
                LCD_PutStr("Wake up!");
                LCD_MovCursorLn2();
                LCD_PutStr("Press S6 to snooze.");
            }
            else run_alarm();
    2564:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <run_alarm>
    2568:	08 95       	ret
    
    if ((s7_timer % 128) == 0) { //if snooze button is pushed
        alarm_s += 1; //increment snooze count
        if (alarm_s > 10) {    //wait 10s for alarm to buzz again
            if (alarm_s == 11) {
                run_alarm();
    256a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <run_alarm>
                LCD_Init();
    256e:	0e 94 75 18 	call	0x30ea	; 0x30ea <LCD_Init>
                LCD_PutStr("Wake up!");
    2572:	81 e1       	ldi	r24, 0x11	; 17
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
                LCD_MovCursorLn2();
    257a:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_MovCursorLn2>
                LCD_PutStr("Press S6 to snooze.");
    257e:	8a e1       	ldi	r24, 0x1A	; 26
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	0c 94 39 18 	jmp	0x3072	; 0x3072 <LCD_PutStr>

00002586 <mode_switch>:
// In mode 0, 3 and 4, incrementing timer means that clock runs in normal mode.
// In mode 1, 2 and snooze, incrementing s2_timer could blink some digit numbers
//***********************************************************************/
void mode_switch(uint8_t mode_change){
    
    if (mode_change) {
    2586:	88 23       	and	r24, r24
    2588:	b1 f0       	breq	.+44     	; 0x25b6 <mode_switch+0x30>
        if (clock_mode == 0) {   //push S0
    258a:	80 91 b3 01 	lds	r24, 0x01B3
    258e:	81 11       	cpse	r24, r1
    2590:	a2 c0       	rjmp	.+324    	; 0x26d6 <mode_switch+0x150>
            timer++;             //increment count every 7.8125 ms
    2592:	80 91 03 01 	lds	r24, 0x0103
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	80 93 03 01 	sts	0x0103, r24
            inc_multiple = 0;
    259c:	10 92 0e 02 	sts	0x020E, r1
            displayBits &= 0x70;
    25a0:	80 91 ba 01 	lds	r24, 0x01BA
    25a4:	80 77       	andi	r24, 0x70	; 112
            displayBits |= 0x01;
    25a6:	81 60       	ori	r24, 0x01	; 1
    25a8:	80 93 ba 01 	sts	0x01BA, r24
            timer++;
            displayBits &= 0x70;
            displayBits |= 0x04;
        }
        
        if (snooze_flag == 1) { //push S6
    25ac:	80 91 a9 01 	lds	r24, 0x01A9
    25b0:	81 30       	cpi	r24, 0x01	; 1
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <mode_switch+0x30>
    25b4:	b1 c0       	rjmp	.+354    	; 0x2718 <mode_switch+0x192>
            s2_timer++;
            snooze(s2_timer);
        }
    }
    clk_count(timer); //allows user to switch time mode displayed
    25b6:	80 91 03 01 	lds	r24, 0x0103
    25ba:	0e 94 90 10 	call	0x2120	; 0x2120 <clk_count>
    
    switch (clock_mode) {
    25be:	80 91 b3 01 	lds	r24, 0x01B3
    25c2:	82 30       	cpi	r24, 0x02	; 2
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <mode_switch+0x42>
    25c6:	b0 c0       	rjmp	.+352    	; 0x2728 <mode_switch+0x1a2>
    25c8:	08 f0       	brcs	.+2      	; 0x25cc <mode_switch+0x46>
    25ca:	4f c0       	rjmp	.+158    	; 0x266a <mode_switch+0xe4>
    25cc:	88 23       	and	r24, r24
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <mode_switch+0x4c>
    25d0:	f4 c0       	rjmp	.+488    	; 0x27ba <mode_switch+0x234>
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <mode_switch+0x52>
    25d6:	9f c0       	rjmp	.+318    	; 0x2716 <mode_switch+0x190>
            digit_data[3] = hours % 10;  //get the number of hundreds
            digit_data[4] = hours / 10 % 10; //get the number of thousands
            break;
            
        case 1:
            if ((s2_timer % 64) == 0) {    //change mode, set time minutes
    25d8:	80 91 dd 01 	lds	r24, 0x01DD
    25dc:	8f 73       	andi	r24, 0x3F	; 63
    25de:	49 f5       	brne	.+82     	; 0x2632 <mode_switch+0xac>
                changeTimeDisplay = !changeTimeDisplay; //blink/blank minute display
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 91 ea 01 	lds	r25, 0x01EA
    25e6:	91 11       	cpse	r25, r1
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	80 93 ea 01 	sts	0x01EA, r24
                digit_data[0] = 10;
    25ee:	9a e0       	ldi	r25, 0x0A	; 10
    25f0:	90 93 e4 01 	sts	0x01E4, r25
                digit_data[1] = 10;
    25f4:	90 93 e5 01 	sts	0x01E5, r25
                if (changeTimeDisplay == 0) { //setting ones and tens digit
    25f8:	81 11       	cpse	r24, r1
    25fa:	1b c0       	rjmp	.+54     	; 0x2632 <mode_switch+0xac>
                    digit_data[0] = minutes % 10;
    25fc:	20 91 b6 01 	lds	r18, 0x01B6
    2600:	9d ec       	ldi	r25, 0xCD	; 205
    2602:	29 9f       	mul	r18, r25
    2604:	81 2d       	mov	r24, r1
    2606:	11 24       	eor	r1, r1
    2608:	86 95       	lsr	r24
    260a:	86 95       	lsr	r24
    260c:	86 95       	lsr	r24
    260e:	3a e0       	ldi	r19, 0x0A	; 10
    2610:	83 9f       	mul	r24, r19
    2612:	20 19       	sub	r18, r0
    2614:	11 24       	eor	r1, r1
    2616:	20 93 e4 01 	sts	0x01E4, r18
                    digit_data[1] = minutes / 10 % 10;
    261a:	89 9f       	mul	r24, r25
    261c:	91 2d       	mov	r25, r1
    261e:	11 24       	eor	r1, r1
    2620:	96 95       	lsr	r25
    2622:	96 95       	lsr	r25
    2624:	96 95       	lsr	r25
    2626:	2a e0       	ldi	r18, 0x0A	; 10
    2628:	92 9f       	mul	r25, r18
    262a:	80 19       	sub	r24, r0
    262c:	11 24       	eor	r1, r1
    262e:	80 93 e5 01 	sts	0x01E5, r24
                }
            }
            digit_data[3] = hours % 10;
    2632:	20 91 b7 01 	lds	r18, 0x01B7
                if (changeAlarmDisplay == 0) { //setting ones and tens digit
                    digit_data[0] = alarm_m % 10;
                    digit_data[1] = alarm_m / 10 % 10;
                }
            }
            digit_data[3] = alarm_h % 10;
    2636:	9d ec       	ldi	r25, 0xCD	; 205
    2638:	29 9f       	mul	r18, r25
    263a:	81 2d       	mov	r24, r1
    263c:	11 24       	eor	r1, r1
    263e:	86 95       	lsr	r24
    2640:	86 95       	lsr	r24
    2642:	86 95       	lsr	r24
    2644:	3a e0       	ldi	r19, 0x0A	; 10
    2646:	83 9f       	mul	r24, r19
    2648:	20 19       	sub	r18, r0
    264a:	11 24       	eor	r1, r1
    264c:	20 93 e7 01 	sts	0x01E7, r18
            digit_data[4] = alarm_h / 10 % 10;
    2650:	89 9f       	mul	r24, r25
    2652:	91 2d       	mov	r25, r1
    2654:	11 24       	eor	r1, r1
    2656:	96 95       	lsr	r25
    2658:	96 95       	lsr	r25
    265a:	96 95       	lsr	r25
    265c:	2a e0       	ldi	r18, 0x0A	; 10
    265e:	92 9f       	mul	r25, r18
    2660:	80 19       	sub	r24, r0
    2662:	11 24       	eor	r1, r1
    2664:	80 93 e8 01 	sts	0x01E8, r24
            break;
    2668:	08 95       	ret
            snooze(s2_timer);
        }
    }
    clk_count(timer); //allows user to switch time mode displayed
    
    switch (clock_mode) {
    266a:	83 30       	cpi	r24, 0x03	; 3
    266c:	09 f4       	brne	.+2      	; 0x2670 <mode_switch+0xea>
    266e:	c3 c0       	rjmp	.+390    	; 0x27f6 <mode_switch+0x270>
    2670:	84 30       	cpi	r24, 0x04	; 4
    2672:	09 f0       	breq	.+2      	; 0x2676 <mode_switch+0xf0>
    2674:	4f c0       	rjmp	.+158    	; 0x2714 <mode_switch+0x18e>
            digit_data[0] = minutes % 10;
            digit_data[1] = minutes / 10 % 10;
            break;
            
        case 4:
            if ((timer % 64) == 0) {    //change mode, set alarm hours
    2676:	80 91 03 01 	lds	r24, 0x0103
    267a:	8f 73       	andi	r24, 0x3F	; 63
    267c:	49 f5       	brne	.+82     	; 0x26d0 <mode_switch+0x14a>
                changeAlarmDisplay = !changeAlarmDisplay; //blink/blank minute display
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 91 22 02 	lds	r25, 0x0222
    2684:	91 11       	cpse	r25, r1
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	80 93 22 02 	sts	0x0222, r24
                digit_data[0] = 10;          //switch off
    268c:	9a e0       	ldi	r25, 0x0A	; 10
    268e:	90 93 e4 01 	sts	0x01E4, r25
                digit_data[1] = 10;
    2692:	90 93 e5 01 	sts	0x01E5, r25
                if (changeAlarmDisplay == 0) { //setting ones and tens digit
    2696:	81 11       	cpse	r24, r1
    2698:	1b c0       	rjmp	.+54     	; 0x26d0 <mode_switch+0x14a>
                    digit_data[0] = alarm_m % 10;
    269a:	20 91 af 01 	lds	r18, 0x01AF
    269e:	9d ec       	ldi	r25, 0xCD	; 205
    26a0:	29 9f       	mul	r18, r25
    26a2:	81 2d       	mov	r24, r1
    26a4:	11 24       	eor	r1, r1
    26a6:	86 95       	lsr	r24
    26a8:	86 95       	lsr	r24
    26aa:	86 95       	lsr	r24
    26ac:	3a e0       	ldi	r19, 0x0A	; 10
    26ae:	83 9f       	mul	r24, r19
    26b0:	20 19       	sub	r18, r0
    26b2:	11 24       	eor	r1, r1
    26b4:	20 93 e4 01 	sts	0x01E4, r18
                    digit_data[1] = alarm_m / 10 % 10;
    26b8:	89 9f       	mul	r24, r25
    26ba:	91 2d       	mov	r25, r1
    26bc:	11 24       	eor	r1, r1
    26be:	96 95       	lsr	r25
    26c0:	96 95       	lsr	r25
    26c2:	96 95       	lsr	r25
    26c4:	2a e0       	ldi	r18, 0x0A	; 10
    26c6:	92 9f       	mul	r25, r18
    26c8:	80 19       	sub	r24, r0
    26ca:	11 24       	eor	r1, r1
    26cc:	80 93 e5 01 	sts	0x01E5, r24
                }
            }
            digit_data[3] = alarm_h % 10;
    26d0:	20 91 ae 01 	lds	r18, 0x01AE
    26d4:	b0 cf       	rjmp	.-160    	; 0x2636 <mode_switch+0xb0>
            inc_multiple = 0;
            displayBits &= 0x70;
            displayBits |= 0x01;
        }
        
        if ((clock_mode == 1) || (clock_mode == 2)) {   //push S1
    26d6:	9f ef       	ldi	r25, 0xFF	; 255
    26d8:	98 0f       	add	r25, r24
    26da:	92 30       	cpi	r25, 0x02	; 2
    26dc:	58 f4       	brcc	.+22     	; 0x26f4 <mode_switch+0x16e>
            s2_timer++;
    26de:	90 91 dd 01 	lds	r25, 0x01DD
    26e2:	9f 5f       	subi	r25, 0xFF	; 255
    26e4:	90 93 dd 01 	sts	0x01DD, r25
            displayBits &= 0x70;
    26e8:	90 91 ba 01 	lds	r25, 0x01BA
    26ec:	90 77       	andi	r25, 0x70	; 112
            displayBits |= 0x02;
    26ee:	92 60       	ori	r25, 0x02	; 2
    26f0:	90 93 ba 01 	sts	0x01BA, r25
        }
        
        if ((clock_mode == 3) || (clock_mode == 4)) {   //push S2
    26f4:	83 50       	subi	r24, 0x03	; 3
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	08 f0       	brcs	.+2      	; 0x26fc <mode_switch+0x176>
    26fa:	58 cf       	rjmp	.-336    	; 0x25ac <mode_switch+0x26>
            timer++;
    26fc:	80 91 03 01 	lds	r24, 0x0103
    2700:	8f 5f       	subi	r24, 0xFF	; 255
    2702:	80 93 03 01 	sts	0x0103, r24
            displayBits &= 0x70;
    2706:	80 91 ba 01 	lds	r24, 0x01BA
    270a:	80 77       	andi	r24, 0x70	; 112
            displayBits |= 0x04;
    270c:	84 60       	ori	r24, 0x04	; 4
    270e:	80 93 ba 01 	sts	0x01BA, r24
    2712:	4c cf       	rjmp	.-360    	; 0x25ac <mode_switch+0x26>
    2714:	08 95       	ret
    2716:	08 95       	ret
        }
        
        if (snooze_flag == 1) { //push S6
            s2_timer++;
    2718:	80 91 dd 01 	lds	r24, 0x01DD
    271c:	8f 5f       	subi	r24, 0xFF	; 255
    271e:	80 93 dd 01 	sts	0x01DD, r24
            snooze(s2_timer);
    2722:	0e 94 a7 12 	call	0x254e	; 0x254e <snooze>
    2726:	47 cf       	rjmp	.-370    	; 0x25b6 <mode_switch+0x30>
            digit_data[3] = hours % 10;
            digit_data[4] = hours / 10 % 10;
            break;
            
        case 2:
            if ((s2_timer % 64) == 0) {    //change mode, set time hours
    2728:	80 91 dd 01 	lds	r24, 0x01DD
    272c:	8f 73       	andi	r24, 0x3F	; 63
    272e:	49 f5       	brne	.+82     	; 0x2782 <mode_switch+0x1fc>
                changeTimeDisplay = !changeTimeDisplay; //blink/blank hour display
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 91 ea 01 	lds	r25, 0x01EA
    2736:	91 11       	cpse	r25, r1
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	80 93 ea 01 	sts	0x01EA, r24
                digit_data[3] = 10;
    273e:	9a e0       	ldi	r25, 0x0A	; 10
    2740:	90 93 e7 01 	sts	0x01E7, r25
                digit_data[4] = 10;
    2744:	90 93 e8 01 	sts	0x01E8, r25
                if (changeTimeDisplay == 0) { //setting hundreds and thousands digit
    2748:	81 11       	cpse	r24, r1
    274a:	1b c0       	rjmp	.+54     	; 0x2782 <mode_switch+0x1fc>
                    digit_data[3] = hours % 10;
    274c:	20 91 b7 01 	lds	r18, 0x01B7
    2750:	9d ec       	ldi	r25, 0xCD	; 205
    2752:	29 9f       	mul	r18, r25
    2754:	81 2d       	mov	r24, r1
    2756:	11 24       	eor	r1, r1
    2758:	86 95       	lsr	r24
    275a:	86 95       	lsr	r24
    275c:	86 95       	lsr	r24
    275e:	3a e0       	ldi	r19, 0x0A	; 10
    2760:	83 9f       	mul	r24, r19
    2762:	20 19       	sub	r18, r0
    2764:	11 24       	eor	r1, r1
    2766:	20 93 e7 01 	sts	0x01E7, r18
                    digit_data[4] = hours / 10 % 10;
    276a:	89 9f       	mul	r24, r25
    276c:	91 2d       	mov	r25, r1
    276e:	11 24       	eor	r1, r1
    2770:	96 95       	lsr	r25
    2772:	96 95       	lsr	r25
    2774:	96 95       	lsr	r25
    2776:	2a e0       	ldi	r18, 0x0A	; 10
    2778:	92 9f       	mul	r25, r18
    277a:	80 19       	sub	r24, r0
    277c:	11 24       	eor	r1, r1
    277e:	80 93 e8 01 	sts	0x01E8, r24
                }
            }
            digit_data[0] = minutes % 10;
    2782:	20 91 b6 01 	lds	r18, 0x01B6
                if (changeAlarmDisplay == 0) { //setting hundreds and thousands digit
                    digit_data[3] = alarm_h % 10;
                    digit_data[4] = alarm_h / 10 % 10;
                }
            }
            digit_data[0] = alarm_m % 10;
    2786:	9d ec       	ldi	r25, 0xCD	; 205
    2788:	29 9f       	mul	r18, r25
    278a:	81 2d       	mov	r24, r1
    278c:	11 24       	eor	r1, r1
    278e:	86 95       	lsr	r24
    2790:	86 95       	lsr	r24
    2792:	86 95       	lsr	r24
    2794:	3a e0       	ldi	r19, 0x0A	; 10
    2796:	83 9f       	mul	r24, r19
    2798:	20 19       	sub	r18, r0
    279a:	11 24       	eor	r1, r1
    279c:	20 93 e4 01 	sts	0x01E4, r18
            digit_data[1] = alarm_m / 10 % 10;
    27a0:	89 9f       	mul	r24, r25
    27a2:	91 2d       	mov	r25, r1
    27a4:	11 24       	eor	r1, r1
    27a6:	96 95       	lsr	r25
    27a8:	96 95       	lsr	r25
    27aa:	96 95       	lsr	r25
    27ac:	2a e0       	ldi	r18, 0x0A	; 10
    27ae:	92 9f       	mul	r25, r18
    27b0:	80 19       	sub	r24, r0
    27b2:	11 24       	eor	r1, r1
    27b4:	80 93 e5 01 	sts	0x01E5, r24
    27b8:	08 95       	ret
    }
    clk_count(timer); //allows user to switch time mode displayed
    
    switch (clock_mode) {
        case 0:
            digit_data[0] = minutes % 10; //get the number of units
    27ba:	20 91 b6 01 	lds	r18, 0x01B6
    27be:	9d ec       	ldi	r25, 0xCD	; 205
    27c0:	29 9f       	mul	r18, r25
    27c2:	81 2d       	mov	r24, r1
    27c4:	11 24       	eor	r1, r1
    27c6:	86 95       	lsr	r24
    27c8:	86 95       	lsr	r24
    27ca:	86 95       	lsr	r24
    27cc:	3a e0       	ldi	r19, 0x0A	; 10
    27ce:	83 9f       	mul	r24, r19
    27d0:	20 19       	sub	r18, r0
    27d2:	11 24       	eor	r1, r1
    27d4:	20 93 e4 01 	sts	0x01E4, r18
            digit_data[1] = minutes / 10 % 10; //get the number of tens
    27d8:	89 9f       	mul	r24, r25
    27da:	21 2d       	mov	r18, r1
    27dc:	11 24       	eor	r1, r1
    27de:	26 95       	lsr	r18
    27e0:	26 95       	lsr	r18
    27e2:	26 95       	lsr	r18
    27e4:	3a e0       	ldi	r19, 0x0A	; 10
    27e6:	23 9f       	mul	r18, r19
    27e8:	80 19       	sub	r24, r0
    27ea:	11 24       	eor	r1, r1
    27ec:	80 93 e5 01 	sts	0x01E5, r24
            digit_data[3] = hours % 10;  //get the number of hundreds
    27f0:	20 91 b7 01 	lds	r18, 0x01B7
    27f4:	21 cf       	rjmp	.-446    	; 0x2638 <mode_switch+0xb2>
            digit_data[3] = alarm_h % 10;
            digit_data[4] = alarm_h / 10 % 10;
            break;
            
        case 3:
            if ((timer % 64) == 0) {    //change mode, set alarm minutes
    27f6:	80 91 03 01 	lds	r24, 0x0103
    27fa:	8f 73       	andi	r24, 0x3F	; 63
    27fc:	49 f5       	brne	.+82     	; 0x2850 <mode_switch+0x2ca>
                changeAlarmDisplay = !changeAlarmDisplay; //blink/blank hour display
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 91 22 02 	lds	r25, 0x0222
    2804:	91 11       	cpse	r25, r1
    2806:	27 c0       	rjmp	.+78     	; 0x2856 <mode_switch+0x2d0>
    2808:	80 93 22 02 	sts	0x0222, r24
                digit_data[3] = 10;          //switch off
    280c:	9a e0       	ldi	r25, 0x0A	; 10
    280e:	90 93 e7 01 	sts	0x01E7, r25
                digit_data[4] = 10;
    2812:	90 93 e8 01 	sts	0x01E8, r25
                if (changeAlarmDisplay == 0) { //setting hundreds and thousands digit
    2816:	81 11       	cpse	r24, r1
    2818:	1b c0       	rjmp	.+54     	; 0x2850 <mode_switch+0x2ca>
                    digit_data[3] = alarm_h % 10;
    281a:	20 91 ae 01 	lds	r18, 0x01AE
    281e:	9d ec       	ldi	r25, 0xCD	; 205
    2820:	29 9f       	mul	r18, r25
    2822:	81 2d       	mov	r24, r1
    2824:	11 24       	eor	r1, r1
    2826:	86 95       	lsr	r24
    2828:	86 95       	lsr	r24
    282a:	86 95       	lsr	r24
    282c:	3a e0       	ldi	r19, 0x0A	; 10
    282e:	83 9f       	mul	r24, r19
    2830:	20 19       	sub	r18, r0
    2832:	11 24       	eor	r1, r1
    2834:	20 93 e7 01 	sts	0x01E7, r18
                    digit_data[4] = alarm_h / 10 % 10;
    2838:	89 9f       	mul	r24, r25
    283a:	91 2d       	mov	r25, r1
    283c:	11 24       	eor	r1, r1
    283e:	96 95       	lsr	r25
    2840:	96 95       	lsr	r25
    2842:	96 95       	lsr	r25
    2844:	2a e0       	ldi	r18, 0x0A	; 10
    2846:	92 9f       	mul	r25, r18
    2848:	80 19       	sub	r24, r0
    284a:	11 24       	eor	r1, r1
    284c:	80 93 e8 01 	sts	0x01E8, r24
                }
            }
            digit_data[0] = alarm_m % 10;
    2850:	20 91 af 01 	lds	r18, 0x01AF
    2854:	98 cf       	rjmp	.-208    	; 0x2786 <mode_switch+0x200>
            digit_data[4] = alarm_h / 10 % 10;
            break;
            
        case 3:
            if ((timer % 64) == 0) {    //change mode, set alarm minutes
                changeAlarmDisplay = !changeAlarmDisplay; //blink/blank hour display
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	d7 cf       	rjmp	.-82     	; 0x2808 <mode_switch+0x282>

0000285a <__vector_16>:
/***********************************************************************/
//                             TIMER0_OVF_vect
// TIMER0 vector will run when the interrupt occurs, executing
// the encoders function and send the data to bar graph using SPI.
//***********************************************************************/
ISR(TIMER0_OVF_vect){
    285a:	1f 92       	push	r1
    285c:	0f 92       	push	r0
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	0f 92       	push	r0
    2862:	11 24       	eor	r1, r1
    2864:	0b b6       	in	r0, 0x3b	; 59
    2866:	0f 92       	push	r0
    2868:	2f 93       	push	r18
    286a:	3f 93       	push	r19
    286c:	4f 93       	push	r20
    286e:	5f 93       	push	r21
    2870:	6f 93       	push	r22
    2872:	7f 93       	push	r23
    2874:	8f 93       	push	r24
    2876:	9f 93       	push	r25
    2878:	af 93       	push	r26
    287a:	bf 93       	push	r27
    287c:	ef 93       	push	r30
    287e:	ff 93       	push	r31
    
    mode_switch(1); //for changing to different alarm mode
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	0e 94 c3 12 	call	0x2586	; 0x2586 <mode_switch>

    encoders(SPDR); //runs the state machine that drives the encoders
    2886:	8f b1       	in	r24, 0x0f	; 15
    2888:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <encoders>
    SPDR = displayBits; //send to display_test function
    288c:	80 91 ba 01 	lds	r24, 0x01BA
    2890:	8f b9       	out	0x0f, r24	; 15
    
    //strobe register - trigger an action each time it is written to (or sometimes, read from)
    
    while (bit_is_clear(SPSR, SPIF)) {}   //wait till data is sent out
    2892:	77 9b       	sbis	0x0e, 7	; 14
    2894:	fe cf       	rjmp	.-4      	; 0x2892 <__vector_16+0x38>
    PORTB |= (1 << PORTB0);  //strobe output data reg in HC595 - rising edge 0x02
    2896:	c0 9a       	sbi	0x18, 0	; 24
    PORTB &=  ~(1 << PORTB0);  //falling edge
    2898:	c0 98       	cbi	0x18, 0	; 24

}
    289a:	ff 91       	pop	r31
    289c:	ef 91       	pop	r30
    289e:	bf 91       	pop	r27
    28a0:	af 91       	pop	r26
    28a2:	9f 91       	pop	r25
    28a4:	8f 91       	pop	r24
    28a6:	7f 91       	pop	r23
    28a8:	6f 91       	pop	r22
    28aa:	5f 91       	pop	r21
    28ac:	4f 91       	pop	r20
    28ae:	3f 91       	pop	r19
    28b0:	2f 91       	pop	r18
    28b2:	0f 90       	pop	r0
    28b4:	0b be       	out	0x3b, r0	; 59
    28b6:	0f 90       	pop	r0
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	0f 90       	pop	r0
    28bc:	1f 90       	pop	r1
    28be:	18 95       	reti

000028c0 <readLocalTemp>:
//                            readLocalTemp
// reads the temperature, using a built in sensor in the ATmega128 board
//
/***********************************************************************/
void readLocalTemp(){
    LCD_Clr(); //wipe the display
    28c0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_Clr>
    twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2); //read temperature data from LM73 (2 bytes)  (twi_start_rd())
    28c4:	42 e0       	ldi	r20, 0x02	; 2
    28c6:	64 e9       	ldi	r22, 0x94	; 148
    28c8:	72 e0       	ldi	r23, 0x02	; 2
    28ca:	80 e9       	ldi	r24, 0x90	; 144
    28cc:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <twi_start_rd>
    //_delay_ms(2); //wait for it to finish
    
    //now assemble the two bytes read back into one 16-bit value
    lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
    28d0:	80 91 94 02 	lds	r24, 0x0294
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    lm73_temp = lm73_temp << 8; //shift it into upper byte
    28d6:	98 2f       	mov	r25, r24
    28d8:	88 27       	eor	r24, r24
    lm73_temp |= lm73_rd_buf[1];//"OR" in the low temp byte to lm73_temp
    28da:	20 91 95 02 	lds	r18, 0x0295
    28de:	82 2b       	or	r24, r18
    lm73_temp = lm73_temp >> 7; //getting rid of the fractional parts of the number (first 7 bits)
    28e0:	88 0f       	add	r24, r24
    28e2:	89 2f       	mov	r24, r25
    28e4:	88 1f       	adc	r24, r24
    28e6:	99 0b       	sbc	r25, r25
    28e8:	91 95       	neg	r25
    28ea:	90 93 f0 01 	sts	0x01F0, r25
    28ee:	80 93 ef 01 	sts	0x01EF, r24
    itoa(lm73_temp, mega128_temp_str, 10); //convert to string in array with itoa() from avr-libc
    28f2:	4a e0       	ldi	r20, 0x0A	; 10
    28f4:	50 e0       	ldi	r21, 0x00	; 0
    28f6:	61 e1       	ldi	r22, 0x11	; 17
    28f8:	72 e0       	ldi	r23, 0x02	; 2
    28fa:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <itoa>
    LCD_PutStr("L: ");
    28fe:	8e e2       	ldi	r24, 0x2E	; 46
    2900:	91 e0       	ldi	r25, 0x01	; 1
    2902:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
    LCD_PutStr(mega128_temp_str);
    2906:	81 e1       	ldi	r24, 0x11	; 17
    2908:	92 e0       	ldi	r25, 0x02	; 2
    290a:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
    LCD_PutStr("C");
    290e:	82 e3       	ldi	r24, 0x32	; 50
    2910:	91 e0       	ldi	r25, 0x01	; 1
    2912:	0c 94 39 18 	jmp	0x3072	; 0x3072 <LCD_PutStr>

00002916 <readRemoteTemp>:
                         readRemoteTemp
        prints out temperature from mega48
 *******************************************************************/
void readRemoteTemp(){
    
    LCD_PutStr("R: ");
    2916:	84 e3       	ldi	r24, 0x34	; 52
    2918:	91 e0       	ldi	r25, 0x01	; 1
    291a:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
    if(rcv_rdy == 1){
    291e:	80 91 e2 01 	lds	r24, 0x01E2
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	11 f0       	breq	.+4      	; 0x292a <readRemoteTemp+0x14>
        LCD_PutStr(mega48_temp_str);
        LCD_PutStr("C");
        rcv_rdy = 0;
    }
    LCD_MovCursorLn2();
    2926:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <LCD_MovCursorLn2>
 *******************************************************************/
void readRemoteTemp(){
    
    LCD_PutStr("R: ");
    if(rcv_rdy == 1){
        LCD_PutStr(mega48_temp_str);
    292a:	8b e2       	ldi	r24, 0x2B	; 43
    292c:	92 e0       	ldi	r25, 0x02	; 2
    292e:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
        LCD_PutStr("C");
    2932:	82 e3       	ldi	r24, 0x32	; 50
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
        rcv_rdy = 0;
    293a:	10 92 e2 01 	sts	0x01E2, r1
    }
    LCD_MovCursorLn2();
    293e:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <LCD_MovCursorLn2>

00002942 <__vector_18>:

/*****************************************************************************
                          USART0_RX_vect
         receives the temperature from mega48
 ****************************************************************************/
ISR(USART0_RX_vect){
    2942:	1f 92       	push	r1
    2944:	0f 92       	push	r0
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	0f 92       	push	r0
    294a:	11 24       	eor	r1, r1
    294c:	0b b6       	in	r0, 0x3b	; 59
    294e:	0f 92       	push	r0
    2950:	8f 93       	push	r24
    2952:	9f 93       	push	r25
    2954:	ef 93       	push	r30
    2956:	ff 93       	push	r31

    rx_char = UDR0;              //get character
    2958:	8c b1       	in	r24, 0x0c	; 12
    295a:	80 93 3c 02 	sts	0x023C, r24
    mega48_temp_str[i++]=rx_char;  //store in array
    295e:	e0 91 da 01 	lds	r30, 0x01DA
    2962:	91 e0       	ldi	r25, 0x01	; 1
    2964:	9e 0f       	add	r25, r30
    2966:	90 93 da 01 	sts	0x01DA, r25
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	e5 5d       	subi	r30, 0xD5	; 213
    296e:	fd 4f       	sbci	r31, 0xFD	; 253
    2970:	80 83       	st	Z, r24
    //if entire string has arrived, set flag, reset index
    if(rx_char == '\0'){
    2972:	81 11       	cpse	r24, r1
    2974:	09 c0       	rjmp	.+18     	; 0x2988 <__vector_18+0x46>
        rcv_rdy=1;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	80 93 e2 01 	sts	0x01E2, r24
        mega48_temp_str[--i]  = (' ');     //clear the count field
    297c:	80 e2       	ldi	r24, 0x20	; 32
    297e:	80 83       	st	Z, r24
        mega48_temp_str[i+1]  = (' ');
    2980:	81 83       	std	Z+1, r24	; 0x01
        mega48_temp_str[i+2]  = (' ');
    2982:	82 83       	std	Z+2, r24	; 0x02
        i=0;  
    2984:	10 92 da 01 	sts	0x01DA, r1
    }
}
    2988:	ff 91       	pop	r31
    298a:	ef 91       	pop	r30
    298c:	9f 91       	pop	r25
    298e:	8f 91       	pop	r24
    2990:	0f 90       	pop	r0
    2992:	0b be       	out	0x3b, r0	; 59
    2994:	0f 90       	pop	r0
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	0f 90       	pop	r0
    299a:	1f 90       	pop	r1
    299c:	18 95       	reti

0000299e <radio_init>:
                                radio_init()
 sets the ports for radio, as well as resetting, power up and tune the radio in fm mode
 ***********************************************************************************/
void radio_init(){

    DDRE  |= 0x04; //Port E bit 2 is active high reset for radio
    299e:	12 9a       	sbi	0x02, 2	; 2
    PORTE |= 0x04; //radio reset is on at powerup (active high)
    29a0:	1a 9a       	sbi	0x03, 2	; 3
    
    //hardware reset of Si4734
    PORTE &= ~(1<<PE4); //int2 initially low to sense TWI mode
    29a2:	1c 98       	cbi	0x03, 4	; 3
    DDRE  |= 0x10;      //turn on Port E bit 4 to drive it low
    29a4:	14 9a       	sbi	0x02, 4	; 2
    PORTE |=  (1<<PE2); //hardware reset Si4734
    29a6:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29a8:	8f e1       	ldi	r24, 0x1F	; 31
    29aa:	93 e0       	ldi	r25, 0x03	; 3
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <radio_init+0xe>
    29b0:	00 c0       	rjmp	.+0      	; 0x29b2 <radio_init+0x14>
    29b2:	00 00       	nop
    _delay_us(200);     //hold for 200us, 100us by spec
    PORTE &= ~(1<<PE2); //release reset
    29b4:	1a 98       	cbi	0x03, 2	; 3
    29b6:	90 ea       	ldi	r25, 0xA0	; 160
    29b8:	9a 95       	dec	r25
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <radio_init+0x1a>
    _delay_us(30);      //5us required because of my slow I2C translators I suspect
    
    //Si code in "low" has 30us delay...no explaination
    DDRE  &= ~(0x10);   //now Port E bit 4 becomes input from the radio interrupt
    29bc:	14 98       	cbi	0x02, 4	; 2
    29be:	08 95       	ret

000029c0 <__vector_5>:
    
}

ISR(INT4_vect){
    29c0:	1f 92       	push	r1
    29c2:	0f 92       	push	r0
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	0f 92       	push	r0
    29c8:	11 24       	eor	r1, r1
    29ca:	8f 93       	push	r24
    STC_interrupt = TRUE;
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	80 93 23 02 	sts	0x0223, r24
    EIFR |= 0x80;
    29d2:	88 b7       	in	r24, 0x38	; 56
    29d4:	80 68       	ori	r24, 0x80	; 128
    29d6:	88 bf       	out	0x38, r24	; 56
}
    29d8:	8f 91       	pop	r24
    29da:	0f 90       	pop	r0
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	0f 90       	pop	r0
    29e0:	1f 90       	pop	r1
    29e2:	18 95       	reti

000029e4 <tuneRadio>:
static uint8_t freq_change;
char frequency_buffer[16];
//         tunes the radio
void tuneRadio(){
    
    freq_change = count_sign * 200;
    29e4:	20 91 e3 01 	lds	r18, 0x01E3
    29e8:	88 ec       	ldi	r24, 0xC8	; 200
    29ea:	28 9f       	mul	r18, r24
    29ec:	20 2d       	mov	r18, r0
    29ee:	11 24       	eor	r1, r1
    29f0:	20 93 d9 01 	sts	0x01D9, r18
    current_fm_freq = current_fm_freq + freq_change;
    29f4:	80 91 0f 01 	lds	r24, 0x010F
    29f8:	90 91 10 01 	lds	r25, 0x0110
    29fc:	82 0f       	add	r24, r18
    29fe:	91 1d       	adc	r25, r1
    2a00:	90 93 10 01 	sts	0x0110, r25
    2a04:	80 93 0f 01 	sts	0x010F, r24
    LCD_PutStr( sprintf(frequency_buffer, "%s", current_fm_freq) );
    2a08:	9f 93       	push	r25
    2a0a:	8f 93       	push	r24
    2a0c:	88 e3       	ldi	r24, 0x38	; 56
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
    2a10:	9f 93       	push	r25
    2a12:	8f 93       	push	r24
    2a14:	8e ef       	ldi	r24, 0xFE	; 254
    2a16:	91 e0       	ldi	r25, 0x01	; 1
    2a18:	9f 93       	push	r25
    2a1a:	8f 93       	push	r24
    2a1c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <sprintf>
    2a20:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
    LCD_MovCursorLn2();
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <LCD_MovCursorLn2>

00002a34 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    2a34:	1f 92       	push	r1
    2a36:	0f 92       	push	r0
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	0f 92       	push	r0
    2a3c:	11 24       	eor	r1, r1
    2a3e:	0b b6       	in	r0, 0x3b	; 59
    2a40:	0f 92       	push	r0
    2a42:	2f 93       	push	r18
    2a44:	3f 93       	push	r19
    2a46:	8f 93       	push	r24
    2a48:	9f 93       	push	r25
    2a4a:	af 93       	push	r26
    2a4c:	bf 93       	push	r27
    2a4e:	ef 93       	push	r30
    2a50:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    2a52:	80 91 71 00 	lds	r24, 0x0071
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	fc 01       	movw	r30, r24
    2a5a:	38 97       	sbiw	r30, 0x08	; 8
    2a5c:	e1 35       	cpi	r30, 0x51	; 81
    2a5e:	f1 05       	cpc	r31, r1
    2a60:	b0 f0       	brcs	.+44     	; 0x2a8e <__vector_33+0x5a>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    2a62:	80 91 71 00 	lds	r24, 0x0071
    2a66:	80 93 3d 02 	sts	0x023D, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    2a6a:	84 e0       	ldi	r24, 0x04	; 4
    2a6c:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    2a70:	ff 91       	pop	r31
    2a72:	ef 91       	pop	r30
    2a74:	bf 91       	pop	r27
    2a76:	af 91       	pop	r26
    2a78:	9f 91       	pop	r25
    2a7a:	8f 91       	pop	r24
    2a7c:	3f 91       	pop	r19
    2a7e:	2f 91       	pop	r18
    2a80:	0f 90       	pop	r0
    2a82:	0b be       	out	0x3b, r0	; 59
    2a84:	0f 90       	pop	r0
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	0f 90       	pop	r0
    2a8a:	1f 90       	pop	r1
    2a8c:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    2a8e:	e1 52       	subi	r30, 0x21	; 33
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
    2a92:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    2a96:	80 91 db 01 	lds	r24, 0x01DB
    2a9a:	e0 91 3e 02 	lds	r30, 0x023E
    2a9e:	f0 91 3f 02 	lds	r31, 0x023F
    2aa2:	e8 0f       	add	r30, r24
    2aa4:	f1 1d       	adc	r31, r1
    2aa6:	80 91 73 00 	lds	r24, 0x0073
    2aaa:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    2aac:	84 e9       	ldi	r24, 0x94	; 148
    2aae:	80 93 74 00 	sts	0x0074, r24
      break;      
    2ab2:	de cf       	rjmp	.-68     	; 0x2a70 <__vector_33+0x3c>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    2ab4:	80 91 40 02 	lds	r24, 0x0240
    2ab8:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    2abc:	10 92 db 01 	sts	0x01DB, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    2ac0:	85 e8       	ldi	r24, 0x85	; 133
    2ac2:	80 93 74 00 	sts	0x0074, r24
      break;
    2ac6:	d4 cf       	rjmp	.-88     	; 0x2a70 <__vector_33+0x3c>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    2ac8:	80 91 db 01 	lds	r24, 0x01DB
    2acc:	90 91 41 02 	lds	r25, 0x0241
    2ad0:	89 17       	cp	r24, r25
    2ad2:	60 f7       	brcc	.-40     	; 0x2aac <__vector_33+0x78>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    2ad4:	e0 91 3e 02 	lds	r30, 0x023E
    2ad8:	f0 91 3f 02 	lds	r31, 0x023F
    2adc:	91 e0       	ldi	r25, 0x01	; 1
    2ade:	98 0f       	add	r25, r24
    2ae0:	90 93 db 01 	sts	0x01DB, r25
    2ae4:	e8 0f       	add	r30, r24
    2ae6:	f1 1d       	adc	r31, r1
    2ae8:	80 81       	ld	r24, Z
    2aea:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    2aee:	85 e8       	ldi	r24, 0x85	; 133
    2af0:	80 93 74 00 	sts	0x0074, r24
    2af4:	bd cf       	rjmp	.-134    	; 0x2a70 <__vector_33+0x3c>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    2af6:	85 ea       	ldi	r24, 0xA5	; 165
    2af8:	80 93 74 00 	sts	0x0074, r24
      break;
    2afc:	b9 cf       	rjmp	.-142    	; 0x2a70 <__vector_33+0x3c>
    2afe:	20 91 db 01 	lds	r18, 0x01DB
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    2b02:	80 91 41 02 	lds	r24, 0x0241
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	28 17       	cp	r18, r24
    2b0e:	39 07       	cpc	r19, r25
    2b10:	dc f4       	brge	.+54     	; 0x2b48 <__vector_33+0x114>
    2b12:	85 ec       	ldi	r24, 0xC5	; 197
    2b14:	80 93 74 00 	sts	0x0074, r24
    2b18:	ab cf       	rjmp	.-170    	; 0x2a70 <__vector_33+0x3c>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    2b1a:	e0 91 3e 02 	lds	r30, 0x023E
    2b1e:	f0 91 3f 02 	lds	r31, 0x023F
    2b22:	80 91 db 01 	lds	r24, 0x01DB
    2b26:	21 e0       	ldi	r18, 0x01	; 1
    2b28:	28 0f       	add	r18, r24
    2b2a:	20 93 db 01 	sts	0x01DB, r18
    2b2e:	e8 0f       	add	r30, r24
    2b30:	f1 1d       	adc	r31, r1
    2b32:	80 91 73 00 	lds	r24, 0x0073
    2b36:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    2b38:	80 91 41 02 	lds	r24, 0x0241
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	28 17       	cp	r18, r24
    2b44:	39 07       	cpc	r19, r25
    2b46:	2c f3       	brlt	.-54     	; 0x2b12 <__vector_33+0xde>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    2b48:	85 e8       	ldi	r24, 0x85	; 133
    2b4a:	80 93 74 00 	sts	0x0074, r24
    2b4e:	90 cf       	rjmp	.-224    	; 0x2a70 <__vector_33+0x3c>

00002b50 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    2b50:	80 91 74 00 	lds	r24, 0x0074
}
    2b54:	81 70       	andi	r24, 0x01	; 1
    2b56:	08 95       	ret

00002b58 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    2b58:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    2b5c:	90 fd       	sbrc	r25, 0
    2b5e:	fc cf       	rjmp	.-8      	; 0x2b58 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    2b60:	8e 7f       	andi	r24, 0xFE	; 254
    2b62:	80 93 40 02 	sts	0x0240, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    2b66:	70 93 3f 02 	sts	0x023F, r23
    2b6a:	60 93 3e 02 	sts	0x023E, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    2b6e:	40 93 41 02 	sts	0x0241, r20
  TWCR = TWCR_START;                    //initiate START
    2b72:	85 ea       	ldi	r24, 0xA5	; 165
    2b74:	80 93 74 00 	sts	0x0074, r24
    2b78:	08 95       	ret

00002b7a <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    2b7a:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    2b7e:	90 fd       	sbrc	r25, 0
    2b80:	fc cf       	rjmp	.-8      	; 0x2b7a <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    2b82:	81 60       	ori	r24, 0x01	; 1
    2b84:	80 93 40 02 	sts	0x0240, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    2b88:	70 93 3f 02 	sts	0x023F, r23
    2b8c:	60 93 3e 02 	sts	0x023E, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    2b90:	40 93 41 02 	sts	0x0241, r20
  TWCR = TWCR_START;                   //initiate START
    2b94:	85 ea       	ldi	r24, 0xA5	; 165
    2b96:	80 93 74 00 	sts	0x0074, r24
    2b9a:	08 95       	ret

00002b9c <init_twi>:
//10K pullups are present on the board
//For the alarm clock, an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    2b9c:	8f ef       	ldi	r24, 0xFF	; 255
    2b9e:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    2ba2:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    2ba6:	8c e0       	ldi	r24, 0x0C	; 12
    2ba8:	80 93 70 00 	sts	0x0070, r24
    2bac:	08 95       	ret

00002bae <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    2bae:	5d 9b       	sbis	0x0b, 5	; 11
    2bb0:	fe cf       	rjmp	.-4      	; 0x2bae <uart_putc>
    UDR0 = data;    // Send data byte
    2bb2:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    2bb4:	5d 9b       	sbis	0x0b, 5	; 11
    2bb6:	fe cf       	rjmp	.-4      	; 0x2bb4 <uart_putc+0x6>
}
    2bb8:	08 95       	ret

00002bba <uart_puts>:
//                        uart_puts
// Takes a string and sends each character to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    2bba:	fc 01       	movw	r30, r24
    2bbc:	20 81       	ld	r18, Z
    2bbe:	22 23       	and	r18, r18
    2bc0:	49 f0       	breq	.+18     	; 0x2bd4 <uart_puts+0x1a>
    2bc2:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    2bc4:	5d 9b       	sbis	0x0b, 5	; 11
    2bc6:	fe cf       	rjmp	.-4      	; 0x2bc4 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    2bc8:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    2bca:	5d 9b       	sbis	0x0b, 5	; 11
    2bcc:	fe cf       	rjmp	.-4      	; 0x2bca <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each character to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    2bce:	21 91       	ld	r18, Z+
    2bd0:	21 11       	cpse	r18, r1
    2bd2:	f8 cf       	rjmp	.-16     	; 0x2bc4 <uart_puts+0xa>
    2bd4:	08 95       	ret

00002bd6 <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    2bd6:	9c 01       	movw	r18, r24
    2bd8:	fc 01       	movw	r30, r24
    2bda:	44 91       	lpm	r20, Z
    2bdc:	44 23       	and	r20, r20
    2bde:	69 f0       	breq	.+26     	; 0x2bfa <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    2be0:	01 96       	adiw	r24, 0x01	; 1
    2be2:	f9 01       	movw	r30, r18
    2be4:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    2be6:	5d 9b       	sbis	0x0b, 5	; 11
    2be8:	fe cf       	rjmp	.-4      	; 0x2be6 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    2bea:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    2bec:	5d 9b       	sbis	0x0b, 5	; 11
    2bee:	fe cf       	rjmp	.-4      	; 0x2bec <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    2bf0:	9c 01       	movw	r18, r24
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	44 91       	lpm	r20, Z
    2bf6:	41 11       	cpse	r20, r1
    2bf8:	f3 cf       	rjmp	.-26     	; 0x2be0 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    2bfa:	08 95       	ret

00002bfc <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
    //rx and tx enable, receive interrupt enabled, 8 bit characters
      UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //interrupts enabled
    2bfc:	8a b1       	in	r24, 0x0a	; 10
    2bfe:	88 69       	ori	r24, 0x98	; 152
    2c00:	8a b9       	out	0x0a, r24	; 10
    //UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!
    
    //async operation, no parity,  one stop bit, 8-bit characters
    UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    2c02:	e5 e9       	ldi	r30, 0x95	; 149
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	86 60       	ori	r24, 0x06	; 6
    2c0a:	80 83       	st	Z, r24
    UBRR0H = ( BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR
    2c0c:	10 92 90 00 	sts	0x0090, r1
    UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR
    2c10:	87 e6       	ldi	r24, 0x67	; 103
    2c12:	89 b9       	out	0x09, r24	; 9
    2c14:	08 95       	ret

00002c16 <uart_getc>:
//Modified to not block indefinitely in the case of a lost byte
//
char uart_getc(void) {
    uint16_t timer = 0;
    
    while (!(UCSR0A & (1<<RXC0))) {
    2c16:	80 e8       	ldi	r24, 0x80	; 128
    2c18:	9e e3       	ldi	r25, 0x3E	; 62
    2c1a:	03 c0       	rjmp	.+6      	; 0x2c22 <uart_getc+0xc>
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
        timer++;
        if(timer >= 16000){ return(0);}
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	21 f0       	breq	.+8      	; 0x2c2a <uart_getc+0x14>
//Modified to not block indefinitely in the case of a lost byte
//
char uart_getc(void) {
    uint16_t timer = 0;
    
    while (!(UCSR0A & (1<<RXC0))) {
    2c22:	5f 9b       	sbis	0x0b, 7	; 11
    2c24:	fb cf       	rjmp	.-10     	; 0x2c1c <uart_getc+0x6>
        //what should we return if nothing comes in?
        //return the data into a global variable
        //give uart_getc the address of the variable
        //return a -1 if no data comes back.
    } // Wait for byte to arrive
    return(UDR0); //return the received data
    2c26:	8c b1       	in	r24, 0x0c	; 12
    2c28:	08 95       	ret
char uart_getc(void) {
    uint16_t timer = 0;
    
    while (!(UCSR0A & (1<<RXC0))) {
        timer++;
        if(timer >= 16000){ return(0);}
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
        //return the data into a global variable
        //give uart_getc the address of the variable
        //return a -1 if no data comes back.
    } // Wait for byte to arrive
    return(UDR0); //return the received data
}
    2c2c:	08 95       	ret

00002c2e <lm73_set_max_resolution>:
uint8_t lm73_rd_buf[2];

//******************************************************************************
void lm73_set_max_resolution(void){
   //FIXME
   lm73_wr_buf[0] = LM73_PTR_CTRL_STATUS;
    2c2e:	84 e0       	ldi	r24, 0x04	; 4
    2c30:	80 93 92 02 	sts	0x0292, r24
   //lm73_wr_buf[0] = LM73_PTR_TEMP;   
   lm73_wr_buf[1] = (1<<RES1 | 1<<RES0);
    2c34:	80 e6       	ldi	r24, 0x60	; 96
    2c36:	80 93 93 02 	sts	0x0293, r24
   twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2);
    2c3a:	42 e0       	ldi	r20, 0x02	; 2
    2c3c:	62 e9       	ldi	r22, 0x92	; 146
    2c3e:	72 e0       	ldi	r23, 0x02	; 2
    2c40:	80 e9       	ldi	r24, 0x90	; 144
    2c42:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <twi_start_wr>

00002c46 <lm73_set_ptr_to_read>:
//******************************************************************************
void lm73_set_ptr_to_read(void){
   //set LM73 mode for reading temperature by loading pointer register
   //this is done outside of the normal interrupt mode of operation 
   //load lm73_wr_buf[0] with temperature pointer address
   lm73_wr_buf[0] = LM73_PTR_TEMP;   
    2c46:	10 92 92 02 	sts	0x0292, r1
   //start the TWI write process (twi_start_wr())
   twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 1);
    2c4a:	41 e0       	ldi	r20, 0x01	; 1
    2c4c:	62 e9       	ldi	r22, 0x92	; 146
    2c4e:	72 e0       	ldi	r23, 0x02	; 2
    2c50:	80 e9       	ldi	r24, 0x90	; 144
    2c52:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <twi_start_wr>

00002c56 <lm73_temp_convert>:
   //the buffer pointed to by the arguement.
   //TODO:Returns what???(uint8_t)??? Probably a BUG?

   //Yeah, this is for you to do! ;^)

}//lm73_temp_convert
    2c56:	08 95       	ret

00002c58 <strobe_lcd>:
}


void strobe_lcd(void) {
    //twiddles bit 3, PORTF creating the enable signal for the LCD
    PORTF |= 0x08;
    2c58:	e2 e6       	ldi	r30, 0x62	; 98
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	88 60       	ori	r24, 0x08	; 8
    2c60:	80 83       	st	Z, r24
    PORTF &= ~0x08;
    2c62:	80 81       	ld	r24, Z
    2c64:	87 7f       	andi	r24, 0xF7	; 247
    2c66:	80 83       	st	Z, r24
    2c68:	08 95       	ret

00002c6a <LCD_Clr>:
}

void LCD_Clr(void) {
    LCD_CMD(0x01);
    2c6a:	1f b8       	out	0x0f, r1	; 15
    2c6c:	77 9b       	sbis	0x0e, 7	; 14
    2c6e:	fe cf       	rjmp	.-4      	; 0x2c6c <LCD_Clr+0x2>
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	8f b9       	out	0x0f, r24	; 15
    2c74:	77 9b       	sbis	0x0e, 7	; 14
    2c76:	fe cf       	rjmp	.-4      	; 0x2c74 <LCD_Clr+0xa>
    2c78:	80 91 62 00 	lds	r24, 0x0062
    2c7c:	88 60       	ori	r24, 0x08	; 8
    2c7e:	80 93 62 00 	sts	0x0062, r24
    2c82:	80 91 62 00 	lds	r24, 0x0062
    2c86:	87 7f       	andi	r24, 0xF7	; 247
    2c88:	80 93 62 00 	sts	0x0062, r24
    2c8c:	8f e8       	ldi	r24, 0x8F	; 143
    2c8e:	91 e0       	ldi	r25, 0x01	; 1
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_Clr+0x26>
    2c94:	00 c0       	rjmp	.+0      	; 0x2c96 <LCD_Clr+0x2c>
    2c96:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c98:	8f e3       	ldi	r24, 0x3F	; 63
    2c9a:	9f e1       	ldi	r25, 0x1F	; 31
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <LCD_Clr+0x32>
    2ca0:	00 c0       	rjmp	.+0      	; 0x2ca2 <LCD_Clr+0x38>
    2ca2:	00 00       	nop
    2ca4:	08 95       	ret

00002ca6 <LCD_MovCursorLn1>:
    _delay_ms(2);   //obligatory waiting for slow LCD
}

void LCD_MovCursorLn1(void) {
    LCD_CMD(0x80);
    2ca6:	1f b8       	out	0x0f, r1	; 15
    2ca8:	77 9b       	sbis	0x0e, 7	; 14
    2caa:	fe cf       	rjmp	.-4      	; 0x2ca8 <LCD_MovCursorLn1+0x2>
    2cac:	80 e8       	ldi	r24, 0x80	; 128
    2cae:	8f b9       	out	0x0f, r24	; 15
    2cb0:	77 9b       	sbis	0x0e, 7	; 14
    2cb2:	fe cf       	rjmp	.-4      	; 0x2cb0 <LCD_MovCursorLn1+0xa>
    2cb4:	80 91 62 00 	lds	r24, 0x0062
    2cb8:	88 60       	ori	r24, 0x08	; 8
    2cba:	80 93 62 00 	sts	0x0062, r24
    2cbe:	80 91 62 00 	lds	r24, 0x0062
    2cc2:	87 7f       	andi	r24, 0xF7	; 247
    2cc4:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2cc8:	8f e8       	ldi	r24, 0x8F	; 143
    2cca:	91 e0       	ldi	r25, 0x01	; 1
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <LCD_MovCursorLn1+0x26>
    2cd0:	00 c0       	rjmp	.+0      	; 0x2cd2 <LCD_MovCursorLn1+0x2c>
    2cd2:	00 00       	nop
    2cd4:	08 95       	ret

00002cd6 <LCD_MovCursorLn2>:
}

void LCD_MovCursorLn2(void) {
    LCD_CMD(0xC0);
    2cd6:	1f b8       	out	0x0f, r1	; 15
    2cd8:	77 9b       	sbis	0x0e, 7	; 14
    2cda:	fe cf       	rjmp	.-4      	; 0x2cd8 <LCD_MovCursorLn2+0x2>
    2cdc:	80 ec       	ldi	r24, 0xC0	; 192
    2cde:	8f b9       	out	0x0f, r24	; 15
    2ce0:	77 9b       	sbis	0x0e, 7	; 14
    2ce2:	fe cf       	rjmp	.-4      	; 0x2ce0 <LCD_MovCursorLn2+0xa>
    2ce4:	80 91 62 00 	lds	r24, 0x0062
    2ce8:	88 60       	ori	r24, 0x08	; 8
    2cea:	80 93 62 00 	sts	0x0062, r24
    2cee:	80 91 62 00 	lds	r24, 0x0062
    2cf2:	87 7f       	andi	r24, 0xF7	; 247
    2cf4:	80 93 62 00 	sts	0x0062, r24
    2cf8:	8f e8       	ldi	r24, 0x8F	; 143
    2cfa:	91 e0       	ldi	r25, 0x01	; 1
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	f1 f7       	brne	.-4      	; 0x2cfc <LCD_MovCursorLn2+0x26>
    2d00:	00 c0       	rjmp	.+0      	; 0x2d02 <LCD_MovCursorLn2+0x2c>
    2d02:	00 00       	nop
    2d04:	08 95       	ret

00002d06 <LCD_CursorBlinkOn>:
}

void LCD_CursorBlinkOn(void) {
    LCD_CMD(0x0F);
    2d06:	1f b8       	out	0x0f, r1	; 15
    2d08:	77 9b       	sbis	0x0e, 7	; 14
    2d0a:	fe cf       	rjmp	.-4      	; 0x2d08 <LCD_CursorBlinkOn+0x2>
    2d0c:	8f e0       	ldi	r24, 0x0F	; 15
    2d0e:	8f b9       	out	0x0f, r24	; 15
    2d10:	77 9b       	sbis	0x0e, 7	; 14
    2d12:	fe cf       	rjmp	.-4      	; 0x2d10 <LCD_CursorBlinkOn+0xa>
    2d14:	80 91 62 00 	lds	r24, 0x0062
    2d18:	88 60       	ori	r24, 0x08	; 8
    2d1a:	80 93 62 00 	sts	0x0062, r24
    2d1e:	80 91 62 00 	lds	r24, 0x0062
    2d22:	87 7f       	andi	r24, 0xF7	; 247
    2d24:	80 93 62 00 	sts	0x0062, r24
    2d28:	8f e8       	ldi	r24, 0x8F	; 143
    2d2a:	91 e0       	ldi	r25, 0x01	; 1
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <LCD_CursorBlinkOn+0x26>
    2d30:	00 c0       	rjmp	.+0      	; 0x2d32 <LCD_CursorBlinkOn+0x2c>
    2d32:	00 00       	nop
    2d34:	08 95       	ret

00002d36 <LCD_CursorBlinkOff>:
}

void LCD_CursorBlinkOff(void) {
    LCD_CMD(0x0C);
    2d36:	1f b8       	out	0x0f, r1	; 15
    2d38:	77 9b       	sbis	0x0e, 7	; 14
    2d3a:	fe cf       	rjmp	.-4      	; 0x2d38 <LCD_CursorBlinkOff+0x2>
    2d3c:	8c e0       	ldi	r24, 0x0C	; 12
    2d3e:	8f b9       	out	0x0f, r24	; 15
    2d40:	77 9b       	sbis	0x0e, 7	; 14
    2d42:	fe cf       	rjmp	.-4      	; 0x2d40 <LCD_CursorBlinkOff+0xa>
    2d44:	80 91 62 00 	lds	r24, 0x0062
    2d48:	88 60       	ori	r24, 0x08	; 8
    2d4a:	80 93 62 00 	sts	0x0062, r24
    2d4e:	80 91 62 00 	lds	r24, 0x0062
    2d52:	87 7f       	andi	r24, 0xF7	; 247
    2d54:	80 93 62 00 	sts	0x0062, r24
    2d58:	8f e8       	ldi	r24, 0x8F	; 143
    2d5a:	91 e0       	ldi	r25, 0x01	; 1
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <LCD_CursorBlinkOff+0x26>
    2d60:	00 c0       	rjmp	.+0      	; 0x2d62 <LCD_CursorBlinkOff+0x2c>
    2d62:	00 00       	nop
    2d64:	08 95       	ret

00002d66 <LCD_MovCursor>:
 
	The cursor will not be moved if an invalid location is provided
 */
void LCD_MovCursor(uint8_t line, uint8_t position) {
    uint8_t addr;
    if (position > 15)
    2d66:	60 31       	cpi	r22, 0x10	; 16
    2d68:	20 f4       	brcc	.+8      	; 0x2d72 <LCD_MovCursor+0xc>
        return;
    if (line == 1) {
    2d6a:	81 30       	cpi	r24, 0x01	; 1
    2d6c:	19 f0       	breq	.+6      	; 0x2d74 <LCD_MovCursor+0xe>
        addr = 0x80 + position;
    } else if (line == 2) {
    2d6e:	82 30       	cpi	r24, 0x02	; 2
    2d70:	c9 f0       	breq	.+50     	; 0x2da4 <LCD_MovCursor+0x3e>
    2d72:	08 95       	ret
void LCD_MovCursor(uint8_t line, uint8_t position) {
    uint8_t addr;
    if (position > 15)
        return;
    if (line == 1) {
        addr = 0x80 + position;
    2d74:	60 58       	subi	r22, 0x80	; 128
        addr = 0xC0 + position;
    } else {
        // invalid line number
        return;
    }
    LCD_CMD(addr);
    2d76:	1f b8       	out	0x0f, r1	; 15
    2d78:	77 9b       	sbis	0x0e, 7	; 14
    2d7a:	fe cf       	rjmp	.-4      	; 0x2d78 <LCD_MovCursor+0x12>
    2d7c:	6f b9       	out	0x0f, r22	; 15
    2d7e:	77 9b       	sbis	0x0e, 7	; 14
    2d80:	fe cf       	rjmp	.-4      	; 0x2d7e <LCD_MovCursor+0x18>
    2d82:	80 91 62 00 	lds	r24, 0x0062
    2d86:	88 60       	ori	r24, 0x08	; 8
    2d88:	80 93 62 00 	sts	0x0062, r24
    2d8c:	80 91 62 00 	lds	r24, 0x0062
    2d90:	87 7f       	andi	r24, 0xF7	; 247
    2d92:	80 93 62 00 	sts	0x0062, r24
    2d96:	8f e8       	ldi	r24, 0x8F	; 143
    2d98:	91 e0       	ldi	r25, 0x01	; 1
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <LCD_MovCursor+0x34>
    2d9e:	00 c0       	rjmp	.+0      	; 0x2da0 <LCD_MovCursor+0x3a>
    2da0:	00 00       	nop
    2da2:	08 95       	ret
    if (position > 15)
        return;
    if (line == 1) {
        addr = 0x80 + position;
    } else if (line == 2) {
        addr = 0xC0 + position;
    2da4:	60 54       	subi	r22, 0x40	; 64
    2da6:	e7 cf       	rjmp	.-50     	; 0x2d76 <LCD_MovCursor+0x10>

00002da8 <LCD_FillSpaces>:
        return;
    }
    LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
    2da8:	80 e1       	ldi	r24, 0x10	; 16
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    int count;
    for (count=0; count<=15; count++){
        LCD_DATA(' ');
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	30 e2       	ldi	r19, 0x20	; 32
    2db0:	4f b9       	out	0x0f, r20	; 15
    2db2:	77 9b       	sbis	0x0e, 7	; 14
    2db4:	fe cf       	rjmp	.-4      	; 0x2db2 <LCD_FillSpaces+0xa>
    2db6:	3f b9       	out	0x0f, r19	; 15
    2db8:	77 9b       	sbis	0x0e, 7	; 14
    2dba:	fe cf       	rjmp	.-4      	; 0x2db8 <LCD_FillSpaces+0x10>
    2dbc:	20 91 62 00 	lds	r18, 0x0062
    2dc0:	28 60       	ori	r18, 0x08	; 8
    2dc2:	20 93 62 00 	sts	0x0062, r18
    2dc6:	20 91 62 00 	lds	r18, 0x0062
    2dca:	27 7f       	andi	r18, 0xF7	; 247
    2dcc:	20 93 62 00 	sts	0x0062, r18
    2dd0:	ef e8       	ldi	r30, 0x8F	; 143
    2dd2:	f1 e0       	ldi	r31, 0x01	; 1
    2dd4:	31 97       	sbiw	r30, 0x01	; 1
    2dd6:	f1 f7       	brne	.-4      	; 0x2dd4 <LCD_FillSpaces+0x2c>
    2dd8:	00 c0       	rjmp	.+0      	; 0x2dda <LCD_FillSpaces+0x32>
    2dda:	00 00       	nop
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
    int count;
    for (count=0; count<=15; count++){
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	39 f7       	brne	.-50     	; 0x2db0 <LCD_FillSpaces+0x8>
        LCD_DATA(' ');
    }
}
    2de2:	08 95       	ret

00002de4 <LCD_PutDec8>:
	and display the result.
 */
void LCD_PutDec8(uint8_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    while (num >= 100) {
    2de4:	84 36       	cpi	r24, 0x64	; 100
    2de6:	08 f4       	brcc	.+2      	; 0x2dea <LCD_PutDec8+0x6>
    2de8:	5d c0       	rjmp	.+186    	; 0x2ea4 <LCD_PutDec8+0xc0>
        digit++;
        num -= 100;
    2dea:	9c e9       	ldi	r25, 0x9C	; 156
    2dec:	98 0f       	add	r25, r24
	and display the result.
 */
void LCD_PutDec8(uint8_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    while (num >= 100) {
    2dee:	94 36       	cpi	r25, 0x64	; 100
    2df0:	08 f4       	brcc	.+2      	; 0x2df4 <LCD_PutDec8+0x10>
    2df2:	5c c0       	rjmp	.+184    	; 0x2eac <LCD_PutDec8+0xc8>
        digit++;
        num -= 100;
    2df4:	88 5c       	subi	r24, 0xC8	; 200
    2df6:	22 e3       	ldi	r18, 0x32	; 50
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
    2df8:	91 e0       	ldi	r25, 0x01	; 1
    2dfa:	9f b9       	out	0x0f, r25	; 15
    2dfc:	77 9b       	sbis	0x0e, 7	; 14
    2dfe:	fe cf       	rjmp	.-4      	; 0x2dfc <LCD_PutDec8+0x18>
    2e00:	2f b9       	out	0x0f, r18	; 15
    2e02:	77 9b       	sbis	0x0e, 7	; 14
    2e04:	fe cf       	rjmp	.-4      	; 0x2e02 <LCD_PutDec8+0x1e>
    2e06:	90 91 62 00 	lds	r25, 0x0062
    2e0a:	98 60       	ori	r25, 0x08	; 8
    2e0c:	90 93 62 00 	sts	0x0062, r25
    2e10:	90 91 62 00 	lds	r25, 0x0062
    2e14:	97 7f       	andi	r25, 0xF7	; 247
    2e16:	90 93 62 00 	sts	0x0062, r25
    2e1a:	ef e8       	ldi	r30, 0x8F	; 143
    2e1c:	f1 e0       	ldi	r31, 0x01	; 1
    2e1e:	31 97       	sbiw	r30, 0x01	; 1
    2e20:	f1 f7       	brne	.-4      	; 0x2e1e <LCD_PutDec8+0x3a>
    2e22:	00 c0       	rjmp	.+0      	; 0x2e24 <LCD_PutDec8+0x40>
    2e24:	00 00       	nop
        flag = 1;
    2e26:	91 e0       	ldi	r25, 0x01	; 1
    }
    digit = 0;
    while (num >= 10) {
    2e28:	8a 30       	cpi	r24, 0x0A	; 10
    2e2a:	c0 f1       	brcs	.+112    	; 0x2e9c <LCD_PutDec8+0xb8>
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    while (num >= 10) {
        digit++;
    2e2e:	9f 5f       	subi	r25, 0xFF	; 255
        num -= 10;
    2e30:	8a 50       	subi	r24, 0x0A	; 10
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 10) {
    2e32:	8a 30       	cpi	r24, 0x0A	; 10
    2e34:	e0 f7       	brcc	.-8      	; 0x2e2e <LCD_PutDec8+0x4a>
        digit++;
        num -= 10;
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
    2e36:	21 e0       	ldi	r18, 0x01	; 1
    2e38:	2f b9       	out	0x0f, r18	; 15
    2e3a:	77 9b       	sbis	0x0e, 7	; 14
    2e3c:	fe cf       	rjmp	.-4      	; 0x2e3a <LCD_PutDec8+0x56>
    2e3e:	90 5d       	subi	r25, 0xD0	; 208
    2e40:	9f b9       	out	0x0f, r25	; 15
    2e42:	77 9b       	sbis	0x0e, 7	; 14
    2e44:	fe cf       	rjmp	.-4      	; 0x2e42 <LCD_PutDec8+0x5e>
    2e46:	90 91 62 00 	lds	r25, 0x0062
    2e4a:	98 60       	ori	r25, 0x08	; 8
    2e4c:	90 93 62 00 	sts	0x0062, r25
    2e50:	90 91 62 00 	lds	r25, 0x0062
    2e54:	97 7f       	andi	r25, 0xF7	; 247
    2e56:	90 93 62 00 	sts	0x0062, r25
    2e5a:	ef e8       	ldi	r30, 0x8F	; 143
    2e5c:	f1 e0       	ldi	r31, 0x01	; 1
    2e5e:	31 97       	sbiw	r30, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <LCD_PutDec8+0x7a>
    2e62:	00 c0       	rjmp	.+0      	; 0x2e64 <LCD_PutDec8+0x80>
    2e64:	00 00       	nop
        flag = 1;
    }
    digit = 0;
    while (num >= 1) {
    2e66:	88 23       	and	r24, r24
    2e68:	f9 f0       	breq	.+62     	; 0x2ea8 <LCD_PutDec8+0xc4>
    2e6a:	80 5d       	subi	r24, 0xD0	; 208
        digit++;
        num -= 1;
    }
    LCD_DATA(digit + 48);
    2e6c:	91 e0       	ldi	r25, 0x01	; 1
    2e6e:	9f b9       	out	0x0f, r25	; 15
    2e70:	77 9b       	sbis	0x0e, 7	; 14
    2e72:	fe cf       	rjmp	.-4      	; 0x2e70 <LCD_PutDec8+0x8c>
    2e74:	8f b9       	out	0x0f, r24	; 15
    2e76:	77 9b       	sbis	0x0e, 7	; 14
    2e78:	fe cf       	rjmp	.-4      	; 0x2e76 <LCD_PutDec8+0x92>
    2e7a:	80 91 62 00 	lds	r24, 0x0062
    2e7e:	88 60       	ori	r24, 0x08	; 8
    2e80:	80 93 62 00 	sts	0x0062, r24
    2e84:	80 91 62 00 	lds	r24, 0x0062
    2e88:	87 7f       	andi	r24, 0xF7	; 247
    2e8a:	80 93 62 00 	sts	0x0062, r24
    2e8e:	8f e8       	ldi	r24, 0x8F	; 143
    2e90:	91 e0       	ldi	r25, 0x01	; 1
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <LCD_PutDec8+0xae>
    2e96:	00 c0       	rjmp	.+0      	; 0x2e98 <LCD_PutDec8+0xb4>
    2e98:	00 00       	nop
    2e9a:	08 95       	ret
    digit = 0;
    while (num >= 10) {
        digit++;
        num -= 10;
    }
    if (digit > 0 || flag == 1) {
    2e9c:	91 30       	cpi	r25, 0x01	; 1
    2e9e:	19 f7       	brne	.-58     	; 0x2e66 <LCD_PutDec8+0x82>
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	c9 cf       	rjmp	.-110    	; 0x2e36 <LCD_PutDec8+0x52>
	Convert an 8 bit unsigned number to ASCII
	and display the result.
 */
void LCD_PutDec8(uint8_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	c0 cf       	rjmp	.-128    	; 0x2e28 <LCD_PutDec8+0x44>
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 1) {
    2ea8:	80 e3       	ldi	r24, 0x30	; 48
    2eaa:	e0 cf       	rjmp	.-64     	; 0x2e6c <LCD_PutDec8+0x88>
	and display the result.
 */
void LCD_PutDec8(uint8_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    while (num >= 100) {
    2eac:	89 2f       	mov	r24, r25
    2eae:	21 e3       	ldi	r18, 0x31	; 49
    2eb0:	a3 cf       	rjmp	.-186    	; 0x2df8 <LCD_PutDec8+0x14>

00002eb2 <LCD_PutDec16>:
	and display the result.
 */
void LCD_PutDec16(uint16_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    while (num >= 10000) {
    2eb2:	80 31       	cpi	r24, 0x10	; 16
    2eb4:	27 e2       	ldi	r18, 0x27	; 39
    2eb6:	92 07       	cpc	r25, r18
    2eb8:	08 f4       	brcc	.+2      	; 0x2ebc <LCD_PutDec16+0xa>
    2eba:	bf c0       	rjmp	.+382    	; 0x303a <LCD_PutDec16+0x188>
/*
	Convert a 16 bit unsigned number to ASCII
	and display the result.
 */
void LCD_PutDec16(uint16_t num) {
    uint8_t digit = 0;
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <LCD_PutDec16+0x10>
    uint8_t flag = 0;
    while (num >= 10000) {
        digit++;
    2ec0:	23 2f       	mov	r18, r19
    2ec2:	31 e0       	ldi	r19, 0x01	; 1
    2ec4:	32 0f       	add	r19, r18
        num -= 10000;
    2ec6:	80 51       	subi	r24, 0x10	; 16
    2ec8:	97 42       	sbci	r25, 0x27	; 39
	and display the result.
 */
void LCD_PutDec16(uint16_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    while (num >= 10000) {
    2eca:	80 31       	cpi	r24, 0x10	; 16
    2ecc:	47 e2       	ldi	r20, 0x27	; 39
    2ece:	94 07       	cpc	r25, r20
    2ed0:	b8 f7       	brcc	.-18     	; 0x2ec0 <LCD_PutDec16+0xe>
        digit++;
        num -= 10000;
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
    2ed2:	31 e0       	ldi	r19, 0x01	; 1
    2ed4:	3f b9       	out	0x0f, r19	; 15
    2ed6:	77 9b       	sbis	0x0e, 7	; 14
    2ed8:	fe cf       	rjmp	.-4      	; 0x2ed6 <LCD_PutDec16+0x24>
    2eda:	2f 5c       	subi	r18, 0xCF	; 207
    2edc:	2f b9       	out	0x0f, r18	; 15
    2ede:	77 9b       	sbis	0x0e, 7	; 14
    2ee0:	fe cf       	rjmp	.-4      	; 0x2ede <LCD_PutDec16+0x2c>
    2ee2:	20 91 62 00 	lds	r18, 0x0062
    2ee6:	28 60       	ori	r18, 0x08	; 8
    2ee8:	20 93 62 00 	sts	0x0062, r18
    2eec:	20 91 62 00 	lds	r18, 0x0062
    2ef0:	27 7f       	andi	r18, 0xF7	; 247
    2ef2:	20 93 62 00 	sts	0x0062, r18
    2ef6:	ef e8       	ldi	r30, 0x8F	; 143
    2ef8:	f1 e0       	ldi	r31, 0x01	; 1
    2efa:	31 97       	sbiw	r30, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <LCD_PutDec16+0x48>
    2efe:	00 c0       	rjmp	.+0      	; 0x2f00 <LCD_PutDec16+0x4e>
    2f00:	00 00       	nop
        flag = 1;
    2f02:	21 e0       	ldi	r18, 0x01	; 1
    }
    digit = 0;
    while (num >= 1000) {
    2f04:	88 3e       	cpi	r24, 0xE8	; 232
    2f06:	f3 e0       	ldi	r31, 0x03	; 3
    2f08:	9f 07       	cpc	r25, r31
    2f0a:	08 f4       	brcc	.+2      	; 0x2f0e <LCD_PutDec16+0x5c>
    2f0c:	8e c0       	rjmp	.+284    	; 0x302a <LCD_PutDec16+0x178>
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    while (num >= 1000) {
        digit++;
    2f10:	2f 5f       	subi	r18, 0xFF	; 255
        num -= 1000;
    2f12:	88 5e       	subi	r24, 0xE8	; 232
    2f14:	93 40       	sbci	r25, 0x03	; 3
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 1000) {
    2f16:	88 3e       	cpi	r24, 0xE8	; 232
    2f18:	33 e0       	ldi	r19, 0x03	; 3
    2f1a:	93 07       	cpc	r25, r19
    2f1c:	c8 f7       	brcc	.-14     	; 0x2f10 <LCD_PutDec16+0x5e>
        digit++;
        num -= 1000;
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
    2f1e:	31 e0       	ldi	r19, 0x01	; 1
    2f20:	3f b9       	out	0x0f, r19	; 15
    2f22:	77 9b       	sbis	0x0e, 7	; 14
    2f24:	fe cf       	rjmp	.-4      	; 0x2f22 <LCD_PutDec16+0x70>
    2f26:	20 5d       	subi	r18, 0xD0	; 208
    2f28:	2f b9       	out	0x0f, r18	; 15
    2f2a:	77 9b       	sbis	0x0e, 7	; 14
    2f2c:	fe cf       	rjmp	.-4      	; 0x2f2a <LCD_PutDec16+0x78>
    2f2e:	20 91 62 00 	lds	r18, 0x0062
    2f32:	28 60       	ori	r18, 0x08	; 8
    2f34:	20 93 62 00 	sts	0x0062, r18
    2f38:	20 91 62 00 	lds	r18, 0x0062
    2f3c:	27 7f       	andi	r18, 0xF7	; 247
    2f3e:	20 93 62 00 	sts	0x0062, r18
    2f42:	ef e8       	ldi	r30, 0x8F	; 143
    2f44:	f1 e0       	ldi	r31, 0x01	; 1
    2f46:	31 97       	sbiw	r30, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <LCD_PutDec16+0x94>
    2f4a:	00 c0       	rjmp	.+0      	; 0x2f4c <LCD_PutDec16+0x9a>
    2f4c:	00 00       	nop
        flag = 1;
    2f4e:	31 e0       	ldi	r19, 0x01	; 1
    }
    digit = 0;
    while (num >= 100) {
    2f50:	84 36       	cpi	r24, 0x64	; 100
    2f52:	91 05       	cpc	r25, r1
    2f54:	08 f4       	brcc	.+2      	; 0x2f58 <LCD_PutDec16+0xa6>
    2f56:	65 c0       	rjmp	.+202    	; 0x3022 <LCD_PutDec16+0x170>
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    while (num >= 100) {
        digit++;
    2f5a:	2f 5f       	subi	r18, 0xFF	; 255
        num -= 100;
    2f5c:	84 56       	subi	r24, 0x64	; 100
    2f5e:	91 09       	sbc	r25, r1
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 100) {
    2f60:	84 36       	cpi	r24, 0x64	; 100
    2f62:	91 05       	cpc	r25, r1
    2f64:	d0 f7       	brcc	.-12     	; 0x2f5a <LCD_PutDec16+0xa8>
        digit++;
        num -= 100;
    }
    if (digit > 0 || flag == 1) {
    2f66:	22 23       	and	r18, r18
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <LCD_PutDec16+0xba>
    2f6a:	5b c0       	rjmp	.+182    	; 0x3022 <LCD_PutDec16+0x170>
        LCD_DATA(digit + 48);
    2f6c:	31 e0       	ldi	r19, 0x01	; 1
    2f6e:	3f b9       	out	0x0f, r19	; 15
    2f70:	77 9b       	sbis	0x0e, 7	; 14
    2f72:	fe cf       	rjmp	.-4      	; 0x2f70 <LCD_PutDec16+0xbe>
    2f74:	20 5d       	subi	r18, 0xD0	; 208
    2f76:	2f b9       	out	0x0f, r18	; 15
    2f78:	77 9b       	sbis	0x0e, 7	; 14
    2f7a:	fe cf       	rjmp	.-4      	; 0x2f78 <LCD_PutDec16+0xc6>
    2f7c:	20 91 62 00 	lds	r18, 0x0062
    2f80:	28 60       	ori	r18, 0x08	; 8
    2f82:	20 93 62 00 	sts	0x0062, r18
    2f86:	20 91 62 00 	lds	r18, 0x0062
    2f8a:	27 7f       	andi	r18, 0xF7	; 247
    2f8c:	20 93 62 00 	sts	0x0062, r18
    2f90:	ef e8       	ldi	r30, 0x8F	; 143
    2f92:	f1 e0       	ldi	r31, 0x01	; 1
    2f94:	31 97       	sbiw	r30, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <LCD_PutDec16+0xe2>
    2f98:	00 c0       	rjmp	.+0      	; 0x2f9a <LCD_PutDec16+0xe8>
    2f9a:	00 00       	nop
        flag = 1;
    2f9c:	31 e0       	ldi	r19, 0x01	; 1
    }
    digit = 0;
    while (num >= 10) {
    2f9e:	8a 30       	cpi	r24, 0x0A	; 10
    2fa0:	91 05       	cpc	r25, r1
    2fa2:	d8 f1       	brcs	.+118    	; 0x301a <LCD_PutDec16+0x168>
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    while (num >= 10) {
        digit++;
    2fa6:	2f 5f       	subi	r18, 0xFF	; 255
        num -= 10;
    2fa8:	0a 97       	sbiw	r24, 0x0a	; 10
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 10) {
    2faa:	8a 30       	cpi	r24, 0x0A	; 10
    2fac:	91 05       	cpc	r25, r1
    2fae:	d8 f7       	brcc	.-10     	; 0x2fa6 <LCD_PutDec16+0xf4>
        digit++;
        num -= 10;
    }
    if (digit > 0 || flag == 1) {
    2fb0:	22 23       	and	r18, r18
    2fb2:	99 f1       	breq	.+102    	; 0x301a <LCD_PutDec16+0x168>
        LCD_DATA(digit + 48);
    2fb4:	31 e0       	ldi	r19, 0x01	; 1
    2fb6:	3f b9       	out	0x0f, r19	; 15
    2fb8:	77 9b       	sbis	0x0e, 7	; 14
    2fba:	fe cf       	rjmp	.-4      	; 0x2fb8 <LCD_PutDec16+0x106>
    2fbc:	20 5d       	subi	r18, 0xD0	; 208
    2fbe:	2f b9       	out	0x0f, r18	; 15
    2fc0:	77 9b       	sbis	0x0e, 7	; 14
    2fc2:	fe cf       	rjmp	.-4      	; 0x2fc0 <LCD_PutDec16+0x10e>
    2fc4:	20 91 62 00 	lds	r18, 0x0062
    2fc8:	28 60       	ori	r18, 0x08	; 8
    2fca:	20 93 62 00 	sts	0x0062, r18
    2fce:	20 91 62 00 	lds	r18, 0x0062
    2fd2:	27 7f       	andi	r18, 0xF7	; 247
    2fd4:	20 93 62 00 	sts	0x0062, r18
    2fd8:	ef e8       	ldi	r30, 0x8F	; 143
    2fda:	f1 e0       	ldi	r31, 0x01	; 1
    2fdc:	31 97       	sbiw	r30, 0x01	; 1
    2fde:	f1 f7       	brne	.-4      	; 0x2fdc <LCD_PutDec16+0x12a>
    2fe0:	00 c0       	rjmp	.+0      	; 0x2fe2 <LCD_PutDec16+0x130>
    2fe2:	00 00       	nop
        flag = 1;
    }
    digit = 0;
    while (num >= 1) {
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	59 f1       	breq	.+86     	; 0x303e <LCD_PutDec16+0x18c>
    2fe8:	80 5d       	subi	r24, 0xD0	; 208
        digit++;
        num -= 1;
    }
    LCD_DATA(digit + 48);
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	9f b9       	out	0x0f, r25	; 15
    2fee:	77 9b       	sbis	0x0e, 7	; 14
    2ff0:	fe cf       	rjmp	.-4      	; 0x2fee <LCD_PutDec16+0x13c>
    2ff2:	8f b9       	out	0x0f, r24	; 15
    2ff4:	77 9b       	sbis	0x0e, 7	; 14
    2ff6:	fe cf       	rjmp	.-4      	; 0x2ff4 <LCD_PutDec16+0x142>
    2ff8:	80 91 62 00 	lds	r24, 0x0062
    2ffc:	88 60       	ori	r24, 0x08	; 8
    2ffe:	80 93 62 00 	sts	0x0062, r24
    3002:	80 91 62 00 	lds	r24, 0x0062
    3006:	87 7f       	andi	r24, 0xF7	; 247
    3008:	80 93 62 00 	sts	0x0062, r24
    300c:	8f e8       	ldi	r24, 0x8F	; 143
    300e:	91 e0       	ldi	r25, 0x01	; 1
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <LCD_PutDec16+0x15e>
    3014:	00 c0       	rjmp	.+0      	; 0x3016 <LCD_PutDec16+0x164>
    3016:	00 00       	nop
    3018:	08 95       	ret
    digit = 0;
    while (num >= 10) {
        digit++;
        num -= 10;
    }
    if (digit > 0 || flag == 1) {
    301a:	31 30       	cpi	r19, 0x01	; 1
    301c:	19 f7       	brne	.-58     	; 0x2fe4 <LCD_PutDec16+0x132>
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	c9 cf       	rjmp	.-110    	; 0x2fb4 <LCD_PutDec16+0x102>
    digit = 0;
    while (num >= 100) {
        digit++;
        num -= 100;
    }
    if (digit > 0 || flag == 1) {
    3022:	31 30       	cpi	r19, 0x01	; 1
    3024:	41 f0       	breq	.+16     	; 0x3036 <LCD_PutDec16+0x184>
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	ba cf       	rjmp	.-140    	; 0x2f9e <LCD_PutDec16+0xec>
    digit = 0;
    while (num >= 1000) {
        digit++;
        num -= 1000;
    }
    if (digit > 0 || flag == 1) {
    302a:	21 30       	cpi	r18, 0x01	; 1
    302c:	11 f0       	breq	.+4      	; 0x3032 <LCD_PutDec16+0x180>
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	8f cf       	rjmp	.-226    	; 0x2f50 <LCD_PutDec16+0x9e>
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	74 cf       	rjmp	.-280    	; 0x2f1e <LCD_PutDec16+0x6c>
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	99 cf       	rjmp	.-206    	; 0x2f6c <LCD_PutDec16+0xba>
	Convert a 16 bit unsigned number to ASCII
	and display the result.
 */
void LCD_PutDec16(uint16_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	63 cf       	rjmp	.-314    	; 0x2f04 <LCD_PutDec16+0x52>
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 1) {
    303e:	80 e3       	ldi	r24, 0x30	; 48
    3040:	d4 cf       	rjmp	.-88     	; 0x2fea <LCD_PutDec16+0x138>

00003042 <LCD_PutChar>:
/*
	Send an ASCII character to the LCD
	usage: LCD_PutChar('H');
 */
void LCD_PutChar(char a_char) {
    LCD_DATA(a_char);
    3042:	91 e0       	ldi	r25, 0x01	; 1
    3044:	9f b9       	out	0x0f, r25	; 15
    3046:	77 9b       	sbis	0x0e, 7	; 14
    3048:	fe cf       	rjmp	.-4      	; 0x3046 <LCD_PutChar+0x4>
    304a:	8f b9       	out	0x0f, r24	; 15
    304c:	77 9b       	sbis	0x0e, 7	; 14
    304e:	fe cf       	rjmp	.-4      	; 0x304c <LCD_PutChar+0xa>
    3050:	80 91 62 00 	lds	r24, 0x0062
    3054:	88 60       	ori	r24, 0x08	; 8
    3056:	80 93 62 00 	sts	0x0062, r24
    305a:	80 91 62 00 	lds	r24, 0x0062
    305e:	87 7f       	andi	r24, 0xF7	; 247
    3060:	80 93 62 00 	sts	0x0062, r24
    3064:	8f e8       	ldi	r24, 0x8F	; 143
    3066:	91 e0       	ldi	r25, 0x01	; 1
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	f1 f7       	brne	.-4      	; 0x3068 <LCD_PutChar+0x26>
    306c:	00 c0       	rjmp	.+0      	; 0x306e <LCD_PutChar+0x2c>
    306e:	00 00       	nop
    3070:	08 95       	ret

00003072 <LCD_PutStr>:
}

/*
	Send an ASCII string to the LCD
 */
void LCD_PutStr(char *lcd_str) {
    3072:	dc 01       	movw	r26, r24
    uint8_t count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
        LCD_DATA(lcd_str[count]);
    307a:	41 e0       	ldi	r20, 0x01	; 1
    307c:	4f b9       	out	0x0f, r20	; 15
    307e:	77 9b       	sbis	0x0e, 7	; 14
    3080:	fe cf       	rjmp	.-4      	; 0x307e <LCD_PutStr+0xc>
    3082:	fd 01       	movw	r30, r26
    3084:	e2 0f       	add	r30, r18
    3086:	f3 1f       	adc	r31, r19
    3088:	80 81       	ld	r24, Z
    308a:	8f b9       	out	0x0f, r24	; 15
    308c:	77 9b       	sbis	0x0e, 7	; 14
    308e:	fe cf       	rjmp	.-4      	; 0x308c <LCD_PutStr+0x1a>
    3090:	80 91 62 00 	lds	r24, 0x0062
    3094:	88 60       	ori	r24, 0x08	; 8
    3096:	80 93 62 00 	sts	0x0062, r24
    309a:	80 91 62 00 	lds	r24, 0x0062
    309e:	87 7f       	andi	r24, 0xF7	; 247
    30a0:	80 93 62 00 	sts	0x0062, r24
    30a4:	ef e8       	ldi	r30, 0x8F	; 143
    30a6:	f1 e0       	ldi	r31, 0x01	; 1
    30a8:	31 97       	sbiw	r30, 0x01	; 1
    30aa:	f1 f7       	brne	.-4      	; 0x30a8 <LCD_PutStr+0x36>
    30ac:	00 c0       	rjmp	.+0      	; 0x30ae <LCD_PutStr+0x3c>
    30ae:	00 00       	nop
/*
	Send an ASCII string to the LCD
 */
void LCD_PutStr(char *lcd_str) {
    uint8_t count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
    30b0:	9f 5f       	subi	r25, 0xFF	; 255
    30b2:	29 2f       	mov	r18, r25
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	fd 01       	movw	r30, r26
    30b8:	01 90       	ld	r0, Z+
    30ba:	00 20       	and	r0, r0
    30bc:	e9 f7       	brne	.-6      	; 0x30b8 <LCD_PutStr+0x46>
    30be:	ea 1b       	sub	r30, r26
    30c0:	fb 0b       	sbc	r31, r27
    30c2:	32 97       	sbiw	r30, 0x02	; 2
    30c4:	e2 17       	cp	r30, r18
    30c6:	f3 07       	cpc	r31, r19
    30c8:	c8 f6       	brcc	.-78     	; 0x307c <LCD_PutStr+0xa>
        LCD_DATA(lcd_str[count]);
    }
}
    30ca:	08 95       	ret

000030cc <LCD_SPIInit>:

void LCD_SPIInit(void) {
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
    30cc:	e1 e6       	ldi	r30, 0x61	; 97
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	88 60       	ori	r24, 0x08	; 8
    30d4:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initialization for SPI
    30d6:	88 b3       	in	r24, 0x18	; 24
    30d8:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK
    30da:	87 b3       	in	r24, 0x17	; 23
    30dc:	87 60       	ori	r24, 0x07	; 7
    30de:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first
    SPCR = 0x50;
    30e0:	80 e5       	ldi	r24, 0x50	; 80
    30e2:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	8e b9       	out	0x0e, r24	; 14
    30e8:	08 95       	ret

000030ea <LCD_Init>:
        LCD_DATA(lcd_str[count]);
    }
}

void LCD_SPIInit(void) {
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
    30ea:	80 91 61 00 	lds	r24, 0x0061
    30ee:	88 60       	ori	r24, 0x08	; 8
    30f0:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initialization for SPI
    30f4:	88 b3       	in	r24, 0x18	; 24
    30f6:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK
    30f8:	87 b3       	in	r24, 0x17	; 23
    30fa:	87 60       	ori	r24, 0x07	; 7
    30fc:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first
    SPCR = 0x50;
    30fe:	80 e5       	ldi	r24, 0x50	; 80
    3100:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	8e b9       	out	0x0e, r24	; 14
     */
    
    // Set the SPI settings
    LCD_SPIInit();
    
    DDRF |= 0x08;  // port F bit 3 is the enable strobe for the LCD
    3106:	80 91 61 00 	lds	r24, 0x0061
    310a:	88 60       	ori	r24, 0x08	; 8
    310c:	80 93 61 00 	sts	0x0061, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3110:	8f e5       	ldi	r24, 0x5F	; 95
    3112:	9a ee       	ldi	r25, 0xEA	; 234
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <LCD_Init+0x2a>
    3118:	00 c0       	rjmp	.+0      	; 0x311a <LCD_Init+0x30>
    311a:	00 00       	nop
    _delay_ms(15);
    
    // request 8 bit interface mode
    LCD_CMD(0x38);
    311c:	1f b8       	out	0x0f, r1	; 15
    311e:	77 9b       	sbis	0x0e, 7	; 14
    3120:	fe cf       	rjmp	.-4      	; 0x311e <LCD_Init+0x34>
    3122:	88 e3       	ldi	r24, 0x38	; 56
    3124:	8f b9       	out	0x0f, r24	; 15
    3126:	77 9b       	sbis	0x0e, 7	; 14
    3128:	fe cf       	rjmp	.-4      	; 0x3126 <LCD_Init+0x3c>
    312a:	80 91 62 00 	lds	r24, 0x0062
    312e:	88 60       	ori	r24, 0x08	; 8
    3130:	80 93 62 00 	sts	0x0062, r24
    3134:	80 91 62 00 	lds	r24, 0x0062
    3138:	87 7f       	andi	r24, 0xF7	; 247
    313a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    313e:	8f e8       	ldi	r24, 0x8F	; 143
    3140:	91 e0       	ldi	r25, 0x01	; 1
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	f1 f7       	brne	.-4      	; 0x3142 <LCD_Init+0x58>
    3146:	00 c0       	rjmp	.+0      	; 0x3148 <LCD_Init+0x5e>
    3148:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    314a:	8f e1       	ldi	r24, 0x1F	; 31
    314c:	9e e4       	ldi	r25, 0x4E	; 78
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <LCD_Init+0x64>
    3152:	00 c0       	rjmp	.+0      	; 0x3154 <LCD_Init+0x6a>
    3154:	00 00       	nop
    _delay_ms(5);
    
    // display off
    LCD_CMD(0x08);
    3156:	1f b8       	out	0x0f, r1	; 15
    3158:	77 9b       	sbis	0x0e, 7	; 14
    315a:	fe cf       	rjmp	.-4      	; 0x3158 <LCD_Init+0x6e>
    315c:	88 e0       	ldi	r24, 0x08	; 8
    315e:	8f b9       	out	0x0f, r24	; 15
    3160:	77 9b       	sbis	0x0e, 7	; 14
    3162:	fe cf       	rjmp	.-4      	; 0x3160 <LCD_Init+0x76>
    3164:	80 91 62 00 	lds	r24, 0x0062
    3168:	88 60       	ori	r24, 0x08	; 8
    316a:	80 93 62 00 	sts	0x0062, r24
    316e:	80 91 62 00 	lds	r24, 0x0062
    3172:	87 7f       	andi	r24, 0xF7	; 247
    3174:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3178:	8f e8       	ldi	r24, 0x8F	; 143
    317a:	91 e0       	ldi	r25, 0x01	; 1
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <LCD_Init+0x92>
    3180:	00 c0       	rjmp	.+0      	; 0x3182 <LCD_Init+0x98>
    3182:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3184:	8f e3       	ldi	r24, 0x3F	; 63
    3186:	9f e1       	ldi	r25, 0x1F	; 31
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <LCD_Init+0x9e>
    318c:	00 c0       	rjmp	.+0      	; 0x318e <LCD_Init+0xa4>
    318e:	00 00       	nop
    _delay_ms(2);
    
    // choose entry mode so that the cursor is incremented
    LCD_CMD(0x06);
    3190:	1f b8       	out	0x0f, r1	; 15
    3192:	77 9b       	sbis	0x0e, 7	; 14
    3194:	fe cf       	rjmp	.-4      	; 0x3192 <LCD_Init+0xa8>
    3196:	86 e0       	ldi	r24, 0x06	; 6
    3198:	8f b9       	out	0x0f, r24	; 15
    319a:	77 9b       	sbis	0x0e, 7	; 14
    319c:	fe cf       	rjmp	.-4      	; 0x319a <LCD_Init+0xb0>
    319e:	80 91 62 00 	lds	r24, 0x0062
    31a2:	88 60       	ori	r24, 0x08	; 8
    31a4:	80 93 62 00 	sts	0x0062, r24
    31a8:	80 91 62 00 	lds	r24, 0x0062
    31ac:	87 7f       	andi	r24, 0xF7	; 247
    31ae:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    31b2:	8f e8       	ldi	r24, 0x8F	; 143
    31b4:	91 e0       	ldi	r25, 0x01	; 1
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <LCD_Init+0xcc>
    31ba:	00 c0       	rjmp	.+0      	; 0x31bc <LCD_Init+0xd2>
    31bc:	00 00       	nop
     Each digit on the display uses a 5x8 matrix
     In order to customize the icon, you specify 5 bits
     for each of the 8 rows.
     */
    // Create a custom battery logo in slot 0
    LCD_CMD(0x40); // <-- address of custom slot 0
    31be:	1f b8       	out	0x0f, r1	; 15
    31c0:	77 9b       	sbis	0x0e, 7	; 14
    31c2:	fe cf       	rjmp	.-4      	; 0x31c0 <LCD_Init+0xd6>
    31c4:	80 e4       	ldi	r24, 0x40	; 64
    31c6:	8f b9       	out	0x0f, r24	; 15
    31c8:	77 9b       	sbis	0x0e, 7	; 14
    31ca:	fe cf       	rjmp	.-4      	; 0x31c8 <LCD_Init+0xde>
    31cc:	80 91 62 00 	lds	r24, 0x0062
    31d0:	88 60       	ori	r24, 0x08	; 8
    31d2:	80 93 62 00 	sts	0x0062, r24
    31d6:	80 91 62 00 	lds	r24, 0x0062
    31da:	87 7f       	andi	r24, 0xF7	; 247
    31dc:	80 93 62 00 	sts	0x0062, r24
    31e0:	8f e8       	ldi	r24, 0x8F	; 143
    31e2:	91 e0       	ldi	r25, 0x01	; 1
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	f1 f7       	brne	.-4      	; 0x31e4 <LCD_Init+0xfa>
    31e8:	00 c0       	rjmp	.+0      	; 0x31ea <LCD_Init+0x100>
    31ea:	00 00       	nop
    LCD_DATA(0x0E); // <-- top 5 pixels of icon
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	8f b9       	out	0x0f, r24	; 15
    31f0:	77 9b       	sbis	0x0e, 7	; 14
    31f2:	fe cf       	rjmp	.-4      	; 0x31f0 <LCD_Init+0x106>
    31f4:	8e e0       	ldi	r24, 0x0E	; 14
    31f6:	8f b9       	out	0x0f, r24	; 15
    31f8:	77 9b       	sbis	0x0e, 7	; 14
    31fa:	fe cf       	rjmp	.-4      	; 0x31f8 <LCD_Init+0x10e>
    31fc:	80 91 62 00 	lds	r24, 0x0062
    3200:	88 60       	ori	r24, 0x08	; 8
    3202:	80 93 62 00 	sts	0x0062, r24
    3206:	80 91 62 00 	lds	r24, 0x0062
    320a:	87 7f       	andi	r24, 0xF7	; 247
    320c:	80 93 62 00 	sts	0x0062, r24
    3210:	8f e8       	ldi	r24, 0x8F	; 143
    3212:	91 e0       	ldi	r25, 0x01	; 1
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <LCD_Init+0x12a>
    3218:	00 c0       	rjmp	.+0      	; 0x321a <LCD_Init+0x130>
    321a:	00 00       	nop
    LCD_DATA(0x1B); // <-- next 5 pixels of icon
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	8f b9       	out	0x0f, r24	; 15
    3220:	77 9b       	sbis	0x0e, 7	; 14
    3222:	fe cf       	rjmp	.-4      	; 0x3220 <LCD_Init+0x136>
    3224:	8b e1       	ldi	r24, 0x1B	; 27
    3226:	8f b9       	out	0x0f, r24	; 15
    3228:	77 9b       	sbis	0x0e, 7	; 14
    322a:	fe cf       	rjmp	.-4      	; 0x3228 <LCD_Init+0x13e>
    322c:	80 91 62 00 	lds	r24, 0x0062
    3230:	88 60       	ori	r24, 0x08	; 8
    3232:	80 93 62 00 	sts	0x0062, r24
    3236:	80 91 62 00 	lds	r24, 0x0062
    323a:	87 7f       	andi	r24, 0xF7	; 247
    323c:	80 93 62 00 	sts	0x0062, r24
    3240:	8f e8       	ldi	r24, 0x8F	; 143
    3242:	91 e0       	ldi	r25, 0x01	; 1
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <LCD_Init+0x15a>
    3248:	00 c0       	rjmp	.+0      	; 0x324a <LCD_Init+0x160>
    324a:	00 00       	nop
    LCD_DATA(0x11);
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	8f b9       	out	0x0f, r24	; 15
    3250:	77 9b       	sbis	0x0e, 7	; 14
    3252:	fe cf       	rjmp	.-4      	; 0x3250 <LCD_Init+0x166>
    3254:	81 e1       	ldi	r24, 0x11	; 17
    3256:	8f b9       	out	0x0f, r24	; 15
    3258:	77 9b       	sbis	0x0e, 7	; 14
    325a:	fe cf       	rjmp	.-4      	; 0x3258 <LCD_Init+0x16e>
    325c:	80 91 62 00 	lds	r24, 0x0062
    3260:	88 60       	ori	r24, 0x08	; 8
    3262:	80 93 62 00 	sts	0x0062, r24
    3266:	80 91 62 00 	lds	r24, 0x0062
    326a:	87 7f       	andi	r24, 0xF7	; 247
    326c:	80 93 62 00 	sts	0x0062, r24
    3270:	8f e8       	ldi	r24, 0x8F	; 143
    3272:	91 e0       	ldi	r25, 0x01	; 1
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <LCD_Init+0x18a>
    3278:	00 c0       	rjmp	.+0      	; 0x327a <LCD_Init+0x190>
    327a:	00 00       	nop
    LCD_DATA(0x11);
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	8f b9       	out	0x0f, r24	; 15
    3280:	77 9b       	sbis	0x0e, 7	; 14
    3282:	fe cf       	rjmp	.-4      	; 0x3280 <LCD_Init+0x196>
    3284:	81 e1       	ldi	r24, 0x11	; 17
    3286:	8f b9       	out	0x0f, r24	; 15
    3288:	77 9b       	sbis	0x0e, 7	; 14
    328a:	fe cf       	rjmp	.-4      	; 0x3288 <LCD_Init+0x19e>
    328c:	80 91 62 00 	lds	r24, 0x0062
    3290:	88 60       	ori	r24, 0x08	; 8
    3292:	80 93 62 00 	sts	0x0062, r24
    3296:	80 91 62 00 	lds	r24, 0x0062
    329a:	87 7f       	andi	r24, 0xF7	; 247
    329c:	80 93 62 00 	sts	0x0062, r24
    32a0:	8f e8       	ldi	r24, 0x8F	; 143
    32a2:	91 e0       	ldi	r25, 0x01	; 1
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <LCD_Init+0x1ba>
    32a8:	00 c0       	rjmp	.+0      	; 0x32aa <LCD_Init+0x1c0>
    32aa:	00 00       	nop
    LCD_DATA(0x11);
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	8f b9       	out	0x0f, r24	; 15
    32b0:	77 9b       	sbis	0x0e, 7	; 14
    32b2:	fe cf       	rjmp	.-4      	; 0x32b0 <LCD_Init+0x1c6>
    32b4:	81 e1       	ldi	r24, 0x11	; 17
    32b6:	8f b9       	out	0x0f, r24	; 15
    32b8:	77 9b       	sbis	0x0e, 7	; 14
    32ba:	fe cf       	rjmp	.-4      	; 0x32b8 <LCD_Init+0x1ce>
    32bc:	80 91 62 00 	lds	r24, 0x0062
    32c0:	88 60       	ori	r24, 0x08	; 8
    32c2:	80 93 62 00 	sts	0x0062, r24
    32c6:	80 91 62 00 	lds	r24, 0x0062
    32ca:	87 7f       	andi	r24, 0xF7	; 247
    32cc:	80 93 62 00 	sts	0x0062, r24
    32d0:	8f e8       	ldi	r24, 0x8F	; 143
    32d2:	91 e0       	ldi	r25, 0x01	; 1
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	f1 f7       	brne	.-4      	; 0x32d4 <LCD_Init+0x1ea>
    32d8:	00 c0       	rjmp	.+0      	; 0x32da <LCD_Init+0x1f0>
    32da:	00 00       	nop
    LCD_DATA(0x11);
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	8f b9       	out	0x0f, r24	; 15
    32e0:	77 9b       	sbis	0x0e, 7	; 14
    32e2:	fe cf       	rjmp	.-4      	; 0x32e0 <LCD_Init+0x1f6>
    32e4:	81 e1       	ldi	r24, 0x11	; 17
    32e6:	8f b9       	out	0x0f, r24	; 15
    32e8:	77 9b       	sbis	0x0e, 7	; 14
    32ea:	fe cf       	rjmp	.-4      	; 0x32e8 <LCD_Init+0x1fe>
    32ec:	80 91 62 00 	lds	r24, 0x0062
    32f0:	88 60       	ori	r24, 0x08	; 8
    32f2:	80 93 62 00 	sts	0x0062, r24
    32f6:	80 91 62 00 	lds	r24, 0x0062
    32fa:	87 7f       	andi	r24, 0xF7	; 247
    32fc:	80 93 62 00 	sts	0x0062, r24
    3300:	8f e8       	ldi	r24, 0x8F	; 143
    3302:	91 e0       	ldi	r25, 0x01	; 1
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <LCD_Init+0x21a>
    3308:	00 c0       	rjmp	.+0      	; 0x330a <LCD_Init+0x220>
    330a:	00 00       	nop
    LCD_DATA(0x11);
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	8f b9       	out	0x0f, r24	; 15
    3310:	77 9b       	sbis	0x0e, 7	; 14
    3312:	fe cf       	rjmp	.-4      	; 0x3310 <LCD_Init+0x226>
    3314:	81 e1       	ldi	r24, 0x11	; 17
    3316:	8f b9       	out	0x0f, r24	; 15
    3318:	77 9b       	sbis	0x0e, 7	; 14
    331a:	fe cf       	rjmp	.-4      	; 0x3318 <LCD_Init+0x22e>
    331c:	80 91 62 00 	lds	r24, 0x0062
    3320:	88 60       	ori	r24, 0x08	; 8
    3322:	80 93 62 00 	sts	0x0062, r24
    3326:	80 91 62 00 	lds	r24, 0x0062
    332a:	87 7f       	andi	r24, 0xF7	; 247
    332c:	80 93 62 00 	sts	0x0062, r24
    3330:	8f e8       	ldi	r24, 0x8F	; 143
    3332:	91 e0       	ldi	r25, 0x01	; 1
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <LCD_Init+0x24a>
    3338:	00 c0       	rjmp	.+0      	; 0x333a <LCD_Init+0x250>
    333a:	00 00       	nop
    LCD_DATA(0x1F); // <-- bottom 5 pixels of icon
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	8f b9       	out	0x0f, r24	; 15
    3340:	77 9b       	sbis	0x0e, 7	; 14
    3342:	fe cf       	rjmp	.-4      	; 0x3340 <LCD_Init+0x256>
    3344:	8f e1       	ldi	r24, 0x1F	; 31
    3346:	8f b9       	out	0x0f, r24	; 15
    3348:	77 9b       	sbis	0x0e, 7	; 14
    334a:	fe cf       	rjmp	.-4      	; 0x3348 <LCD_Init+0x25e>
    334c:	80 91 62 00 	lds	r24, 0x0062
    3350:	88 60       	ori	r24, 0x08	; 8
    3352:	80 93 62 00 	sts	0x0062, r24
    3356:	80 91 62 00 	lds	r24, 0x0062
    335a:	87 7f       	andi	r24, 0xF7	; 247
    335c:	80 93 62 00 	sts	0x0062, r24
    3360:	8f e8       	ldi	r24, 0x8F	; 143
    3362:	91 e0       	ldi	r25, 0x01	; 1
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <LCD_Init+0x27a>
    3368:	00 c0       	rjmp	.+0      	; 0x336a <LCD_Init+0x280>
    336a:	00 00       	nop
    
    /*
     Clear the screen and enable the LCD
     */	
    // clear display
    LCD_CMD(0x01);
    336c:	1f b8       	out	0x0f, r1	; 15
    336e:	77 9b       	sbis	0x0e, 7	; 14
    3370:	fe cf       	rjmp	.-4      	; 0x336e <LCD_Init+0x284>
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	8f b9       	out	0x0f, r24	; 15
    3376:	77 9b       	sbis	0x0e, 7	; 14
    3378:	fe cf       	rjmp	.-4      	; 0x3376 <LCD_Init+0x28c>
    337a:	80 91 62 00 	lds	r24, 0x0062
    337e:	88 60       	ori	r24, 0x08	; 8
    3380:	80 93 62 00 	sts	0x0062, r24
    3384:	80 91 62 00 	lds	r24, 0x0062
    3388:	87 7f       	andi	r24, 0xF7	; 247
    338a:	80 93 62 00 	sts	0x0062, r24
    338e:	8f e8       	ldi	r24, 0x8F	; 143
    3390:	91 e0       	ldi	r25, 0x01	; 1
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	f1 f7       	brne	.-4      	; 0x3392 <LCD_Init+0x2a8>
    3396:	00 c0       	rjmp	.+0      	; 0x3398 <LCD_Init+0x2ae>
    3398:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    339a:	8f e1       	ldi	r24, 0x1F	; 31
    339c:	9e e4       	ldi	r25, 0x4E	; 78
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	f1 f7       	brne	.-4      	; 0x339e <LCD_Init+0x2b4>
    33a2:	00 c0       	rjmp	.+0      	; 0x33a4 <LCD_Init+0x2ba>
    33a4:	00 00       	nop
    _delay_ms(5);
    
    // display on
    LCD_CMD(0x0C);
    33a6:	1f b8       	out	0x0f, r1	; 15
    33a8:	77 9b       	sbis	0x0e, 7	; 14
    33aa:	fe cf       	rjmp	.-4      	; 0x33a8 <LCD_Init+0x2be>
    33ac:	8c e0       	ldi	r24, 0x0C	; 12
    33ae:	8f b9       	out	0x0f, r24	; 15
    33b0:	77 9b       	sbis	0x0e, 7	; 14
    33b2:	fe cf       	rjmp	.-4      	; 0x33b0 <LCD_Init+0x2c6>
    33b4:	80 91 62 00 	lds	r24, 0x0062
    33b8:	88 60       	ori	r24, 0x08	; 8
    33ba:	80 93 62 00 	sts	0x0062, r24
    33be:	80 91 62 00 	lds	r24, 0x0062
    33c2:	87 7f       	andi	r24, 0xF7	; 247
    33c4:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33c8:	8f e8       	ldi	r24, 0x8F	; 143
    33ca:	91 e0       	ldi	r25, 0x01	; 1
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <LCD_Init+0x2e2>
    33d0:	00 c0       	rjmp	.+0      	; 0x33d2 <LCD_Init+0x2e8>
    33d2:	00 00       	nop
    33d4:	08 95       	ret

000033d6 <get_int_status>:
//
//TODO: update for interrupts
//
uint8_t get_int_status(){
    
    si4734_wr_buf[0] = GET_INT_STATUS;
    33d6:	84 e1       	ldi	r24, 0x14	; 20
    33d8:	80 93 a6 02 	sts	0x02A6, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	66 ea       	ldi	r22, 0xA6	; 166
    33e0:	72 e0       	ldi	r23, 0x02	; 2
    33e2:	82 e2       	ldi	r24, 0x22	; 34
    33e4:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    33e8:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <twi_busy>
    33ec:	81 11       	cpse	r24, r1
    33ee:	fc cf       	rjmp	.-8      	; 0x33e8 <get_int_status+0x12>
    33f0:	8f ea       	ldi	r24, 0xAF	; 175
    33f2:	94 e0       	ldi	r25, 0x04	; 4
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <get_int_status+0x1e>
    33f8:	00 c0       	rjmp	.+0      	; 0x33fa <get_int_status+0x24>
    33fa:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status
    33fc:	41 e0       	ldi	r20, 0x01	; 1
    33fe:	67 ec       	ldi	r22, 0xC7	; 199
    3400:	72 e0       	ldi	r23, 0x02	; 2
    3402:	82 e2       	ldi	r24, 0x22	; 34
    3404:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    3408:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <twi_busy>
    340c:	81 11       	cpse	r24, r1
    340e:	fc cf       	rjmp	.-8      	; 0x3408 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
    
}
    3410:	80 91 c7 02 	lds	r24, 0x02C7
    3414:	08 95       	ret

00003416 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
    si4734_wr_buf[0] = 0x20;  //fm tune command
    3416:	80 e2       	ldi	r24, 0x20	; 32
    3418:	80 93 a6 02 	sts	0x02A6, r24
    si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    341c:	10 92 a7 02 	sts	0x02A7, r1
    si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    3420:	80 91 0f 01 	lds	r24, 0x010F
    3424:	90 91 10 01 	lds	r25, 0x0110
    3428:	90 93 a8 02 	sts	0x02A8, r25
    si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    342c:	80 93 a9 02 	sts	0x02A9, r24
    si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    3430:	10 92 aa 02 	sts	0x02AA, r1
    //send fm tune command
    STC_interrupt = FALSE;
    3434:	10 92 23 02 	sts	0x0223, r1
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    3438:	45 e0       	ldi	r20, 0x05	; 5
    343a:	66 ea       	ldi	r22, 0xA6	; 166
    343c:	72 e0       	ldi	r23, 0x02	; 2
    343e:	82 e2       	ldi	r24, 0x22	; 34
    3440:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <twi_start_wr>

00003444 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
    si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
    3444:	80 e4       	ldi	r24, 0x40	; 64
    3446:	80 93 a6 02 	sts	0x02A6, r24
    si4734_wr_buf[1] = 0x00;         //no FAST tune
    344a:	10 92 a7 02 	sts	0x02A7, r1
    si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    344e:	80 91 0f 02 	lds	r24, 0x020F
    3452:	90 91 10 02 	lds	r25, 0x0210
    3456:	90 93 a8 02 	sts	0x02A8, r25
    si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    345a:	80 93 a9 02 	sts	0x02A9, r24
    si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    345e:	10 92 aa 02 	sts	0x02AA, r1
    si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    3462:	10 92 ab 02 	sts	0x02AB, r1
    //send am tune command
    STC_interrupt = FALSE;
    3466:	10 92 23 02 	sts	0x0223, r1
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    346a:	46 e0       	ldi	r20, 0x06	; 6
    346c:	66 ea       	ldi	r22, 0xA6	; 166
    346e:	72 e0       	ldi	r23, 0x02	; 2
    3470:	82 e2       	ldi	r24, 0x22	; 34
    3472:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
    while( ! STC_interrupt ){}; //spin until the tune command finishes
    3476:	80 91 23 02 	lds	r24, 0x0223
    347a:	88 23       	and	r24, r24
    347c:	e1 f3       	breq	.-8      	; 0x3476 <am_tune_freq+0x32>
}
    347e:	08 95       	ret

00003480 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
    si4734_wr_buf[0] = 0x40;  //am tune command
    3480:	80 e4       	ldi	r24, 0x40	; 64
    3482:	80 93 a6 02 	sts	0x02A6, r24
    si4734_wr_buf[1] = 0x00;  //no FAST tune
    3486:	10 92 a7 02 	sts	0x02A7, r1
    si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    348a:	80 91 25 02 	lds	r24, 0x0225
    348e:	90 91 26 02 	lds	r25, 0x0226
    3492:	90 93 a8 02 	sts	0x02A8, r25
    si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    3496:	80 93 a9 02 	sts	0x02A9, r24
    si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    349a:	10 92 aa 02 	sts	0x02AA, r1
    si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	80 93 ab 02 	sts	0x02AB, r24
    //send am tune command
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    34a4:	46 e0       	ldi	r20, 0x06	; 6
    34a6:	66 ea       	ldi	r22, 0xA6	; 166
    34a8:	72 e0       	ldi	r23, 0x02	; 2
    34aa:	82 e2       	ldi	r24, 0x22	; 34
    34ac:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34b0:	2f ef       	ldi	r18, 0xFF	; 255
    34b2:	87 ee       	ldi	r24, 0xE7	; 231
    34b4:	93 e0       	ldi	r25, 0x03	; 3
    34b6:	21 50       	subi	r18, 0x01	; 1
    34b8:	80 40       	sbci	r24, 0x00	; 0
    34ba:	90 40       	sbci	r25, 0x00	; 0
    34bc:	e1 f7       	brne	.-8      	; 0x34b6 <sw_tune_freq+0x36>
    34be:	00 c0       	rjmp	.+0      	; 0x34c0 <sw_tune_freq+0x40>
    34c0:	00 00       	nop
    34c2:	08 95       	ret

000034c4 <radio_pwr_dwn>:
//                            radio_pwr_dwn()
//
void radio_pwr_dwn(){
    
    //save current frequency to EEPROM
    switch(current_radio_band){
    34c4:	80 91 c6 01 	lds	r24, 0x01C6
    34c8:	90 91 c7 01 	lds	r25, 0x01C7
    34cc:	81 30       	cpi	r24, 0x01	; 1
    34ce:	91 05       	cpc	r25, r1
    34d0:	51 f1       	breq	.+84     	; 0x3526 <radio_pwr_dwn+0x62>
    34d2:	00 f1       	brcs	.+64     	; 0x3514 <radio_pwr_dwn+0x50>
    34d4:	02 97       	sbiw	r24, 0x02	; 2
    34d6:	41 f4       	brne	.+16     	; 0x34e8 <radio_pwr_dwn+0x24>
        case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
        case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
        case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
    34d8:	60 91 25 02 	lds	r22, 0x0225
    34dc:	70 91 26 02 	lds	r23, 0x0226
    34e0:	89 e2       	ldi	r24, 0x29	; 41
    34e2:	92 e0       	ldi	r25, 0x02	; 2
    34e4:	0e 94 09 20 	call	0x4012	; 0x4012 <__eewr_word_m128>
        default  : break;
    }//switch
    
    eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
    34e8:	60 91 f5 01 	lds	r22, 0x01F5
    34ec:	8e ed       	ldi	r24, 0xDE	; 222
    34ee:	91 e0       	ldi	r25, 0x01	; 1
    34f0:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__eewr_byte_m128>
    
    //send fm power down command
    si4734_wr_buf[0] = 0x11;
    34f4:	81 e1       	ldi	r24, 0x11	; 17
    34f6:	80 93 a6 02 	sts	0x02A6, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    34fa:	41 e0       	ldi	r20, 0x01	; 1
    34fc:	66 ea       	ldi	r22, 0xA6	; 166
    34fe:	72 e0       	ldi	r23, 0x02	; 2
    3500:	82 e2       	ldi	r24, 0x22	; 34
    3502:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3506:	87 ed       	ldi	r24, 0xD7	; 215
    3508:	94 e0       	ldi	r25, 0x04	; 4
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	f1 f7       	brne	.-4      	; 0x350a <radio_pwr_dwn+0x46>
    350e:	00 c0       	rjmp	.+0      	; 0x3510 <radio_pwr_dwn+0x4c>
    3510:	00 00       	nop
    3512:	08 95       	ret
//
void radio_pwr_dwn(){
    
    //save current frequency to EEPROM
    switch(current_radio_band){
        case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
    3514:	60 91 0f 01 	lds	r22, 0x010F
    3518:	70 91 10 01 	lds	r23, 0x0110
    351c:	80 ee       	ldi	r24, 0xE0	; 224
    351e:	91 e0       	ldi	r25, 0x01	; 1
    3520:	0e 94 09 20 	call	0x4012	; 0x4012 <__eewr_word_m128>
    3524:	e1 cf       	rjmp	.-62     	; 0x34e8 <radio_pwr_dwn+0x24>
        case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
    3526:	60 91 0f 02 	lds	r22, 0x020F
    352a:	70 91 10 02 	lds	r23, 0x0210
    352e:	81 ef       	ldi	r24, 0xF1	; 241
    3530:	91 e0       	ldi	r25, 0x01	; 1
    3532:	0e 94 09 20 	call	0x4012	; 0x4012 <__eewr_word_m128>
    3536:	d8 cf       	rjmp	.-80     	; 0x34e8 <radio_pwr_dwn+0x24>

00003538 <fm_rsq_status>:
//inside the chip.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    3538:	83 e2       	ldi	r24, 0x23	; 35
    353a:	80 93 a6 02 	sts	0x02A6, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	80 93 a7 02 	sts	0x02A7, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    3544:	42 e0       	ldi	r20, 0x02	; 2
    3546:	66 ea       	ldi	r22, 0xA6	; 166
    3548:	72 e0       	ldi	r23, 0x02	; 2
    354a:	82 e2       	ldi	r24, 0x22	; 34
    354c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    3550:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <twi_busy>
    3554:	81 11       	cpse	r24, r1
    3556:	fc cf       	rjmp	.-8      	; 0x3550 <fm_rsq_status+0x18>
    3558:	8f ea       	ldi	r24, 0xAF	; 175
    355a:	94 e0       	ldi	r25, 0x04	; 4
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <fm_rsq_status+0x24>
    3560:	00 c0       	rjmp	.+0      	; 0x3562 <fm_rsq_status+0x2a>
    3562:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you
    //when the command is received and has been processed.
    //get the fm tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    3564:	48 e0       	ldi	r20, 0x08	; 8
    3566:	6f ea       	ldi	r22, 0xAF	; 175
    3568:	72 e0       	ldi	r23, 0x02	; 2
    356a:	82 e2       	ldi	r24, 0x22	; 34
    356c:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    3570:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <twi_busy>
    3574:	81 11       	cpse	r24, r1
    3576:	fc cf       	rjmp	.-8      	; 0x3570 <fm_rsq_status+0x38>
}
    3578:	08 95       	ret

0000357a <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){
    
    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    357a:	82 e2       	ldi	r24, 0x22	; 34
    357c:	80 93 a6 02 	sts	0x02A6, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	80 93 a7 02 	sts	0x02A7, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    3586:	42 e0       	ldi	r20, 0x02	; 2
    3588:	66 ea       	ldi	r22, 0xA6	; 166
    358a:	72 e0       	ldi	r23, 0x02	; 2
    358c:	82 e2       	ldi	r24, 0x22	; 34
    358e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    3592:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <twi_busy>
    3596:	81 11       	cpse	r24, r1
    3598:	fc cf       	rjmp	.-8      	; 0x3592 <fm_tune_status+0x18>
    359a:	8f ea       	ldi	r24, 0xAF	; 175
    359c:	94 e0       	ldi	r25, 0x04	; 4
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <fm_tune_status+0x24>
    35a2:	00 c0       	rjmp	.+0      	; 0x35a4 <fm_tune_status+0x2a>
    35a4:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    35a6:	48 e0       	ldi	r20, 0x08	; 8
    35a8:	6f ea       	ldi	r22, 0xAF	; 175
    35aa:	72 e0       	ldi	r23, 0x02	; 2
    35ac:	82 e2       	ldi	r24, 0x22	; 34
    35ae:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    35b2:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <twi_busy>
    35b6:	81 11       	cpse	r24, r1
    35b8:	fc cf       	rjmp	.-8      	; 0x35b2 <fm_tune_status+0x38>
}
    35ba:	08 95       	ret

000035bc <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){
    
    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    35bc:	82 e4       	ldi	r24, 0x42	; 66
    35be:	80 93 a6 02 	sts	0x02A6, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	80 93 a7 02 	sts	0x02A7, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    35c8:	42 e0       	ldi	r20, 0x02	; 2
    35ca:	66 ea       	ldi	r22, 0xA6	; 166
    35cc:	72 e0       	ldi	r23, 0x02	; 2
    35ce:	82 e2       	ldi	r24, 0x22	; 34
    35d0:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    35d4:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <twi_busy>
    35d8:	81 11       	cpse	r24, r1
    35da:	fc cf       	rjmp	.-8      	; 0x35d4 <am_tune_status+0x18>
    35dc:	8f ea       	ldi	r24, 0xAF	; 175
    35de:	94 e0       	ldi	r25, 0x04	; 4
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <am_tune_status+0x24>
    35e4:	00 c0       	rjmp	.+0      	; 0x35e6 <am_tune_status+0x2a>
    35e6:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    35e8:	48 e0       	ldi	r20, 0x08	; 8
    35ea:	6f ea       	ldi	r22, 0xAF	; 175
    35ec:	72 e0       	ldi	r23, 0x02	; 2
    35ee:	82 e2       	ldi	r24, 0x22	; 34
    35f0:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <twi_start_rd>

000035f4 <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){
    
    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    35f4:	83 e4       	ldi	r24, 0x43	; 67
    35f6:	80 93 a6 02 	sts	0x02A6, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	80 93 a7 02 	sts	0x02A7, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    3600:	42 e0       	ldi	r20, 0x02	; 2
    3602:	66 ea       	ldi	r22, 0xA6	; 166
    3604:	72 e0       	ldi	r23, 0x02	; 2
    3606:	82 e2       	ldi	r24, 0x22	; 34
    3608:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    360c:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <twi_busy>
    3610:	81 11       	cpse	r24, r1
    3612:	fc cf       	rjmp	.-8      	; 0x360c <am_rsq_status+0x18>
    3614:	8f ea       	ldi	r24, 0xAF	; 175
    3616:	94 e0       	ldi	r25, 0x04	; 4
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	f1 f7       	brne	.-4      	; 0x3618 <am_rsq_status+0x24>
    361c:	00 c0       	rjmp	.+0      	; 0x361e <am_rsq_status+0x2a>
    361e:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    3620:	48 e0       	ldi	r20, 0x08	; 8
    3622:	6f ea       	ldi	r22, 0xAF	; 175
    3624:	72 e0       	ldi	r23, 0x02	; 2
    3626:	82 e2       	ldi	r24, 0x22	; 34
    3628:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <twi_start_rd>

0000362c <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms.
//
void set_property(uint16_t property, uint16_t property_value){
    
    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    362c:	22 e1       	ldi	r18, 0x12	; 18
    362e:	20 93 a6 02 	sts	0x02A6, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    3632:	10 92 a7 02 	sts	0x02A7, r1
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    3636:	90 93 a8 02 	sts	0x02A8, r25
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    363a:	80 93 a9 02 	sts	0x02A9, r24
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    363e:	70 93 aa 02 	sts	0x02AA, r23
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    3642:	60 93 ab 02 	sts	0x02AB, r22
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    3646:	46 e0       	ldi	r20, 0x06	; 6
    3648:	66 ea       	ldi	r22, 0xA6	; 166
    364a:	72 e0       	ldi	r23, 0x02	; 2
    364c:	82 e2       	ldi	r24, 0x22	; 34
    364e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3652:	8f e3       	ldi	r24, 0x3F	; 63
    3654:	9c e9       	ldi	r25, 0x9C	; 156
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <set_property+0x2a>
    365a:	00 c0       	rjmp	.+0      	; 0x365c <set_property+0x30>
    365c:	00 00       	nop
    365e:	08 95       	ret

00003660 <fm_pwr_up>:
    /*
     current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work
     current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work
     */
    //send fm power up command
    si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	80 93 a6 02 	sts	0x02A6, r24
    si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    3666:	80 e5       	ldi	r24, 0x50	; 80
    3668:	80 93 a7 02 	sts	0x02A7, r24
    si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    366c:	85 e0       	ldi	r24, 0x05	; 5
    366e:	80 93 a8 02 	sts	0x02A8, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    3672:	43 e0       	ldi	r20, 0x03	; 3
    3674:	66 ea       	ldi	r22, 0xA6	; 166
    3676:	72 e0       	ldi	r23, 0x02	; 2
    3678:	82 e2       	ldi	r24, 0x22	; 34
    367a:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
    367e:	2f ef       	ldi	r18, 0xFF	; 255
    3680:	82 e5       	ldi	r24, 0x52	; 82
    3682:	97 e0       	ldi	r25, 0x07	; 7
    3684:	21 50       	subi	r18, 0x01	; 1
    3686:	80 40       	sbci	r24, 0x00	; 0
    3688:	90 40       	sbci	r25, 0x00	; 0
    368a:	e1 f7       	brne	.-8      	; 0x3684 <fm_pwr_up+0x24>
    368c:	00 c0       	rjmp	.+0      	; 0x368e <fm_pwr_up+0x2e>
    368e:	00 00       	nop
    _delay_ms(150);               //startup delay as specified
    //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
    //low pulse will be output from GPIO2/INT when tune or seek is completed.
    set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    3690:	61 e0       	ldi	r22, 0x01	; 1
    3692:	70 e0       	ldi	r23, 0x00	; 0
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	0c 94 16 1b 	jmp	0x362c	; 0x362c <set_property>

0000369c <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
    //restore the previous am frequency
    current_am_freq = eeprom_read_word(&eeprom_am_freq);
    369c:	81 ef       	ldi	r24, 0xF1	; 241
    369e:	91 e0       	ldi	r25, 0x01	; 1
    36a0:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__eerd_word_m128>
    36a4:	90 93 10 02 	sts	0x0210, r25
    36a8:	80 93 0f 02 	sts	0x020F, r24
    current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work
    36ac:	8e ed       	ldi	r24, 0xDE	; 222
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__eerd_byte_m128>
    36b4:	80 93 f5 01 	sts	0x01F5, r24
    
    //send am power up command
    si4734_wr_buf[0] = AM_PWR_UP;
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	80 93 a6 02 	sts	0x02A6, r24
    si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    36be:	81 e5       	ldi	r24, 0x51	; 81
    36c0:	80 93 a7 02 	sts	0x02A7, r24
    si4734_wr_buf[2] = 0x05;
    36c4:	85 e0       	ldi	r24, 0x05	; 5
    36c6:	80 93 a8 02 	sts	0x02A8, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    36ca:	43 e0       	ldi	r20, 0x03	; 3
    36cc:	66 ea       	ldi	r22, 0xA6	; 166
    36ce:	72 e0       	ldi	r23, 0x02	; 2
    36d0:	82 e2       	ldi	r24, 0x22	; 34
    36d2:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
    36d6:	2f ef       	ldi	r18, 0xFF	; 255
    36d8:	8b ed       	ldi	r24, 0xDB	; 219
    36da:	95 e0       	ldi	r25, 0x05	; 5
    36dc:	21 50       	subi	r18, 0x01	; 1
    36de:	80 40       	sbci	r24, 0x00	; 0
    36e0:	90 40       	sbci	r25, 0x00	; 0
    36e2:	e1 f7       	brne	.-8      	; 0x36dc <am_pwr_up+0x40>
    36e4:	00 c0       	rjmp	.+0      	; 0x36e6 <am_pwr_up+0x4a>
    36e6:	00 00       	nop
    _delay_ms(120);
    set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    36e8:	61 e0       	ldi	r22, 0x01	; 1
    36ea:	70 e0       	ldi	r23, 0x00	; 0
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	0c 94 16 1b 	jmp	0x362c	; 0x362c <set_property>

000036f4 <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
    //restore the previous sw frequency
    current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    36f4:	89 e2       	ldi	r24, 0x29	; 41
    36f6:	92 e0       	ldi	r25, 0x02	; 2
    36f8:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__eerd_word_m128>
    36fc:	90 93 26 02 	sts	0x0226, r25
    3700:	80 93 25 02 	sts	0x0225, r24
    current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work
    3704:	8e ed       	ldi	r24, 0xDE	; 222
    3706:	91 e0       	ldi	r25, 0x01	; 1
    3708:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__eerd_byte_m128>
    370c:	80 93 f5 01 	sts	0x01F5, r24
    
    //send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	80 93 a6 02 	sts	0x02A6, r24
    si4734_wr_buf[1] = 0x51;
    3716:	81 e5       	ldi	r24, 0x51	; 81
    3718:	80 93 a7 02 	sts	0x02A7, r24
    si4734_wr_buf[2] = 0x05;
    371c:	85 e0       	ldi	r24, 0x05	; 5
    371e:	80 93 a8 02 	sts	0x02A8, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    3722:	43 e0       	ldi	r20, 0x03	; 3
    3724:	66 ea       	ldi	r22, 0xA6	; 166
    3726:	72 e0       	ldi	r23, 0x02	; 2
    3728:	82 e2       	ldi	r24, 0x22	; 34
    372a:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_start_wr>
    372e:	2f ef       	ldi	r18, 0xFF	; 255
    3730:	8b ed       	ldi	r24, 0xDB	; 219
    3732:	95 e0       	ldi	r25, 0x05	; 5
    3734:	21 50       	subi	r18, 0x01	; 1
    3736:	80 40       	sbci	r24, 0x00	; 0
    3738:	90 40       	sbci	r25, 0x00	; 0
    373a:	e1 f7       	brne	.-8      	; 0x3734 <sw_pwr_up+0x40>
    373c:	00 c0       	rjmp	.+0      	; 0x373e <sw_pwr_up+0x4a>
    373e:	00 00       	nop
    _delay_ms(120);   //start up delay
    
    //set property to disable soft muting for shortwave broadcasts
    set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	70 e0       	ldi	r23, 0x00	; 0
    3744:	82 e0       	ldi	r24, 0x02	; 2
    3746:	93 e3       	ldi	r25, 0x33	; 51
    3748:	0e 94 16 1b 	call	0x362c	; 0x362c <set_property>
    //select 4khz filter BW and engage power line filter
    set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER));
    374c:	61 e0       	ldi	r22, 0x01	; 1
    374e:	71 e0       	ldi	r23, 0x01	; 1
    3750:	82 e0       	ldi	r24, 0x02	; 2
    3752:	91 e3       	ldi	r25, 0x31	; 49
    3754:	0e 94 16 1b 	call	0x362c	; 0x362c <set_property>
    set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    3758:	61 e0       	ldi	r22, 0x01	; 1
    375a:	70 e0       	ldi	r23, 0x00	; 0
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	0c 94 16 1b 	jmp	0x362c	; 0x362c <set_property>

00003764 <reset_radio>:
}//set_property()


void reset_radio(){
    //hardware reset of Si4734
    PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
    3764:	1f 98       	cbi	0x03, 7	; 3
    DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
    3766:	17 9a       	sbi	0x02, 7	; 2
    PORTE |=  (1<<PE2); //hardware reset Si4734
    3768:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    376a:	8f e1       	ldi	r24, 0x1F	; 31
    376c:	93 e0       	ldi	r25, 0x03	; 3
    376e:	01 97       	sbiw	r24, 0x01	; 1
    3770:	f1 f7       	brne	.-4      	; 0x376e <reset_radio+0xa>
    3772:	00 c0       	rjmp	.+0      	; 0x3774 <reset_radio+0x10>
    3774:	00 00       	nop
    _delay_us(200);     //hold for 200us, 100us by spec
    PORTE &= ~(1<<PE2); //release reset
    3776:	1a 98       	cbi	0x03, 2	; 3
    3778:	90 ea       	ldi	r25, 0xA0	; 160
    377a:	9a 95       	dec	r25
    377c:	f1 f7       	brne	.-4      	; 0x377a <reset_radio+0x16>
    _delay_us(30);      //5us required because of my slow I2C translators I suspect
    //Si code in "low" has 30us delay...no explaination in documentation
    DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
    377e:	17 98       	cbi	0x02, 7	; 2
    3780:	08 95       	ret

00003782 <radio_int_init>:
}

void radio_int_init(){
    EIMSK |= 0x80;
    3782:	89 b7       	in	r24, 0x39	; 57
    3784:	80 68       	ori	r24, 0x80	; 128
    3786:	89 bf       	out	0x39, r24	; 57
    EICRB |= (1<<ISC71 | 1<<ISC70);
    3788:	8a b7       	in	r24, 0x3a	; 58
    378a:	80 6c       	ori	r24, 0xC0	; 192
    378c:	8a bf       	out	0x3a, r24	; 58
    378e:	08 95       	ret

00003790 <radio_str>:
}

void radio_str(){
    while(twi_busy()){}                //spin while TWI is busy
    3790:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <twi_busy>
    3794:	81 11       	cpse	r24, r1
    3796:	fc cf       	rjmp	.-8      	; 0x3790 <radio_str>
    fm_rsq_status();                   //get status of radio tuning operation
    3798:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fm_rsq_status>
    rssi =  si4734_tune_status_buf[4]; //get tune status
    379c:	80 91 b3 02 	lds	r24, 0x02B3
    //redefine rssi to be a thermometer code
    if(rssi<= 8) {rssi = 0x00;} else
    37a0:	89 30       	cpi	r24, 0x09	; 9
    37a2:	b0 f0       	brcs	.+44     	; 0x37d0 <radio_str+0x40>
        if(rssi<=16) {rssi = 0x01;} else
    37a4:	81 31       	cpi	r24, 0x11	; 17
    37a6:	80 f0       	brcs	.+32     	; 0x37c8 <radio_str+0x38>
            if(rssi<=24) {rssi = 0x03;} else
    37a8:	89 31       	cpi	r24, 0x19	; 25
    37aa:	a8 f0       	brcs	.+42     	; 0x37d6 <radio_str+0x46>
                if(rssi<=32) {rssi = 0x07;} else
    37ac:	81 32       	cpi	r24, 0x21	; 33
    37ae:	b8 f0       	brcs	.+46     	; 0x37de <radio_str+0x4e>
                    if(rssi<=40) {rssi = 0x0F;} else
    37b0:	89 32       	cpi	r24, 0x29	; 41
    37b2:	c8 f0       	brcs	.+50     	; 0x37e6 <radio_str+0x56>
                        if(rssi<=48) {rssi = 0x1F;} else
    37b4:	81 33       	cpi	r24, 0x31	; 49
    37b6:	d8 f0       	brcs	.+54     	; 0x37ee <radio_str+0x5e>
                            if(rssi<=56) {rssi = 0x3F;} else
    37b8:	89 33       	cpi	r24, 0x39	; 57
    37ba:	e8 f0       	brcs	.+58     	; 0x37f6 <radio_str+0x66>
                                if(rssi<=64) {rssi = 0x7F;} else
    37bc:	81 34       	cpi	r24, 0x41	; 65
    37be:	f8 f0       	brcs	.+62     	; 0x37fe <radio_str+0x6e>
                                    if(rssi>=64) {rssi = 0xFF;}
    37c0:	8f ef       	ldi	r24, 0xFF	; 255
    37c2:	80 93 27 02 	sts	0x0227, r24
    37c6:	08 95       	ret
    while(twi_busy()){}                //spin while TWI is busy
    fm_rsq_status();                   //get status of radio tuning operation
    rssi =  si4734_tune_status_buf[4]; //get tune status
    //redefine rssi to be a thermometer code
    if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x01;} else
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	80 93 27 02 	sts	0x0227, r24
    37ce:	08 95       	ret
void radio_str(){
    while(twi_busy()){}                //spin while TWI is busy
    fm_rsq_status();                   //get status of radio tuning operation
    rssi =  si4734_tune_status_buf[4]; //get tune status
    //redefine rssi to be a thermometer code
    if(rssi<= 8) {rssi = 0x00;} else
    37d0:	10 92 27 02 	sts	0x0227, r1
    37d4:	08 95       	ret
        if(rssi<=16) {rssi = 0x01;} else
            if(rssi<=24) {rssi = 0x03;} else
    37d6:	83 e0       	ldi	r24, 0x03	; 3
    37d8:	80 93 27 02 	sts	0x0227, r24
    37dc:	08 95       	ret
                if(rssi<=32) {rssi = 0x07;} else
    37de:	87 e0       	ldi	r24, 0x07	; 7
    37e0:	80 93 27 02 	sts	0x0227, r24
    37e4:	08 95       	ret
                    if(rssi<=40) {rssi = 0x0F;} else
    37e6:	8f e0       	ldi	r24, 0x0F	; 15
    37e8:	80 93 27 02 	sts	0x0227, r24
    37ec:	08 95       	ret
                        if(rssi<=48) {rssi = 0x1F;} else
    37ee:	8f e1       	ldi	r24, 0x1F	; 31
    37f0:	80 93 27 02 	sts	0x0227, r24
    37f4:	08 95       	ret
                            if(rssi<=56) {rssi = 0x3F;} else
    37f6:	8f e3       	ldi	r24, 0x3F	; 63
    37f8:	80 93 27 02 	sts	0x0227, r24
    37fc:	08 95       	ret
                                if(rssi<=64) {rssi = 0x7F;} else
    37fe:	8f e7       	ldi	r24, 0x7F	; 127
    3800:	80 93 27 02 	sts	0x0227, r24
    3804:	08 95       	ret

00003806 <main>:
//  S6 - runs alarm snooze
//  S7 - tune the radio
//***********************************************************************************
int main() {
    
    radio_init();  //initialize SI4734 radio board
    3806:	0e 94 cf 14 	call	0x299e	; 0x299e <radio_init>

    DDRB = 0xFF;     //set PORTB as all outputs
    380a:	8f ef       	ldi	r24, 0xFF	; 255
    380c:	87 bb       	out	0x17, r24	; 23
    DDRE |= 0xFF;    // Set CLK_INH, SH/LD as output(PE7,PE6) and OCR3A (PE3)
    380e:	92 b1       	in	r25, 0x02	; 2
    3810:	82 b9       	out	0x02, r24	; 2
    DDRA = 0x00;     //set port A to all inputs (for the 7 segment)
    3812:	1a ba       	out	0x1a, r1	; 26
    
    music_init();  //runs the necessary init methods from kellen_music.c (tcnt1 initialized here)
    3814:	0e 94 83 0c 	call	0x1906	; 0x1906 <music_init>
// parameters are set up: master mode, clock=clk/2, half phase cycle,
// low polarity, MSB first interrupts disabled, poll SPIF bit in SPSR to
// check transmit completion.
/***********************************************************************/
void spi_init(void){
    SPCR |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
    3818:	8d b1       	in	r24, 0x0d	; 13
    381a:	80 65       	ori	r24, 0x50	; 80
    381c:	8d b9       	out	0x0d, r24	; 13
    SPSR |= (1<<SPI2X);   // double speed operation
    381e:	70 9a       	sbi	0x0e, 0	; 14
    DDRE |= 0xFF;    // Set CLK_INH, SH/LD as output(PE7,PE6) and OCR3A (PE3)
    DDRA = 0x00;     //set port A to all inputs (for the 7 segment)
    
    music_init();  //runs the necessary init methods from kellen_music.c (tcnt1 initialized here)
    spi_init();    //initialize spi to send data to bar graph
    adc_init();    //initialize adc for photoresistor PWM
    3820:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <adc_init>
// Initializes timer/counter0. TCNT0 allows running
// in async mode with an external 32khz crystal. If running in normal mode,
// there is no prescaling. Overflow interrupt occurs at 0xFF.
/***********************************************************************/
void tcnt0_init(void){
    ASSR  |= (1<<AS0);  //ext osc TOSC
    3824:	80 b7       	in	r24, 0x30	; 48
    3826:	88 60       	ori	r24, 0x08	; 8
    3828:	80 bf       	out	0x30, r24	; 48
    TIMSK |= (1<<TOIE0);  //enable timer/counter0 overflow interrupt
    382a:	87 b7       	in	r24, 0x37	; 55
    382c:	81 60       	ori	r24, 0x01	; 1
    382e:	87 bf       	out	0x37, r24	; 55
    TCCR0 |= (1<<CS00);  //normal mode, no prescale
    3830:	83 b7       	in	r24, 0x33	; 51
    3832:	81 60       	ori	r24, 0x01	; 1
    3834:	83 bf       	out	0x33, r24	; 51
//***********************************************************************/
//                          tcnt2_init
// Initialize timer counter 2 to allow LED dimming through PWM
//***********************************************************************/
void tcnt2_init(void){
    DDRB  |= (1<<PB7);
    3836:	bf 9a       	sbi	0x17, 7	; 23
    TCCR2 &= (0<<FOC2); //no forced compare. fast pwm mode. Set OC2 on compare match
    3838:	85 b5       	in	r24, 0x25	; 37
    383a:	15 bc       	out	0x25, r1	; 37
    TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20);
    383c:	85 b5       	in	r24, 0x25	; 37
    383e:	88 67       	ori	r24, 0x78	; 120
    3840:	85 bd       	out	0x25, r24	; 37
    TCCR2 |= (1<<CS20); //normal mode, no prescaler
    3842:	85 b5       	in	r24, 0x25	; 37
    3844:	81 60       	ori	r24, 0x01	; 1
    3846:	85 bd       	out	0x25, r24	; 37
    OCR2  = 0x00; //initialize OCR register for PWM
    3848:	13 bc       	out	0x23, r1	; 35
    music_init();  //runs the necessary init methods from kellen_music.c (tcnt1 initialized here)
    spi_init();    //initialize spi to send data to bar graph
    adc_init();    //initialize adc for photoresistor PWM
    tcnt0_init();  //initalize counter/timer0 (for 32kHz clock timebase)
    tcnt2_init();  //initalize counter/timer2 (for LED dimming through PWM)
    tcnt3_init();  //initalize counter/timer3 (for volume control pwm)
    384a:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <tcnt3_init>
    init_twi();    //initialize the TWI (twi_master.h)
    384e:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <init_twi>
    uart_init();   //initialize uart for temperature readings from mega48
    3852:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <uart_init>
    LCD_Init();    //initialize LCD for status displays
    3856:	0e 94 75 18 	call	0x30ea	; 0x30ea <LCD_Init>
    sei();         //enable global interrupts
    385a:	78 94       	sei
    
    
    //power up, and tune the fm_radio
    fm_pwr_up(); //powerup the radio as appropriate
    385c:	0e 94 30 1b 	call	0x3660	; 0x3660 <fm_pwr_up>
    fm_tune_freq(); //tune radio to frequency in current_fm_freq
    3860:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fm_tune_freq>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3864:	2f ef       	ldi	r18, 0xFF	; 255
    3866:	83 ed       	ldi	r24, 0xD3	; 211
    3868:	90 e3       	ldi	r25, 0x30	; 48
    386a:	21 50       	subi	r18, 0x01	; 1
    386c:	80 40       	sbci	r24, 0x00	; 0
    386e:	90 40       	sbci	r25, 0x00	; 0
    3870:	e1 f7       	brne	.-8      	; 0x386a <main+0x64>
    3872:	00 c0       	rjmp	.+0      	; 0x3874 <main+0x6e>
    3874:	00 00       	nop
    _delay_ms(1000); //radio code is very slow, so add a delay to let pwr up and tuning finish running
    current_fm_freq = 9990; //arg2, arg3: 99.9Mhz, 200khz steps
    3876:	c6 e0       	ldi	r28, 0x06	; 6
    3878:	d7 e2       	ldi	r29, 0x27	; 39
    387a:	d0 93 10 01 	sts	0x0110, r29
    387e:	c0 93 0f 01 	sts	0x010F, r28
    fm_tune_freq();
    3882:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fm_tune_freq>
    
    current_fm_freq = 9990; //arg2, arg3: 99.9Mhz, 200khz steps
    3886:	d0 93 10 01 	sts	0x0110, r29
    388a:	c0 93 0f 01 	sts	0x010F, r28
    fm_tune_freq();
    388e:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fm_tune_freq>
    
    current_fm_freq = 9990; //arg2, arg3: 99.9Mhz, 200khz steps
    3892:	d0 93 10 01 	sts	0x0110, r29
    3896:	c0 93 0f 01 	sts	0x010F, r28
    fm_tune_freq();
    389a:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fm_tune_freq>
    
    current_fm_freq = 9990; //arg2, arg3: 99.9Mhz, 200khz steps
    389e:	d0 93 10 01 	sts	0x0110, r29
    38a2:	c0 93 0f 01 	sts	0x010F, r28
    fm_tune_freq();
    38a6:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fm_tune_freq>
    
    current_fm_freq = 9990; //arg2, arg3: 99.9Mhz, 200khz steps
    38aa:	d0 93 10 01 	sts	0x0110, r29
    38ae:	c0 93 0f 01 	sts	0x010F, r28
    fm_tune_freq();
    38b2:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fm_tune_freq>
    
    //Set TWI pointer to the temperature output
    lm73_set_ptr_to_read();
    38b6:	0e 94 23 16 	call	0x2c46	; 0x2c46 <lm73_set_ptr_to_read>
    
    //display temperature on LCD and time on LED
    displayTempFlag = 1;
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	80 93 a8 01 	sts	0x01A8, r24
    
    int tick = 1;
    
    while(1){
        //_delay_ms(3);
        PORTA = 0xFF;    //set port A to pullups
    38c0:	df ef       	ldi	r29, 0xFF	; 255
        PORTB = 0x70;    //enable the tristate buffer
    38c2:	10 e7       	ldi	r17, 0x70	; 112
        
        displayTimeFlag = 1; //displays time on default, instead of temperature
    38c4:	c1 e0       	ldi	r28, 0x01	; 1
            stop_alarm();
            clock_mode = 3;                       // set alarm minutes
            stop = 0;                       //reset alarm
            inc_multiple = 1;               //+/1
            s2_switch = !s2_switch;
            if (s2_switch)  clock_mode = 4; // set alarm hours
    38c6:	04 e0       	ldi	r16, 0x04	; 4
    38c8:	80 c0       	rjmp	.+256    	; 0x39ca <main+0x1c4>
            LCD_Init();     //initialize the LCD
            if (alarm_state == 0) LCD_PutStr("Alarm Mute");
            if (alarm_state == 1) LCD_PutStr("Alarm Active");
        }
        
        if (chk_buttons(2)) {        //change time mode
    38ca:	82 e0       	ldi	r24, 0x02	; 2
    38cc:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <chk_buttons>
    38d0:	89 2b       	or	r24, r25
    38d2:	41 f1       	breq	.+80     	; 0x3924 <main+0x11e>
            displayTempFlag = 0;
    38d4:	10 92 a8 01 	sts	0x01A8, r1
            displayTimeFlag = 1;
    38d8:	c0 93 00 01 	sts	0x0100, r28
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    38dc:	10 92 e9 01 	sts	0x01E9, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    38e0:	8e b5       	in	r24, 0x2e	; 46
    38e2:	8c 7f       	andi	r24, 0xFC	; 252
    38e4:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    38e6:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    38e8:	c0 93 df 01 	sts	0x01DF, r28
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm_state = 0;
    38ec:	10 92 01 01 	sts	0x0101, r1
    alarm = 0;     // reset alarm
    38f0:	10 92 ab 01 	sts	0x01AB, r1
        
        if (chk_buttons(2)) {        //change time mode
            displayTempFlag = 0;
            displayTimeFlag = 1;
            stop_alarm();
            clock_mode = 1; // set minutes
    38f4:	c0 93 b3 01 	sts	0x01B3, r28
            timer = 1;               //stop clock
    38f8:	c0 93 03 01 	sts	0x0103, r28
            inc_multiple = 1;        //+/- 1
    38fc:	c0 93 0e 02 	sts	0x020E, r28
            s2_switch = !s2_switch;
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	90 91 b2 01 	lds	r25, 0x01B2
    3906:	91 11       	cpse	r25, r1
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	80 93 b2 01 	sts	0x01B2, r24
            if (s2_switch)  clock_mode = 2;   // set hours
    390e:	88 23       	and	r24, r24
    3910:	19 f0       	breq	.+6      	; 0x3918 <main+0x112>
    3912:	82 e0       	ldi	r24, 0x02	; 2
    3914:	80 93 b3 01 	sts	0x01B3, r24
            LCD_Init();
    3918:	0e 94 75 18 	call	0x30ea	; 0x30ea <LCD_Init>
            LCD_PutStr("Set clock time");
    391c:	83 e5       	ldi	r24, 0x53	; 83
    391e:	91 e0       	ldi	r25, 0x01	; 1
    3920:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
        }
        
        if (chk_buttons(3)) {           //change alarm mode
    3924:	83 e0       	ldi	r24, 0x03	; 3
    3926:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <chk_buttons>
    392a:	89 2b       	or	r24, r25
    392c:	39 f1       	breq	.+78     	; 0x397c <main+0x176>
            displayTempFlag = 0;
    392e:	10 92 a8 01 	sts	0x01A8, r1
            displayTimeFlag = 1;
    3932:	c0 93 00 01 	sts	0x0100, r28
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    3936:	10 92 e9 01 	sts	0x01E9, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    393a:	8e b5       	in	r24, 0x2e	; 46
    393c:	8c 7f       	andi	r24, 0xFC	; 252
    393e:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    3940:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    3942:	c0 93 df 01 	sts	0x01DF, r28
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm_state = 0;
    3946:	10 92 01 01 	sts	0x0101, r1
    alarm = 0;     // reset alarm
    394a:	10 92 ab 01 	sts	0x01AB, r1
        
        if (chk_buttons(3)) {           //change alarm mode
            displayTempFlag = 0;
            displayTimeFlag = 1;
            stop_alarm();
            clock_mode = 3;                       // set alarm minutes
    394e:	83 e0       	ldi	r24, 0x03	; 3
    3950:	80 93 b3 01 	sts	0x01B3, r24
            stop = 0;                       //reset alarm
    3954:	10 92 aa 01 	sts	0x01AA, r1
            inc_multiple = 1;               //+/1
    3958:	c0 93 0e 02 	sts	0x020E, r28
            s2_switch = !s2_switch;
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	90 91 b2 01 	lds	r25, 0x01B2
    3962:	91 11       	cpse	r25, r1
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	80 93 b2 01 	sts	0x01B2, r24
            if (s2_switch)  clock_mode = 4; // set alarm hours
    396a:	81 11       	cpse	r24, r1
    396c:	00 93 b3 01 	sts	0x01B3, r16
            LCD_Init();
    3970:	0e 94 75 18 	call	0x30ea	; 0x30ea <LCD_Init>
            LCD_PutStr("Set clock alarm");
    3974:	82 e6       	ldi	r24, 0x62	; 98
    3976:	91 e0       	ldi	r25, 0x01	; 1
    3978:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
        }
        
        if (chk_buttons(4)) {
    397c:	84 e0       	ldi	r24, 0x04	; 4
    397e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <chk_buttons>
    3982:	89 2b       	or	r24, r25
    3984:	09 f0       	breq	.+2      	; 0x3988 <main+0x182>
    3986:	a6 c0       	rjmp	.+332    	; 0x3ad4 <main+0x2ce>
            LCD_PutStr("12/24 hour ");
            LCD_MovCursorLn2();
            LCD_PutStr("Mode change");
        }
        
        if (chk_buttons(5)) {               // stop alarm
    3988:	85 e0       	ldi	r24, 0x05	; 5
    398a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <chk_buttons>
    398e:	89 2b       	or	r24, r25
    3990:	09 f0       	breq	.+2      	; 0x3994 <main+0x18e>
    3992:	83 c0       	rjmp	.+262    	; 0x3a9a <main+0x294>
            alarm_s = 0;                    //reset snooze count
            LCD_Init();
            LCD_PutStr("Stop alarm");
        }
        
        if  (chk_buttons(6)){              //snooze function
    3994:	86 e0       	ldi	r24, 0x06	; 6
    3996:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <chk_buttons>
    399a:	89 2b       	or	r24, r25
    399c:	09 f0       	breq	.+2      	; 0x39a0 <main+0x19a>
    399e:	62 c0       	rjmp	.+196    	; 0x3a64 <main+0x25e>
            LCD_Init();
            LCD_PutStr("Snooze for 10s...");
        }
        
        
        if (chk_buttons(7)){              //tune the radio
    39a0:	87 e0       	ldi	r24, 0x07	; 7
    39a2:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <chk_buttons>
    39a6:	89 2b       	or	r24, r25
    39a8:	c9 f5       	brne	.+114    	; 0x3a1c <main+0x216>
            //LCD_PutStr("RT:");
            //tuneRadio();
        }
        
        
        if (displayTimeFlag == 1){
    39aa:	80 91 00 01 	lds	r24, 0x0100
    39ae:	81 30       	cpi	r24, 0x01	; 1
    39b0:	09 f4       	brne	.+2      	; 0x39b4 <main+0x1ae>
    39b2:	51 c0       	rjmp	.+162    	; 0x3a56 <main+0x250>
            //send sum to display 7-segment
            segment_value(digit_data);
        }
        
        if(displayTimeFlag == 0){
    39b4:	88 23       	and	r24, r24
    39b6:	69 f1       	breq	.+90     	; 0x3a12 <main+0x20c>
            //send frequency to be displayed to segment
            segment_value(frequency_data);
        }
        
        //reset encoder counter (important! you don't want to break the state machine)
        count = 0;
    39b8:	10 92 04 01 	sts	0x0104, r1
        
        //disable tristate buffer
        PORTB = 0x00;
    39bc:	18 ba       	out	0x18, r1	; 24
        
        //set port A to all output for 7-segment
        DDRA = 0xFF;
    39be:	da bb       	out	0x1a, r29	; 26
        
        //reset PORTA
        PORTA = 0x00;
    39c0:	1b ba       	out	0x1b, r1	; 27
        
        segment_display(segment_data);
    39c2:	8b eb       	ldi	r24, 0xBB	; 187
    39c4:	91 e0       	ldi	r25, 0x01	; 1
    39c6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <segment_display>
    
    int tick = 1;
    
    while(1){
        //_delay_ms(3);
        PORTA = 0xFF;    //set port A to pullups
    39ca:	db bb       	out	0x1b, r29	; 27
        PORTB = 0x70;    //enable the tristate buffer
    39cc:	18 bb       	out	0x18, r17	; 24
        
        displayTimeFlag = 1; //displays time on default, instead of temperature
    39ce:	c0 93 00 01 	sts	0x0100, r28
        
        if(displayTempFlag == 1){
    39d2:	80 91 a8 01 	lds	r24, 0x01A8
    39d6:	81 30       	cpi	r24, 0x01	; 1
    39d8:	09 f4       	brne	.+2      	; 0x39dc <main+0x1d6>
    39da:	94 c0       	rjmp	.+296    	; 0x3b04 <main+0x2fe>
            readLocalTemp();
            readRemoteTemp();
        }

        if (chk_buttons(1)) {
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <chk_buttons>
    39e2:	89 2b       	or	r24, r25
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <main+0x1e2>
    39e6:	71 cf       	rjmp	.-286    	; 0x38ca <main+0xc4>
            displayTempFlag = 0;
    39e8:	10 92 a8 01 	sts	0x01A8, r1
            displayTimeFlag = 1;
    39ec:	c0 93 00 01 	sts	0x0100, r28
            clock_mode = 0; //normal mode
    39f0:	10 92 b3 01 	sts	0x01B3, r1
            LCD_Init();     //initialize the LCD
    39f4:	0e 94 75 18 	call	0x30ea	; 0x30ea <LCD_Init>
            if (alarm_state == 0) LCD_PutStr("Alarm Mute");
    39f8:	80 91 01 01 	lds	r24, 0x0101
    39fc:	88 23       	and	r24, r24
    39fe:	09 f4       	brne	.+2      	; 0x3a02 <main+0x1fc>
    3a00:	86 c0       	rjmp	.+268    	; 0x3b0e <main+0x308>
            if (alarm_state == 1) LCD_PutStr("Alarm Active");
    3a02:	81 30       	cpi	r24, 0x01	; 1
    3a04:	09 f0       	breq	.+2      	; 0x3a08 <main+0x202>
    3a06:	61 cf       	rjmp	.-318    	; 0x38ca <main+0xc4>
    3a08:	86 e4       	ldi	r24, 0x46	; 70
    3a0a:	91 e0       	ldi	r25, 0x01	; 1
    3a0c:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
    3a10:	5c cf       	rjmp	.-328    	; 0x38ca <main+0xc4>
            segment_value(digit_data);
        }
        
        if(displayTimeFlag == 0){
            //send frequency to be displayed to segment
            segment_value(frequency_data);
    3a12:	87 ef       	ldi	r24, 0xF7	; 247
    3a14:	91 e0       	ldi	r25, 0x01	; 1
    3a16:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <segment_value>
    3a1a:	ce cf       	rjmp	.-100    	; 0x39b8 <main+0x1b2>
        }
        
        
        if (chk_buttons(7)){              //tune the radio
            
            displayTimeFlag = 0;          //set 0 so frequency can be displayed later
    3a1c:	10 92 00 01 	sts	0x0100, r1
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    3a20:	10 92 e9 01 	sts	0x01E9, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    3a24:	8e b5       	in	r24, 0x2e	; 46
    3a26:	8c 7f       	andi	r24, 0xFC	; 252
    3a28:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    3a2a:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    3a2c:	c0 93 df 01 	sts	0x01DF, r28
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm_state = 0;
    3a30:	10 92 01 01 	sts	0x0101, r1
    alarm = 0;     // reset alarm
    3a34:	10 92 ab 01 	sts	0x01AB, r1
        
        if (chk_buttons(7)){              //tune the radio
            
            displayTimeFlag = 0;          //set 0 so frequency can be displayed later
            stop_alarm();
            stop = 1;
    3a38:	c0 93 aa 01 	sts	0x01AA, r28
            LCD_Init();
    3a3c:	0e 94 75 18 	call	0x30ea	; 0x30ea <LCD_Init>
            readLocalTemp();
    3a40:	0e 94 60 14 	call	0x28c0	; 0x28c0 <readLocalTemp>
            LCD_MovCursorLn2();
    3a44:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_MovCursorLn2>
            readRemoteTemp();
    3a48:	0e 94 8b 14 	call	0x2916	; 0x2916 <readRemoteTemp>
            //LCD_PutStr("RT:");
            //tuneRadio();
        }
        
        
        if (displayTimeFlag == 1){
    3a4c:	80 91 00 01 	lds	r24, 0x0100
    3a50:	81 30       	cpi	r24, 0x01	; 1
    3a52:	09 f0       	breq	.+2      	; 0x3a56 <main+0x250>
    3a54:	af cf       	rjmp	.-162    	; 0x39b4 <main+0x1ae>
            //send sum to display 7-segment
            segment_value(digit_data);
    3a56:	84 ee       	ldi	r24, 0xE4	; 228
    3a58:	91 e0       	ldi	r25, 0x01	; 1
    3a5a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <segment_value>
    3a5e:	80 91 00 01 	lds	r24, 0x0100
    3a62:	a8 cf       	rjmp	.-176    	; 0x39b4 <main+0x1ae>
            LCD_Init();
            LCD_PutStr("Stop alarm");
        }
        
        if  (chk_buttons(6)){              //snooze function
            displayTempFlag = 0;
    3a64:	10 92 a8 01 	sts	0x01A8, r1
            displayTimeFlag = 1;
    3a68:	c0 93 00 01 	sts	0x0100, r28
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    3a6c:	10 92 e9 01 	sts	0x01E9, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    3a70:	8e b5       	in	r24, 0x2e	; 46
    3a72:	8c 7f       	andi	r24, 0xFC	; 252
    3a74:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    3a76:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    3a78:	c0 93 df 01 	sts	0x01DF, r28
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm_state = 0;
    3a7c:	10 92 01 01 	sts	0x0101, r1
    alarm = 0;     // reset alarm
    3a80:	10 92 ab 01 	sts	0x01AB, r1
        
        if  (chk_buttons(6)){              //snooze function
            displayTempFlag = 0;
            displayTimeFlag = 1;
            stop_alarm();
            stop = 1;
    3a84:	c0 93 aa 01 	sts	0x01AA, r28
            snooze_flag = 1;
    3a88:	c0 93 a9 01 	sts	0x01A9, r28
            LCD_Init();
    3a8c:	0e 94 75 18 	call	0x30ea	; 0x30ea <LCD_Init>
            LCD_PutStr("Snooze for 10s...");
    3a90:	85 e9       	ldi	r24, 0x95	; 149
    3a92:	91 e0       	ldi	r25, 0x01	; 1
    3a94:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
    3a98:	83 cf       	rjmp	.-250    	; 0x39a0 <main+0x19a>
            LCD_MovCursorLn2();
            LCD_PutStr("Mode change");
        }
        
        if (chk_buttons(5)) {               // stop alarm
            displayTempFlag = 0;
    3a9a:	10 92 a8 01 	sts	0x01A8, r1
            displayTimeFlag = 1;
    3a9e:	c0 93 00 01 	sts	0x0100, r28
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    3aa2:	10 92 e9 01 	sts	0x01E9, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    3aa6:	8e b5       	in	r24, 0x2e	; 46
    3aa8:	8c 7f       	andi	r24, 0xFC	; 252
    3aaa:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    3aac:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    3aae:	c0 93 df 01 	sts	0x01DF, r28
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm_state = 0;
    3ab2:	10 92 01 01 	sts	0x0101, r1
    alarm = 0;     // reset alarm
    3ab6:	10 92 ab 01 	sts	0x01AB, r1
        
        if (chk_buttons(5)) {               // stop alarm
            displayTempFlag = 0;
            displayTimeFlag = 1;
            stop_alarm();
            stop = 1;
    3aba:	c0 93 aa 01 	sts	0x01AA, r28
            snooze_flag = 0;                //reset snooze
    3abe:	10 92 a9 01 	sts	0x01A9, r1
            alarm_s = 0;                    //reset snooze count
    3ac2:	10 92 b0 01 	sts	0x01B0, r1
            LCD_Init();
    3ac6:	0e 94 75 18 	call	0x30ea	; 0x30ea <LCD_Init>
            LCD_PutStr("Stop alarm");
    3aca:	8a e8       	ldi	r24, 0x8A	; 138
    3acc:	91 e0       	ldi	r25, 0x01	; 1
    3ace:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
    3ad2:	60 cf       	rjmp	.-320    	; 0x3994 <main+0x18e>
            LCD_Init();
            LCD_PutStr("Set clock alarm");
        }
        
        if (chk_buttons(4)) {
            displayTempFlag = 0;
    3ad4:	10 92 a8 01 	sts	0x01A8, r1
            displayTimeFlag = 1;
    3ad8:	c0 93 00 01 	sts	0x0100, r28
            s4_switch = !s4_switch; // 12/24hr switching mode
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	90 91 b1 01 	lds	r25, 0x01B1
    3ae2:	91 11       	cpse	r25, r1
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	80 93 b1 01 	sts	0x01B1, r24
            LCD_Init();
    3aea:	0e 94 75 18 	call	0x30ea	; 0x30ea <LCD_Init>
            LCD_PutStr("12/24 hour ");
    3aee:	82 e7       	ldi	r24, 0x72	; 114
    3af0:	91 e0       	ldi	r25, 0x01	; 1
    3af2:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
            LCD_MovCursorLn2();
    3af6:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_MovCursorLn2>
            LCD_PutStr("Mode change");
    3afa:	8e e7       	ldi	r24, 0x7E	; 126
    3afc:	91 e0       	ldi	r25, 0x01	; 1
    3afe:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
    3b02:	42 cf       	rjmp	.-380    	; 0x3988 <main+0x182>
        PORTB = 0x70;    //enable the tristate buffer
        
        displayTimeFlag = 1; //displays time on default, instead of temperature
        
        if(displayTempFlag == 1){
            readLocalTemp();
    3b04:	0e 94 60 14 	call	0x28c0	; 0x28c0 <readLocalTemp>
            readRemoteTemp();
    3b08:	0e 94 8b 14 	call	0x2916	; 0x2916 <readRemoteTemp>
    3b0c:	67 cf       	rjmp	.-306    	; 0x39dc <main+0x1d6>
        if (chk_buttons(1)) {
            displayTempFlag = 0;
            displayTimeFlag = 1;
            clock_mode = 0; //normal mode
            LCD_Init();     //initialize the LCD
            if (alarm_state == 0) LCD_PutStr("Alarm Mute");
    3b0e:	8b e3       	ldi	r24, 0x3B	; 59
    3b10:	91 e0       	ldi	r25, 0x01	; 1
    3b12:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_PutStr>
    3b16:	80 91 01 01 	lds	r24, 0x0101
    3b1a:	73 cf       	rjmp	.-282    	; 0x3a02 <main+0x1fc>

00003b1c <__tablejump2__>:
    3b1c:	ee 0f       	add	r30, r30
    3b1e:	ff 1f       	adc	r31, r31

00003b20 <__tablejump__>:
    3b20:	05 90       	lpm	r0, Z+
    3b22:	f4 91       	lpm	r31, Z
    3b24:	e0 2d       	mov	r30, r0
    3b26:	09 94       	ijmp

00003b28 <itoa>:
    3b28:	45 32       	cpi	r20, 0x25	; 37
    3b2a:	51 05       	cpc	r21, r1
    3b2c:	20 f4       	brcc	.+8      	; 0x3b36 <itoa+0xe>
    3b2e:	42 30       	cpi	r20, 0x02	; 2
    3b30:	10 f0       	brcs	.+4      	; 0x3b36 <itoa+0xe>
    3b32:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__itoa_ncheck>
    3b36:	fb 01       	movw	r30, r22
    3b38:	10 82       	st	Z, r1
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	08 95       	ret

00003b3e <__itoa_ncheck>:
    3b3e:	bb 27       	eor	r27, r27
    3b40:	4a 30       	cpi	r20, 0x0A	; 10
    3b42:	31 f4       	brne	.+12     	; 0x3b50 <__itoa_ncheck+0x12>
    3b44:	99 23       	and	r25, r25
    3b46:	22 f4       	brpl	.+8      	; 0x3b50 <__itoa_ncheck+0x12>
    3b48:	bd e2       	ldi	r27, 0x2D	; 45
    3b4a:	90 95       	com	r25
    3b4c:	81 95       	neg	r24
    3b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b50:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__utoa_common>

00003b54 <__utoa_ncheck>:
    3b54:	bb 27       	eor	r27, r27

00003b56 <__utoa_common>:
    3b56:	fb 01       	movw	r30, r22
    3b58:	55 27       	eor	r21, r21
    3b5a:	aa 27       	eor	r26, r26
    3b5c:	88 0f       	add	r24, r24
    3b5e:	99 1f       	adc	r25, r25
    3b60:	aa 1f       	adc	r26, r26
    3b62:	a4 17       	cp	r26, r20
    3b64:	10 f0       	brcs	.+4      	; 0x3b6a <__utoa_common+0x14>
    3b66:	a4 1b       	sub	r26, r20
    3b68:	83 95       	inc	r24
    3b6a:	50 51       	subi	r21, 0x10	; 16
    3b6c:	b9 f7       	brne	.-18     	; 0x3b5c <__utoa_common+0x6>
    3b6e:	a0 5d       	subi	r26, 0xD0	; 208
    3b70:	aa 33       	cpi	r26, 0x3A	; 58
    3b72:	08 f0       	brcs	.+2      	; 0x3b76 <__utoa_common+0x20>
    3b74:	a9 5d       	subi	r26, 0xD9	; 217
    3b76:	a1 93       	st	Z+, r26
    3b78:	00 97       	sbiw	r24, 0x00	; 0
    3b7a:	79 f7       	brne	.-34     	; 0x3b5a <__utoa_common+0x4>
    3b7c:	b1 11       	cpse	r27, r1
    3b7e:	b1 93       	st	Z+, r27
    3b80:	11 92       	st	Z+, r1
    3b82:	cb 01       	movw	r24, r22
    3b84:	0c 94 24 20 	jmp	0x4048	; 0x4048 <strrev>

00003b88 <sprintf>:
    3b88:	0f 93       	push	r16
    3b8a:	1f 93       	push	r17
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	cd b7       	in	r28, 0x3d	; 61
    3b92:	de b7       	in	r29, 0x3e	; 62
    3b94:	2e 97       	sbiw	r28, 0x0e	; 14
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	f8 94       	cli
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	0f be       	out	0x3f, r0	; 63
    3b9e:	cd bf       	out	0x3d, r28	; 61
    3ba0:	0d 89       	ldd	r16, Y+21	; 0x15
    3ba2:	1e 89       	ldd	r17, Y+22	; 0x16
    3ba4:	86 e0       	ldi	r24, 0x06	; 6
    3ba6:	8c 83       	std	Y+4, r24	; 0x04
    3ba8:	1a 83       	std	Y+2, r17	; 0x02
    3baa:	09 83       	std	Y+1, r16	; 0x01
    3bac:	8f ef       	ldi	r24, 0xFF	; 255
    3bae:	9f e7       	ldi	r25, 0x7F	; 127
    3bb0:	9e 83       	std	Y+6, r25	; 0x06
    3bb2:	8d 83       	std	Y+5, r24	; 0x05
    3bb4:	ae 01       	movw	r20, r28
    3bb6:	47 5e       	subi	r20, 0xE7	; 231
    3bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    3bba:	6f 89       	ldd	r22, Y+23	; 0x17
    3bbc:	78 8d       	ldd	r23, Y+24	; 0x18
    3bbe:	ce 01       	movw	r24, r28
    3bc0:	01 96       	adiw	r24, 0x01	; 1
    3bc2:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <vfprintf>
    3bc6:	ef 81       	ldd	r30, Y+7	; 0x07
    3bc8:	f8 85       	ldd	r31, Y+8	; 0x08
    3bca:	e0 0f       	add	r30, r16
    3bcc:	f1 1f       	adc	r31, r17
    3bce:	10 82       	st	Z, r1
    3bd0:	2e 96       	adiw	r28, 0x0e	; 14
    3bd2:	0f b6       	in	r0, 0x3f	; 63
    3bd4:	f8 94       	cli
    3bd6:	de bf       	out	0x3e, r29	; 62
    3bd8:	0f be       	out	0x3f, r0	; 63
    3bda:	cd bf       	out	0x3d, r28	; 61
    3bdc:	df 91       	pop	r29
    3bde:	cf 91       	pop	r28
    3be0:	1f 91       	pop	r17
    3be2:	0f 91       	pop	r16
    3be4:	08 95       	ret

00003be6 <vfprintf>:
    3be6:	2f 92       	push	r2
    3be8:	3f 92       	push	r3
    3bea:	4f 92       	push	r4
    3bec:	5f 92       	push	r5
    3bee:	6f 92       	push	r6
    3bf0:	7f 92       	push	r7
    3bf2:	8f 92       	push	r8
    3bf4:	9f 92       	push	r9
    3bf6:	af 92       	push	r10
    3bf8:	bf 92       	push	r11
    3bfa:	cf 92       	push	r12
    3bfc:	df 92       	push	r13
    3bfe:	ef 92       	push	r14
    3c00:	ff 92       	push	r15
    3c02:	0f 93       	push	r16
    3c04:	1f 93       	push	r17
    3c06:	cf 93       	push	r28
    3c08:	df 93       	push	r29
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	2c 97       	sbiw	r28, 0x0c	; 12
    3c10:	0f b6       	in	r0, 0x3f	; 63
    3c12:	f8 94       	cli
    3c14:	de bf       	out	0x3e, r29	; 62
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	cd bf       	out	0x3d, r28	; 61
    3c1a:	7c 01       	movw	r14, r24
    3c1c:	6b 01       	movw	r12, r22
    3c1e:	8a 01       	movw	r16, r20
    3c20:	fc 01       	movw	r30, r24
    3c22:	17 82       	std	Z+7, r1	; 0x07
    3c24:	16 82       	std	Z+6, r1	; 0x06
    3c26:	83 81       	ldd	r24, Z+3	; 0x03
    3c28:	81 ff       	sbrs	r24, 1
    3c2a:	bd c1       	rjmp	.+890    	; 0x3fa6 <vfprintf+0x3c0>
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	01 96       	adiw	r24, 0x01	; 1
    3c30:	4c 01       	movw	r8, r24
    3c32:	f7 01       	movw	r30, r14
    3c34:	93 81       	ldd	r25, Z+3	; 0x03
    3c36:	f6 01       	movw	r30, r12
    3c38:	93 fd       	sbrc	r25, 3
    3c3a:	85 91       	lpm	r24, Z+
    3c3c:	93 ff       	sbrs	r25, 3
    3c3e:	81 91       	ld	r24, Z+
    3c40:	6f 01       	movw	r12, r30
    3c42:	88 23       	and	r24, r24
    3c44:	09 f4       	brne	.+2      	; 0x3c48 <vfprintf+0x62>
    3c46:	ab c1       	rjmp	.+854    	; 0x3f9e <vfprintf+0x3b8>
    3c48:	85 32       	cpi	r24, 0x25	; 37
    3c4a:	39 f4       	brne	.+14     	; 0x3c5a <vfprintf+0x74>
    3c4c:	93 fd       	sbrc	r25, 3
    3c4e:	85 91       	lpm	r24, Z+
    3c50:	93 ff       	sbrs	r25, 3
    3c52:	81 91       	ld	r24, Z+
    3c54:	6f 01       	movw	r12, r30
    3c56:	85 32       	cpi	r24, 0x25	; 37
    3c58:	29 f4       	brne	.+10     	; 0x3c64 <vfprintf+0x7e>
    3c5a:	b7 01       	movw	r22, r14
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	0e 94 34 20 	call	0x4068	; 0x4068 <fputc>
    3c62:	e7 cf       	rjmp	.-50     	; 0x3c32 <vfprintf+0x4c>
    3c64:	51 2c       	mov	r5, r1
    3c66:	31 2c       	mov	r3, r1
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	20 32       	cpi	r18, 0x20	; 32
    3c6c:	a0 f4       	brcc	.+40     	; 0x3c96 <vfprintf+0xb0>
    3c6e:	8b 32       	cpi	r24, 0x2B	; 43
    3c70:	69 f0       	breq	.+26     	; 0x3c8c <vfprintf+0xa6>
    3c72:	30 f4       	brcc	.+12     	; 0x3c80 <vfprintf+0x9a>
    3c74:	80 32       	cpi	r24, 0x20	; 32
    3c76:	59 f0       	breq	.+22     	; 0x3c8e <vfprintf+0xa8>
    3c78:	83 32       	cpi	r24, 0x23	; 35
    3c7a:	69 f4       	brne	.+26     	; 0x3c96 <vfprintf+0xb0>
    3c7c:	20 61       	ori	r18, 0x10	; 16
    3c7e:	2c c0       	rjmp	.+88     	; 0x3cd8 <vfprintf+0xf2>
    3c80:	8d 32       	cpi	r24, 0x2D	; 45
    3c82:	39 f0       	breq	.+14     	; 0x3c92 <vfprintf+0xac>
    3c84:	80 33       	cpi	r24, 0x30	; 48
    3c86:	39 f4       	brne	.+14     	; 0x3c96 <vfprintf+0xb0>
    3c88:	21 60       	ori	r18, 0x01	; 1
    3c8a:	26 c0       	rjmp	.+76     	; 0x3cd8 <vfprintf+0xf2>
    3c8c:	22 60       	ori	r18, 0x02	; 2
    3c8e:	24 60       	ori	r18, 0x04	; 4
    3c90:	23 c0       	rjmp	.+70     	; 0x3cd8 <vfprintf+0xf2>
    3c92:	28 60       	ori	r18, 0x08	; 8
    3c94:	21 c0       	rjmp	.+66     	; 0x3cd8 <vfprintf+0xf2>
    3c96:	27 fd       	sbrc	r18, 7
    3c98:	27 c0       	rjmp	.+78     	; 0x3ce8 <vfprintf+0x102>
    3c9a:	30 ed       	ldi	r19, 0xD0	; 208
    3c9c:	38 0f       	add	r19, r24
    3c9e:	3a 30       	cpi	r19, 0x0A	; 10
    3ca0:	78 f4       	brcc	.+30     	; 0x3cc0 <vfprintf+0xda>
    3ca2:	26 ff       	sbrs	r18, 6
    3ca4:	06 c0       	rjmp	.+12     	; 0x3cb2 <vfprintf+0xcc>
    3ca6:	fa e0       	ldi	r31, 0x0A	; 10
    3ca8:	5f 9e       	mul	r5, r31
    3caa:	30 0d       	add	r19, r0
    3cac:	11 24       	eor	r1, r1
    3cae:	53 2e       	mov	r5, r19
    3cb0:	13 c0       	rjmp	.+38     	; 0x3cd8 <vfprintf+0xf2>
    3cb2:	8a e0       	ldi	r24, 0x0A	; 10
    3cb4:	38 9e       	mul	r3, r24
    3cb6:	30 0d       	add	r19, r0
    3cb8:	11 24       	eor	r1, r1
    3cba:	33 2e       	mov	r3, r19
    3cbc:	20 62       	ori	r18, 0x20	; 32
    3cbe:	0c c0       	rjmp	.+24     	; 0x3cd8 <vfprintf+0xf2>
    3cc0:	8e 32       	cpi	r24, 0x2E	; 46
    3cc2:	21 f4       	brne	.+8      	; 0x3ccc <vfprintf+0xe6>
    3cc4:	26 fd       	sbrc	r18, 6
    3cc6:	6b c1       	rjmp	.+726    	; 0x3f9e <vfprintf+0x3b8>
    3cc8:	20 64       	ori	r18, 0x40	; 64
    3cca:	06 c0       	rjmp	.+12     	; 0x3cd8 <vfprintf+0xf2>
    3ccc:	8c 36       	cpi	r24, 0x6C	; 108
    3cce:	11 f4       	brne	.+4      	; 0x3cd4 <vfprintf+0xee>
    3cd0:	20 68       	ori	r18, 0x80	; 128
    3cd2:	02 c0       	rjmp	.+4      	; 0x3cd8 <vfprintf+0xf2>
    3cd4:	88 36       	cpi	r24, 0x68	; 104
    3cd6:	41 f4       	brne	.+16     	; 0x3ce8 <vfprintf+0x102>
    3cd8:	f6 01       	movw	r30, r12
    3cda:	93 fd       	sbrc	r25, 3
    3cdc:	85 91       	lpm	r24, Z+
    3cde:	93 ff       	sbrs	r25, 3
    3ce0:	81 91       	ld	r24, Z+
    3ce2:	6f 01       	movw	r12, r30
    3ce4:	81 11       	cpse	r24, r1
    3ce6:	c1 cf       	rjmp	.-126    	; 0x3c6a <vfprintf+0x84>
    3ce8:	98 2f       	mov	r25, r24
    3cea:	9f 7d       	andi	r25, 0xDF	; 223
    3cec:	95 54       	subi	r25, 0x45	; 69
    3cee:	93 30       	cpi	r25, 0x03	; 3
    3cf0:	28 f4       	brcc	.+10     	; 0x3cfc <vfprintf+0x116>
    3cf2:	0c 5f       	subi	r16, 0xFC	; 252
    3cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf6:	ff e3       	ldi	r31, 0x3F	; 63
    3cf8:	f9 83       	std	Y+1, r31	; 0x01
    3cfa:	0d c0       	rjmp	.+26     	; 0x3d16 <vfprintf+0x130>
    3cfc:	83 36       	cpi	r24, 0x63	; 99
    3cfe:	31 f0       	breq	.+12     	; 0x3d0c <vfprintf+0x126>
    3d00:	83 37       	cpi	r24, 0x73	; 115
    3d02:	71 f0       	breq	.+28     	; 0x3d20 <vfprintf+0x13a>
    3d04:	83 35       	cpi	r24, 0x53	; 83
    3d06:	09 f0       	breq	.+2      	; 0x3d0a <vfprintf+0x124>
    3d08:	5b c0       	rjmp	.+182    	; 0x3dc0 <vfprintf+0x1da>
    3d0a:	22 c0       	rjmp	.+68     	; 0x3d50 <vfprintf+0x16a>
    3d0c:	f8 01       	movw	r30, r16
    3d0e:	80 81       	ld	r24, Z
    3d10:	89 83       	std	Y+1, r24	; 0x01
    3d12:	0e 5f       	subi	r16, 0xFE	; 254
    3d14:	1f 4f       	sbci	r17, 0xFF	; 255
    3d16:	44 24       	eor	r4, r4
    3d18:	43 94       	inc	r4
    3d1a:	51 2c       	mov	r5, r1
    3d1c:	54 01       	movw	r10, r8
    3d1e:	15 c0       	rjmp	.+42     	; 0x3d4a <vfprintf+0x164>
    3d20:	38 01       	movw	r6, r16
    3d22:	f2 e0       	ldi	r31, 0x02	; 2
    3d24:	6f 0e       	add	r6, r31
    3d26:	71 1c       	adc	r7, r1
    3d28:	f8 01       	movw	r30, r16
    3d2a:	a0 80       	ld	r10, Z
    3d2c:	b1 80       	ldd	r11, Z+1	; 0x01
    3d2e:	26 ff       	sbrs	r18, 6
    3d30:	03 c0       	rjmp	.+6      	; 0x3d38 <vfprintf+0x152>
    3d32:	65 2d       	mov	r22, r5
    3d34:	70 e0       	ldi	r23, 0x00	; 0
    3d36:	02 c0       	rjmp	.+4      	; 0x3d3c <vfprintf+0x156>
    3d38:	6f ef       	ldi	r22, 0xFF	; 255
    3d3a:	7f ef       	ldi	r23, 0xFF	; 255
    3d3c:	c5 01       	movw	r24, r10
    3d3e:	2c 87       	std	Y+12, r18	; 0x0c
    3d40:	0e 94 19 20 	call	0x4032	; 0x4032 <strnlen>
    3d44:	2c 01       	movw	r4, r24
    3d46:	83 01       	movw	r16, r6
    3d48:	2c 85       	ldd	r18, Y+12	; 0x0c
    3d4a:	2f 77       	andi	r18, 0x7F	; 127
    3d4c:	22 2e       	mov	r2, r18
    3d4e:	17 c0       	rjmp	.+46     	; 0x3d7e <vfprintf+0x198>
    3d50:	38 01       	movw	r6, r16
    3d52:	f2 e0       	ldi	r31, 0x02	; 2
    3d54:	6f 0e       	add	r6, r31
    3d56:	71 1c       	adc	r7, r1
    3d58:	f8 01       	movw	r30, r16
    3d5a:	a0 80       	ld	r10, Z
    3d5c:	b1 80       	ldd	r11, Z+1	; 0x01
    3d5e:	26 ff       	sbrs	r18, 6
    3d60:	03 c0       	rjmp	.+6      	; 0x3d68 <vfprintf+0x182>
    3d62:	65 2d       	mov	r22, r5
    3d64:	70 e0       	ldi	r23, 0x00	; 0
    3d66:	02 c0       	rjmp	.+4      	; 0x3d6c <vfprintf+0x186>
    3d68:	6f ef       	ldi	r22, 0xFF	; 255
    3d6a:	7f ef       	ldi	r23, 0xFF	; 255
    3d6c:	c5 01       	movw	r24, r10
    3d6e:	2c 87       	std	Y+12, r18	; 0x0c
    3d70:	0e 94 0e 20 	call	0x401c	; 0x401c <strnlen_P>
    3d74:	2c 01       	movw	r4, r24
    3d76:	2c 85       	ldd	r18, Y+12	; 0x0c
    3d78:	20 68       	ori	r18, 0x80	; 128
    3d7a:	22 2e       	mov	r2, r18
    3d7c:	83 01       	movw	r16, r6
    3d7e:	23 fc       	sbrc	r2, 3
    3d80:	1b c0       	rjmp	.+54     	; 0x3db8 <vfprintf+0x1d2>
    3d82:	83 2d       	mov	r24, r3
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	48 16       	cp	r4, r24
    3d88:	59 06       	cpc	r5, r25
    3d8a:	b0 f4       	brcc	.+44     	; 0x3db8 <vfprintf+0x1d2>
    3d8c:	b7 01       	movw	r22, r14
    3d8e:	80 e2       	ldi	r24, 0x20	; 32
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	0e 94 34 20 	call	0x4068	; 0x4068 <fputc>
    3d96:	3a 94       	dec	r3
    3d98:	f4 cf       	rjmp	.-24     	; 0x3d82 <vfprintf+0x19c>
    3d9a:	f5 01       	movw	r30, r10
    3d9c:	27 fc       	sbrc	r2, 7
    3d9e:	85 91       	lpm	r24, Z+
    3da0:	27 fe       	sbrs	r2, 7
    3da2:	81 91       	ld	r24, Z+
    3da4:	5f 01       	movw	r10, r30
    3da6:	b7 01       	movw	r22, r14
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	0e 94 34 20 	call	0x4068	; 0x4068 <fputc>
    3dae:	31 10       	cpse	r3, r1
    3db0:	3a 94       	dec	r3
    3db2:	f1 e0       	ldi	r31, 0x01	; 1
    3db4:	4f 1a       	sub	r4, r31
    3db6:	51 08       	sbc	r5, r1
    3db8:	41 14       	cp	r4, r1
    3dba:	51 04       	cpc	r5, r1
    3dbc:	71 f7       	brne	.-36     	; 0x3d9a <vfprintf+0x1b4>
    3dbe:	e5 c0       	rjmp	.+458    	; 0x3f8a <vfprintf+0x3a4>
    3dc0:	84 36       	cpi	r24, 0x64	; 100
    3dc2:	11 f0       	breq	.+4      	; 0x3dc8 <vfprintf+0x1e2>
    3dc4:	89 36       	cpi	r24, 0x69	; 105
    3dc6:	39 f5       	brne	.+78     	; 0x3e16 <vfprintf+0x230>
    3dc8:	f8 01       	movw	r30, r16
    3dca:	27 ff       	sbrs	r18, 7
    3dcc:	07 c0       	rjmp	.+14     	; 0x3ddc <vfprintf+0x1f6>
    3dce:	60 81       	ld	r22, Z
    3dd0:	71 81       	ldd	r23, Z+1	; 0x01
    3dd2:	82 81       	ldd	r24, Z+2	; 0x02
    3dd4:	93 81       	ldd	r25, Z+3	; 0x03
    3dd6:	0c 5f       	subi	r16, 0xFC	; 252
    3dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dda:	08 c0       	rjmp	.+16     	; 0x3dec <vfprintf+0x206>
    3ddc:	60 81       	ld	r22, Z
    3dde:	71 81       	ldd	r23, Z+1	; 0x01
    3de0:	88 27       	eor	r24, r24
    3de2:	77 fd       	sbrc	r23, 7
    3de4:	80 95       	com	r24
    3de6:	98 2f       	mov	r25, r24
    3de8:	0e 5f       	subi	r16, 0xFE	; 254
    3dea:	1f 4f       	sbci	r17, 0xFF	; 255
    3dec:	2f 76       	andi	r18, 0x6F	; 111
    3dee:	b2 2e       	mov	r11, r18
    3df0:	97 ff       	sbrs	r25, 7
    3df2:	09 c0       	rjmp	.+18     	; 0x3e06 <vfprintf+0x220>
    3df4:	90 95       	com	r25
    3df6:	80 95       	com	r24
    3df8:	70 95       	com	r23
    3dfa:	61 95       	neg	r22
    3dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    3e00:	9f 4f       	sbci	r25, 0xFF	; 255
    3e02:	20 68       	ori	r18, 0x80	; 128
    3e04:	b2 2e       	mov	r11, r18
    3e06:	2a e0       	ldi	r18, 0x0A	; 10
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	a4 01       	movw	r20, r8
    3e0c:	0e 94 66 20 	call	0x40cc	; 0x40cc <__ultoa_invert>
    3e10:	a8 2e       	mov	r10, r24
    3e12:	a8 18       	sub	r10, r8
    3e14:	44 c0       	rjmp	.+136    	; 0x3e9e <vfprintf+0x2b8>
    3e16:	85 37       	cpi	r24, 0x75	; 117
    3e18:	29 f4       	brne	.+10     	; 0x3e24 <vfprintf+0x23e>
    3e1a:	2f 7e       	andi	r18, 0xEF	; 239
    3e1c:	b2 2e       	mov	r11, r18
    3e1e:	2a e0       	ldi	r18, 0x0A	; 10
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	25 c0       	rjmp	.+74     	; 0x3e6e <vfprintf+0x288>
    3e24:	f2 2f       	mov	r31, r18
    3e26:	f9 7f       	andi	r31, 0xF9	; 249
    3e28:	bf 2e       	mov	r11, r31
    3e2a:	8f 36       	cpi	r24, 0x6F	; 111
    3e2c:	c1 f0       	breq	.+48     	; 0x3e5e <vfprintf+0x278>
    3e2e:	18 f4       	brcc	.+6      	; 0x3e36 <vfprintf+0x250>
    3e30:	88 35       	cpi	r24, 0x58	; 88
    3e32:	79 f0       	breq	.+30     	; 0x3e52 <vfprintf+0x26c>
    3e34:	b4 c0       	rjmp	.+360    	; 0x3f9e <vfprintf+0x3b8>
    3e36:	80 37       	cpi	r24, 0x70	; 112
    3e38:	19 f0       	breq	.+6      	; 0x3e40 <vfprintf+0x25a>
    3e3a:	88 37       	cpi	r24, 0x78	; 120
    3e3c:	21 f0       	breq	.+8      	; 0x3e46 <vfprintf+0x260>
    3e3e:	af c0       	rjmp	.+350    	; 0x3f9e <vfprintf+0x3b8>
    3e40:	2f 2f       	mov	r18, r31
    3e42:	20 61       	ori	r18, 0x10	; 16
    3e44:	b2 2e       	mov	r11, r18
    3e46:	b4 fe       	sbrs	r11, 4
    3e48:	0d c0       	rjmp	.+26     	; 0x3e64 <vfprintf+0x27e>
    3e4a:	8b 2d       	mov	r24, r11
    3e4c:	84 60       	ori	r24, 0x04	; 4
    3e4e:	b8 2e       	mov	r11, r24
    3e50:	09 c0       	rjmp	.+18     	; 0x3e64 <vfprintf+0x27e>
    3e52:	24 ff       	sbrs	r18, 4
    3e54:	0a c0       	rjmp	.+20     	; 0x3e6a <vfprintf+0x284>
    3e56:	9f 2f       	mov	r25, r31
    3e58:	96 60       	ori	r25, 0x06	; 6
    3e5a:	b9 2e       	mov	r11, r25
    3e5c:	06 c0       	rjmp	.+12     	; 0x3e6a <vfprintf+0x284>
    3e5e:	28 e0       	ldi	r18, 0x08	; 8
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	05 c0       	rjmp	.+10     	; 0x3e6e <vfprintf+0x288>
    3e64:	20 e1       	ldi	r18, 0x10	; 16
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	02 c0       	rjmp	.+4      	; 0x3e6e <vfprintf+0x288>
    3e6a:	20 e1       	ldi	r18, 0x10	; 16
    3e6c:	32 e0       	ldi	r19, 0x02	; 2
    3e6e:	f8 01       	movw	r30, r16
    3e70:	b7 fe       	sbrs	r11, 7
    3e72:	07 c0       	rjmp	.+14     	; 0x3e82 <vfprintf+0x29c>
    3e74:	60 81       	ld	r22, Z
    3e76:	71 81       	ldd	r23, Z+1	; 0x01
    3e78:	82 81       	ldd	r24, Z+2	; 0x02
    3e7a:	93 81       	ldd	r25, Z+3	; 0x03
    3e7c:	0c 5f       	subi	r16, 0xFC	; 252
    3e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e80:	06 c0       	rjmp	.+12     	; 0x3e8e <vfprintf+0x2a8>
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	0e 5f       	subi	r16, 0xFE	; 254
    3e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8e:	a4 01       	movw	r20, r8
    3e90:	0e 94 66 20 	call	0x40cc	; 0x40cc <__ultoa_invert>
    3e94:	a8 2e       	mov	r10, r24
    3e96:	a8 18       	sub	r10, r8
    3e98:	fb 2d       	mov	r31, r11
    3e9a:	ff 77       	andi	r31, 0x7F	; 127
    3e9c:	bf 2e       	mov	r11, r31
    3e9e:	b6 fe       	sbrs	r11, 6
    3ea0:	0b c0       	rjmp	.+22     	; 0x3eb8 <vfprintf+0x2d2>
    3ea2:	2b 2d       	mov	r18, r11
    3ea4:	2e 7f       	andi	r18, 0xFE	; 254
    3ea6:	a5 14       	cp	r10, r5
    3ea8:	50 f4       	brcc	.+20     	; 0x3ebe <vfprintf+0x2d8>
    3eaa:	b4 fe       	sbrs	r11, 4
    3eac:	0a c0       	rjmp	.+20     	; 0x3ec2 <vfprintf+0x2dc>
    3eae:	b2 fc       	sbrc	r11, 2
    3eb0:	08 c0       	rjmp	.+16     	; 0x3ec2 <vfprintf+0x2dc>
    3eb2:	2b 2d       	mov	r18, r11
    3eb4:	2e 7e       	andi	r18, 0xEE	; 238
    3eb6:	05 c0       	rjmp	.+10     	; 0x3ec2 <vfprintf+0x2dc>
    3eb8:	7a 2c       	mov	r7, r10
    3eba:	2b 2d       	mov	r18, r11
    3ebc:	03 c0       	rjmp	.+6      	; 0x3ec4 <vfprintf+0x2de>
    3ebe:	7a 2c       	mov	r7, r10
    3ec0:	01 c0       	rjmp	.+2      	; 0x3ec4 <vfprintf+0x2de>
    3ec2:	75 2c       	mov	r7, r5
    3ec4:	24 ff       	sbrs	r18, 4
    3ec6:	0d c0       	rjmp	.+26     	; 0x3ee2 <vfprintf+0x2fc>
    3ec8:	fe 01       	movw	r30, r28
    3eca:	ea 0d       	add	r30, r10
    3ecc:	f1 1d       	adc	r31, r1
    3ece:	80 81       	ld	r24, Z
    3ed0:	80 33       	cpi	r24, 0x30	; 48
    3ed2:	11 f4       	brne	.+4      	; 0x3ed8 <vfprintf+0x2f2>
    3ed4:	29 7e       	andi	r18, 0xE9	; 233
    3ed6:	09 c0       	rjmp	.+18     	; 0x3eea <vfprintf+0x304>
    3ed8:	22 ff       	sbrs	r18, 2
    3eda:	06 c0       	rjmp	.+12     	; 0x3ee8 <vfprintf+0x302>
    3edc:	73 94       	inc	r7
    3ede:	73 94       	inc	r7
    3ee0:	04 c0       	rjmp	.+8      	; 0x3eea <vfprintf+0x304>
    3ee2:	82 2f       	mov	r24, r18
    3ee4:	86 78       	andi	r24, 0x86	; 134
    3ee6:	09 f0       	breq	.+2      	; 0x3eea <vfprintf+0x304>
    3ee8:	73 94       	inc	r7
    3eea:	23 fd       	sbrc	r18, 3
    3eec:	13 c0       	rjmp	.+38     	; 0x3f14 <vfprintf+0x32e>
    3eee:	20 ff       	sbrs	r18, 0
    3ef0:	06 c0       	rjmp	.+12     	; 0x3efe <vfprintf+0x318>
    3ef2:	5a 2c       	mov	r5, r10
    3ef4:	73 14       	cp	r7, r3
    3ef6:	18 f4       	brcc	.+6      	; 0x3efe <vfprintf+0x318>
    3ef8:	53 0c       	add	r5, r3
    3efa:	57 18       	sub	r5, r7
    3efc:	73 2c       	mov	r7, r3
    3efe:	73 14       	cp	r7, r3
    3f00:	68 f4       	brcc	.+26     	; 0x3f1c <vfprintf+0x336>
    3f02:	b7 01       	movw	r22, r14
    3f04:	80 e2       	ldi	r24, 0x20	; 32
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	2c 87       	std	Y+12, r18	; 0x0c
    3f0a:	0e 94 34 20 	call	0x4068	; 0x4068 <fputc>
    3f0e:	73 94       	inc	r7
    3f10:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f12:	f5 cf       	rjmp	.-22     	; 0x3efe <vfprintf+0x318>
    3f14:	73 14       	cp	r7, r3
    3f16:	10 f4       	brcc	.+4      	; 0x3f1c <vfprintf+0x336>
    3f18:	37 18       	sub	r3, r7
    3f1a:	01 c0       	rjmp	.+2      	; 0x3f1e <vfprintf+0x338>
    3f1c:	31 2c       	mov	r3, r1
    3f1e:	24 ff       	sbrs	r18, 4
    3f20:	12 c0       	rjmp	.+36     	; 0x3f46 <vfprintf+0x360>
    3f22:	b7 01       	movw	r22, r14
    3f24:	80 e3       	ldi	r24, 0x30	; 48
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	2c 87       	std	Y+12, r18	; 0x0c
    3f2a:	0e 94 34 20 	call	0x4068	; 0x4068 <fputc>
    3f2e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f30:	22 ff       	sbrs	r18, 2
    3f32:	17 c0       	rjmp	.+46     	; 0x3f62 <vfprintf+0x37c>
    3f34:	21 ff       	sbrs	r18, 1
    3f36:	03 c0       	rjmp	.+6      	; 0x3f3e <vfprintf+0x358>
    3f38:	88 e5       	ldi	r24, 0x58	; 88
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	02 c0       	rjmp	.+4      	; 0x3f42 <vfprintf+0x35c>
    3f3e:	88 e7       	ldi	r24, 0x78	; 120
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	b7 01       	movw	r22, r14
    3f44:	0c c0       	rjmp	.+24     	; 0x3f5e <vfprintf+0x378>
    3f46:	82 2f       	mov	r24, r18
    3f48:	86 78       	andi	r24, 0x86	; 134
    3f4a:	59 f0       	breq	.+22     	; 0x3f62 <vfprintf+0x37c>
    3f4c:	21 fd       	sbrc	r18, 1
    3f4e:	02 c0       	rjmp	.+4      	; 0x3f54 <vfprintf+0x36e>
    3f50:	80 e2       	ldi	r24, 0x20	; 32
    3f52:	01 c0       	rjmp	.+2      	; 0x3f56 <vfprintf+0x370>
    3f54:	8b e2       	ldi	r24, 0x2B	; 43
    3f56:	27 fd       	sbrc	r18, 7
    3f58:	8d e2       	ldi	r24, 0x2D	; 45
    3f5a:	b7 01       	movw	r22, r14
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	0e 94 34 20 	call	0x4068	; 0x4068 <fputc>
    3f62:	a5 14       	cp	r10, r5
    3f64:	38 f4       	brcc	.+14     	; 0x3f74 <vfprintf+0x38e>
    3f66:	b7 01       	movw	r22, r14
    3f68:	80 e3       	ldi	r24, 0x30	; 48
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	0e 94 34 20 	call	0x4068	; 0x4068 <fputc>
    3f70:	5a 94       	dec	r5
    3f72:	f7 cf       	rjmp	.-18     	; 0x3f62 <vfprintf+0x37c>
    3f74:	aa 94       	dec	r10
    3f76:	f4 01       	movw	r30, r8
    3f78:	ea 0d       	add	r30, r10
    3f7a:	f1 1d       	adc	r31, r1
    3f7c:	80 81       	ld	r24, Z
    3f7e:	b7 01       	movw	r22, r14
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	0e 94 34 20 	call	0x4068	; 0x4068 <fputc>
    3f86:	a1 10       	cpse	r10, r1
    3f88:	f5 cf       	rjmp	.-22     	; 0x3f74 <vfprintf+0x38e>
    3f8a:	33 20       	and	r3, r3
    3f8c:	09 f4       	brne	.+2      	; 0x3f90 <vfprintf+0x3aa>
    3f8e:	51 ce       	rjmp	.-862    	; 0x3c32 <vfprintf+0x4c>
    3f90:	b7 01       	movw	r22, r14
    3f92:	80 e2       	ldi	r24, 0x20	; 32
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	0e 94 34 20 	call	0x4068	; 0x4068 <fputc>
    3f9a:	3a 94       	dec	r3
    3f9c:	f6 cf       	rjmp	.-20     	; 0x3f8a <vfprintf+0x3a4>
    3f9e:	f7 01       	movw	r30, r14
    3fa0:	86 81       	ldd	r24, Z+6	; 0x06
    3fa2:	97 81       	ldd	r25, Z+7	; 0x07
    3fa4:	02 c0       	rjmp	.+4      	; 0x3faa <vfprintf+0x3c4>
    3fa6:	8f ef       	ldi	r24, 0xFF	; 255
    3fa8:	9f ef       	ldi	r25, 0xFF	; 255
    3faa:	2c 96       	adiw	r28, 0x0c	; 12
    3fac:	0f b6       	in	r0, 0x3f	; 63
    3fae:	f8 94       	cli
    3fb0:	de bf       	out	0x3e, r29	; 62
    3fb2:	0f be       	out	0x3f, r0	; 63
    3fb4:	cd bf       	out	0x3d, r28	; 61
    3fb6:	df 91       	pop	r29
    3fb8:	cf 91       	pop	r28
    3fba:	1f 91       	pop	r17
    3fbc:	0f 91       	pop	r16
    3fbe:	ff 90       	pop	r15
    3fc0:	ef 90       	pop	r14
    3fc2:	df 90       	pop	r13
    3fc4:	cf 90       	pop	r12
    3fc6:	bf 90       	pop	r11
    3fc8:	af 90       	pop	r10
    3fca:	9f 90       	pop	r9
    3fcc:	8f 90       	pop	r8
    3fce:	7f 90       	pop	r7
    3fd0:	6f 90       	pop	r6
    3fd2:	5f 90       	pop	r5
    3fd4:	4f 90       	pop	r4
    3fd6:	3f 90       	pop	r3
    3fd8:	2f 90       	pop	r2
    3fda:	08 95       	ret

00003fdc <__eerd_byte_m128>:
    3fdc:	e1 99       	sbic	0x1c, 1	; 28
    3fde:	fe cf       	rjmp	.-4      	; 0x3fdc <__eerd_byte_m128>
    3fe0:	9f bb       	out	0x1f, r25	; 31
    3fe2:	8e bb       	out	0x1e, r24	; 30
    3fe4:	e0 9a       	sbi	0x1c, 0	; 28
    3fe6:	99 27       	eor	r25, r25
    3fe8:	8d b3       	in	r24, 0x1d	; 29
    3fea:	08 95       	ret

00003fec <__eerd_word_m128>:
    3fec:	a8 e1       	ldi	r26, 0x18	; 24
    3fee:	b0 e0       	ldi	r27, 0x00	; 0
    3ff0:	42 e0       	ldi	r20, 0x02	; 2
    3ff2:	50 e0       	ldi	r21, 0x00	; 0
    3ff4:	0c 94 c6 20 	jmp	0x418c	; 0x418c <__eerd_blraw_m128>

00003ff8 <__eewr_byte_m128>:
    3ff8:	26 2f       	mov	r18, r22

00003ffa <__eewr_r18_m128>:
    3ffa:	e1 99       	sbic	0x1c, 1	; 28
    3ffc:	fe cf       	rjmp	.-4      	; 0x3ffa <__eewr_r18_m128>
    3ffe:	9f bb       	out	0x1f, r25	; 31
    4000:	8e bb       	out	0x1e, r24	; 30
    4002:	2d bb       	out	0x1d, r18	; 29
    4004:	0f b6       	in	r0, 0x3f	; 63
    4006:	f8 94       	cli
    4008:	e2 9a       	sbi	0x1c, 2	; 28
    400a:	e1 9a       	sbi	0x1c, 1	; 28
    400c:	0f be       	out	0x3f, r0	; 63
    400e:	01 96       	adiw	r24, 0x01	; 1
    4010:	08 95       	ret

00004012 <__eewr_word_m128>:
    4012:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__eewr_byte_m128>
    4016:	27 2f       	mov	r18, r23
    4018:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <__eewr_r18_m128>

0000401c <strnlen_P>:
    401c:	fc 01       	movw	r30, r24
    401e:	05 90       	lpm	r0, Z+
    4020:	61 50       	subi	r22, 0x01	; 1
    4022:	70 40       	sbci	r23, 0x00	; 0
    4024:	01 10       	cpse	r0, r1
    4026:	d8 f7       	brcc	.-10     	; 0x401e <strnlen_P+0x2>
    4028:	80 95       	com	r24
    402a:	90 95       	com	r25
    402c:	8e 0f       	add	r24, r30
    402e:	9f 1f       	adc	r25, r31
    4030:	08 95       	ret

00004032 <strnlen>:
    4032:	fc 01       	movw	r30, r24
    4034:	61 50       	subi	r22, 0x01	; 1
    4036:	70 40       	sbci	r23, 0x00	; 0
    4038:	01 90       	ld	r0, Z+
    403a:	01 10       	cpse	r0, r1
    403c:	d8 f7       	brcc	.-10     	; 0x4034 <strnlen+0x2>
    403e:	80 95       	com	r24
    4040:	90 95       	com	r25
    4042:	8e 0f       	add	r24, r30
    4044:	9f 1f       	adc	r25, r31
    4046:	08 95       	ret

00004048 <strrev>:
    4048:	dc 01       	movw	r26, r24
    404a:	fc 01       	movw	r30, r24
    404c:	67 2f       	mov	r22, r23
    404e:	71 91       	ld	r23, Z+
    4050:	77 23       	and	r23, r23
    4052:	e1 f7       	brne	.-8      	; 0x404c <strrev+0x4>
    4054:	32 97       	sbiw	r30, 0x02	; 2
    4056:	04 c0       	rjmp	.+8      	; 0x4060 <strrev+0x18>
    4058:	7c 91       	ld	r23, X
    405a:	6d 93       	st	X+, r22
    405c:	70 83       	st	Z, r23
    405e:	62 91       	ld	r22, -Z
    4060:	ae 17       	cp	r26, r30
    4062:	bf 07       	cpc	r27, r31
    4064:	c8 f3       	brcs	.-14     	; 0x4058 <strrev+0x10>
    4066:	08 95       	ret

00004068 <fputc>:
    4068:	0f 93       	push	r16
    406a:	1f 93       	push	r17
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	18 2f       	mov	r17, r24
    4072:	09 2f       	mov	r16, r25
    4074:	eb 01       	movw	r28, r22
    4076:	8b 81       	ldd	r24, Y+3	; 0x03
    4078:	81 fd       	sbrc	r24, 1
    407a:	03 c0       	rjmp	.+6      	; 0x4082 <fputc+0x1a>
    407c:	8f ef       	ldi	r24, 0xFF	; 255
    407e:	9f ef       	ldi	r25, 0xFF	; 255
    4080:	20 c0       	rjmp	.+64     	; 0x40c2 <fputc+0x5a>
    4082:	82 ff       	sbrs	r24, 2
    4084:	10 c0       	rjmp	.+32     	; 0x40a6 <fputc+0x3e>
    4086:	4e 81       	ldd	r20, Y+6	; 0x06
    4088:	5f 81       	ldd	r21, Y+7	; 0x07
    408a:	2c 81       	ldd	r18, Y+4	; 0x04
    408c:	3d 81       	ldd	r19, Y+5	; 0x05
    408e:	42 17       	cp	r20, r18
    4090:	53 07       	cpc	r21, r19
    4092:	7c f4       	brge	.+30     	; 0x40b2 <fputc+0x4a>
    4094:	e8 81       	ld	r30, Y
    4096:	f9 81       	ldd	r31, Y+1	; 0x01
    4098:	9f 01       	movw	r18, r30
    409a:	2f 5f       	subi	r18, 0xFF	; 255
    409c:	3f 4f       	sbci	r19, 0xFF	; 255
    409e:	39 83       	std	Y+1, r19	; 0x01
    40a0:	28 83       	st	Y, r18
    40a2:	10 83       	st	Z, r17
    40a4:	06 c0       	rjmp	.+12     	; 0x40b2 <fputc+0x4a>
    40a6:	e8 85       	ldd	r30, Y+8	; 0x08
    40a8:	f9 85       	ldd	r31, Y+9	; 0x09
    40aa:	81 2f       	mov	r24, r17
    40ac:	09 95       	icall
    40ae:	89 2b       	or	r24, r25
    40b0:	29 f7       	brne	.-54     	; 0x407c <fputc+0x14>
    40b2:	2e 81       	ldd	r18, Y+6	; 0x06
    40b4:	3f 81       	ldd	r19, Y+7	; 0x07
    40b6:	2f 5f       	subi	r18, 0xFF	; 255
    40b8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ba:	3f 83       	std	Y+7, r19	; 0x07
    40bc:	2e 83       	std	Y+6, r18	; 0x06
    40be:	81 2f       	mov	r24, r17
    40c0:	90 2f       	mov	r25, r16
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	1f 91       	pop	r17
    40c8:	0f 91       	pop	r16
    40ca:	08 95       	ret

000040cc <__ultoa_invert>:
    40cc:	fa 01       	movw	r30, r20
    40ce:	aa 27       	eor	r26, r26
    40d0:	28 30       	cpi	r18, 0x08	; 8
    40d2:	51 f1       	breq	.+84     	; 0x4128 <__ultoa_invert+0x5c>
    40d4:	20 31       	cpi	r18, 0x10	; 16
    40d6:	81 f1       	breq	.+96     	; 0x4138 <__ultoa_invert+0x6c>
    40d8:	e8 94       	clt
    40da:	6f 93       	push	r22
    40dc:	6e 7f       	andi	r22, 0xFE	; 254
    40de:	6e 5f       	subi	r22, 0xFE	; 254
    40e0:	7f 4f       	sbci	r23, 0xFF	; 255
    40e2:	8f 4f       	sbci	r24, 0xFF	; 255
    40e4:	9f 4f       	sbci	r25, 0xFF	; 255
    40e6:	af 4f       	sbci	r26, 0xFF	; 255
    40e8:	b1 e0       	ldi	r27, 0x01	; 1
    40ea:	3e d0       	rcall	.+124    	; 0x4168 <__ultoa_invert+0x9c>
    40ec:	b4 e0       	ldi	r27, 0x04	; 4
    40ee:	3c d0       	rcall	.+120    	; 0x4168 <__ultoa_invert+0x9c>
    40f0:	67 0f       	add	r22, r23
    40f2:	78 1f       	adc	r23, r24
    40f4:	89 1f       	adc	r24, r25
    40f6:	9a 1f       	adc	r25, r26
    40f8:	a1 1d       	adc	r26, r1
    40fa:	68 0f       	add	r22, r24
    40fc:	79 1f       	adc	r23, r25
    40fe:	8a 1f       	adc	r24, r26
    4100:	91 1d       	adc	r25, r1
    4102:	a1 1d       	adc	r26, r1
    4104:	6a 0f       	add	r22, r26
    4106:	71 1d       	adc	r23, r1
    4108:	81 1d       	adc	r24, r1
    410a:	91 1d       	adc	r25, r1
    410c:	a1 1d       	adc	r26, r1
    410e:	20 d0       	rcall	.+64     	; 0x4150 <__ultoa_invert+0x84>
    4110:	09 f4       	brne	.+2      	; 0x4114 <__ultoa_invert+0x48>
    4112:	68 94       	set
    4114:	3f 91       	pop	r19
    4116:	2a e0       	ldi	r18, 0x0A	; 10
    4118:	26 9f       	mul	r18, r22
    411a:	11 24       	eor	r1, r1
    411c:	30 19       	sub	r19, r0
    411e:	30 5d       	subi	r19, 0xD0	; 208
    4120:	31 93       	st	Z+, r19
    4122:	de f6       	brtc	.-74     	; 0x40da <__ultoa_invert+0xe>
    4124:	cf 01       	movw	r24, r30
    4126:	08 95       	ret
    4128:	46 2f       	mov	r20, r22
    412a:	47 70       	andi	r20, 0x07	; 7
    412c:	40 5d       	subi	r20, 0xD0	; 208
    412e:	41 93       	st	Z+, r20
    4130:	b3 e0       	ldi	r27, 0x03	; 3
    4132:	0f d0       	rcall	.+30     	; 0x4152 <__ultoa_invert+0x86>
    4134:	c9 f7       	brne	.-14     	; 0x4128 <__ultoa_invert+0x5c>
    4136:	f6 cf       	rjmp	.-20     	; 0x4124 <__ultoa_invert+0x58>
    4138:	46 2f       	mov	r20, r22
    413a:	4f 70       	andi	r20, 0x0F	; 15
    413c:	40 5d       	subi	r20, 0xD0	; 208
    413e:	4a 33       	cpi	r20, 0x3A	; 58
    4140:	18 f0       	brcs	.+6      	; 0x4148 <__ultoa_invert+0x7c>
    4142:	49 5d       	subi	r20, 0xD9	; 217
    4144:	31 fd       	sbrc	r19, 1
    4146:	40 52       	subi	r20, 0x20	; 32
    4148:	41 93       	st	Z+, r20
    414a:	02 d0       	rcall	.+4      	; 0x4150 <__ultoa_invert+0x84>
    414c:	a9 f7       	brne	.-22     	; 0x4138 <__ultoa_invert+0x6c>
    414e:	ea cf       	rjmp	.-44     	; 0x4124 <__ultoa_invert+0x58>
    4150:	b4 e0       	ldi	r27, 0x04	; 4
    4152:	a6 95       	lsr	r26
    4154:	97 95       	ror	r25
    4156:	87 95       	ror	r24
    4158:	77 95       	ror	r23
    415a:	67 95       	ror	r22
    415c:	ba 95       	dec	r27
    415e:	c9 f7       	brne	.-14     	; 0x4152 <__ultoa_invert+0x86>
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	61 05       	cpc	r22, r1
    4164:	71 05       	cpc	r23, r1
    4166:	08 95       	ret
    4168:	9b 01       	movw	r18, r22
    416a:	ac 01       	movw	r20, r24
    416c:	0a 2e       	mov	r0, r26
    416e:	06 94       	lsr	r0
    4170:	57 95       	ror	r21
    4172:	47 95       	ror	r20
    4174:	37 95       	ror	r19
    4176:	27 95       	ror	r18
    4178:	ba 95       	dec	r27
    417a:	c9 f7       	brne	.-14     	; 0x416e <__ultoa_invert+0xa2>
    417c:	62 0f       	add	r22, r18
    417e:	73 1f       	adc	r23, r19
    4180:	84 1f       	adc	r24, r20
    4182:	95 1f       	adc	r25, r21
    4184:	a0 1d       	adc	r26, r0
    4186:	08 95       	ret

00004188 <__eerd_block_m128>:
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22

0000418c <__eerd_blraw_m128>:
    418c:	fc 01       	movw	r30, r24
    418e:	e1 99       	sbic	0x1c, 1	; 28
    4190:	fe cf       	rjmp	.-4      	; 0x418e <__eerd_blraw_m128+0x2>
    4192:	06 c0       	rjmp	.+12     	; 0x41a0 <__eerd_blraw_m128+0x14>
    4194:	ff bb       	out	0x1f, r31	; 31
    4196:	ee bb       	out	0x1e, r30	; 30
    4198:	e0 9a       	sbi	0x1c, 0	; 28
    419a:	31 96       	adiw	r30, 0x01	; 1
    419c:	0d b2       	in	r0, 0x1d	; 29
    419e:	0d 92       	st	X+, r0
    41a0:	41 50       	subi	r20, 0x01	; 1
    41a2:	50 40       	sbci	r21, 0x00	; 0
    41a4:	b8 f7       	brcc	.-18     	; 0x4194 <__eerd_blraw_m128+0x8>
    41a6:	08 95       	ret

000041a8 <_exit>:
    41a8:	f8 94       	cli

000041aa <__stop_program>:
    41aa:	ff cf       	rjmp	.-2      	; 0x41aa <__stop_program>
