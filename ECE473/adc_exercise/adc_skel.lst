
adc_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000008e4  00000978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00800100  00800100  00000978  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000990  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000188f  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005db  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d5  00000000  00000000  00002922  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  00002ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f9  00000000  00000000  00003258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c6d  00000000  00000000  00003551  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000041be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 35       	cpi	r26, 0x5C	; 92
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 5f 03 	call	0x6be	; 0x6be <main>
  ac:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <spi_init>:
div_t    fp_adc_result, fp_low_result;  //double fp_adc_result;

/*******************************************************/
void spi_init(void){
    /* Run this code before attempting to write to the LCD.*/
    DDRF  |= 0x08;  //port F bit 3 is enable for LCD
  b4:	e1 e6       	ldi	r30, 0x61	; 97
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	80 83       	st	Z, r24
    PORTF &= 0xF7;  //port F bit 3 is initially low
  be:	e2 e6       	ldi	r30, 0x62	; 98
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	80 83       	st	Z, r24
    
    DDRB  |= 0x07;  //Turn on SS, MOSI, SCLK
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	87 bb       	out	0x17, r24	; 23
    PORTB |= _BV(PB1);  //port B initalization for SPI, SS_n off
  ce:	c1 9a       	sbi	0x18, 1	; 24
    //see: /$install_path/avr/include/avr/iom128.h for bit definitions
    
    //Master mode, Clock=clk/4, Cycle half phase, Low polarity, MSB first
    SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
  d0:	80 e5       	ldi	r24, 0x50	; 80
  d2:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X);           //SPI at 2x speed (8 MHz)
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	8e b9       	out	0x0e, r24	; 14
  d8:	08 95       	ret

000000da <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	81 11       	cpse	r24, r1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <send_lcd+0x8>
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  e4:	77 9b       	sbis	0x0e, 7	; 14
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <send_lcd+0xa>
  SPDR = byte;                        //send payload
  e8:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  ea:	77 9b       	sbis	0x0e, 7	; 14
  ec:	fe cf       	rjmp	.-4      	; 0xea <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
  ee:	80 91 62 00 	lds	r24, 0x0062
  f2:	88 60       	ori	r24, 0x08	; 8
  f4:	80 93 62 00 	sts	0x0062, r24
  f8:	80 91 62 00 	lds	r24, 0x0062
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	80 93 62 00 	sts	0x0062, r24
 102:	08 95       	ret

00000104 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
 104:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 106:	c0 91 00 01 	lds	r28, 0x0100
 10a:	8c 0f       	add	r24, r28
 10c:	91 1d       	adc	r25, r1
 10e:	fc 01       	movw	r30, r24
 110:	60 81       	ld	r22, Z
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 i++;   //increment to next character
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	8c 0f       	add	r24, r28
 11c:	80 93 00 01 	sts	0x0100, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 120:	80 31       	cpi	r24, 0x10	; 16
 122:	81 f0       	breq	.+32     	; 0x144 <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 124:	80 32       	cpi	r24, 0x20	; 32
 126:	11 f0       	breq	.+4      	; 0x12c <refresh_lcd+0x28>
}//refresh_lcd
 128:	cf 91       	pop	r28
 12a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	85 ed       	ldi	r24, 0xD5	; 213
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <refresh_lcd+0x2a>
 132:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 134:	60 e8       	ldi	r22, 0x80	; 128
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 13c:	10 92 00 01 	sts	0x0100, r1
}//refresh_lcd
 140:	cf 91       	pop	r28
 142:	08 95       	ret
 144:	f5 ed       	ldi	r31, 0xD5	; 213
 146:	fa 95       	dec	r31
 148:	f1 f7       	brne	.-4      	; 0x146 <refresh_lcd+0x42>
 14a:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 14c:	60 ec       	ldi	r22, 0xC0	; 192
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 154:	80 91 00 01 	lds	r24, 0x0100
 158:	e5 cf       	rjmp	.-54     	; 0x124 <refresh_lcd+0x20>

0000015a <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 16c:	66 0f       	add	r22, r22
 16e:	66 0f       	add	r22, r22
 170:	66 0f       	add	r22, r22
 172:	60 5c       	subi	r22, 0xC0	; 192
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	99 83       	std	Y+1, r25	; 0x01
 178:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 17c:	85 ed       	ldi	r24, 0xD5	; 213
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <set_custom_character+0x24>
 182:	00 00       	nop
 184:	e1 2e       	mov	r14, r17
 186:	99 81       	ldd	r25, Y+1	; 0x01
 188:	f9 2e       	mov	r15, r25
 18a:	18 e0       	ldi	r17, 0x08	; 8
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 18c:	f7 01       	movw	r30, r14
 18e:	61 91       	ld	r22, Z+
 190:	7f 01       	movw	r14, r30
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 198:	f5 ed       	ldi	r31, 0xD5	; 213
 19a:	fa 95       	dec	r31
 19c:	f1 f7       	brne	.-4      	; 0x19a <set_custom_character+0x40>
 19e:	00 00       	nop
 1a0:	11 50       	subi	r17, 0x01	; 1
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 1a2:	a1 f7       	brne	.-24     	; 0x18c <set_custom_character+0x32>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	08 95       	ret

000001b2 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 1b2:	90 e4       	ldi	r25, 0x40	; 64
 1b4:	89 9f       	mul	r24, r25
 1b6:	60 0d       	add	r22, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	60 5c       	subi	r22, 0xC0	; 192
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0c 94 6d 00 	jmp	0xda	; 0xda <send_lcd>

000001c2 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 1c6:	88 23       	and	r24, r24
 1c8:	b1 f1       	breq	.+108    	; 0x236 <uint2lcd+0x74>
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 1ca:	84 36       	cpi	r24, 0x64	; 100
 1cc:	98 f4       	brcc	.+38     	; 0x1f4 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 1ce:	8a 30       	cpi	r24, 0x0A	; 10
 1d0:	d8 f4       	brcc	.+54     	; 0x208 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 1d2:	8d ec       	ldi	r24, 0xCD	; 205
 1d4:	c8 9f       	mul	r28, r24
 1d6:	81 2d       	mov	r24, r1
 1d8:	11 24       	eor	r1, r1
 1da:	86 95       	lsr	r24
 1dc:	86 95       	lsr	r24
 1de:	86 95       	lsr	r24
 1e0:	6c 2f       	mov	r22, r28
 1e2:	9a e0       	ldi	r25, 0x0A	; 10
 1e4:	89 9f       	mul	r24, r25
 1e6:	60 19       	sub	r22, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	60 5d       	subi	r22, 0xD0	; 208
 1ec:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 1ee:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 1f0:	0c 94 6d 00 	jmp	0xda	; 0xda <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 1f4:	69 e2       	ldi	r22, 0x29	; 41
 1f6:	86 9f       	mul	r24, r22
 1f8:	61 2d       	mov	r22, r1
 1fa:	11 24       	eor	r1, r1
 1fc:	62 95       	swap	r22
 1fe:	6f 70       	andi	r22, 0x0F	; 15
 200:	60 5d       	subi	r22, 0xD0	; 208
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 208:	89 e2       	ldi	r24, 0x29	; 41
 20a:	c8 9f       	mul	r28, r24
 20c:	81 2d       	mov	r24, r1
 20e:	11 24       	eor	r1, r1
 210:	82 95       	swap	r24
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	6c 2f       	mov	r22, r28
 216:	94 e6       	ldi	r25, 0x64	; 100
 218:	89 9f       	mul	r24, r25
 21a:	60 19       	sub	r22, r0
 21c:	11 24       	eor	r1, r1
 21e:	8d ec       	ldi	r24, 0xCD	; 205
 220:	68 9f       	mul	r22, r24
 222:	61 2d       	mov	r22, r1
 224:	11 24       	eor	r1, r1
 226:	66 95       	lsr	r22
 228:	66 95       	lsr	r22
 22a:	66 95       	lsr	r22
 22c:	60 5d       	subi	r22, 0xD0	; 208
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 234:	ce cf       	rjmp	.-100    	; 0x1d2 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 236:	60 e3       	ldi	r22, 0x30	; 48
 238:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
 23a:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 23c:	0c 94 6d 00 	jmp	0xda	; 0xda <send_lcd>

00000240 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
 240:	cf 93       	push	r28
 242:	c8 2f       	mov	r28, r24
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 244:	87 fd       	sbrc	r24, 7
 246:	03 c0       	rjmp	.+6      	; 0x24e <int2lcd+0xe>
    else          {uint2lcd(number);                                            }
}
 248:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
 24a:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <uint2lcd>
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 24e:	6d e2       	ldi	r22, 0x2D	; 45
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 256:	85 ed       	ldi	r24, 0xD5	; 213
 258:	8a 95       	dec	r24
 25a:	f1 f7       	brne	.-4      	; 0x258 <int2lcd+0x18>
 25c:	00 00       	nop
 25e:	8c 2f       	mov	r24, r28
 260:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
 262:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 264:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <uint2lcd>

00000268 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
 268:	6e e0       	ldi	r22, 0x0E	; 14
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0c 94 6d 00 	jmp	0xda	; 0xda <send_lcd>

00000270 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
 270:	6c e0       	ldi	r22, 0x0C	; 12
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0c 94 6d 00 	jmp	0xda	; 0xda <send_lcd>

00000278 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
 278:	6e e1       	ldi	r22, 0x1E	; 30
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0c 94 6d 00 	jmp	0xda	; 0xda <send_lcd>

00000280 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
 280:	68 e1       	ldi	r22, 0x18	; 24
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0c 94 6d 00 	jmp	0xda	; 0xda <send_lcd>

00000288 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 288:	e2 e6       	ldi	r30, 0x62	; 98
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	88 60       	ori	r24, 0x08	; 8
 290:	80 83       	st	Z, r24
 292:	80 81       	ld	r24, Z
 294:	87 7f       	andi	r24, 0xF7	; 247
 296:	80 83       	st	Z, r24
 298:	08 95       	ret

0000029a <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 2a2:	8f e1       	ldi	r24, 0x1F	; 31
 2a4:	9c e1       	ldi	r25, 0x1C	; 28
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <clear_display+0xc>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <clear_display+0x12>
 2ac:	00 00       	nop
 2ae:	08 95       	ret

000002b0 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 2b8:	8f e6       	ldi	r24, 0x6F	; 111
 2ba:	97 e1       	ldi	r25, 0x17	; 23
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <cursor_home+0xc>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <cursor_home+0x12>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 2c6:	60 ec       	ldi	r22, 0xC0	; 192
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0c 94 6d 00 	jmp	0xda	; 0xda <send_lcd>

000002ce <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 2ce:	60 e8       	ldi	r22, 0x80	; 128
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0c 94 6d 00 	jmp	0xda	; 0xda <send_lcd>

000002d6 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 2d6:	cf 93       	push	r28
 2d8:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
 2da:	60 e2       	ldi	r22, 0x20	; 32
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 2e2:	85 ed       	ldi	r24, 0xD5	; 213
 2e4:	8a 95       	dec	r24
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <fill_spaces+0xe>
 2e8:	00 00       	nop
 2ea:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 2ec:	b1 f7       	brne	.-20     	; 0x2da <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
 2f2:	68 2f       	mov	r22, r24
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0c 94 6d 00 	jmp	0xda	; 0xda <send_lcd>

000002fa <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	fe 01       	movw	r30, r28
 30a:	e8 0f       	add	r30, r24
 30c:	f9 1f       	adc	r31, r25
 30e:	60 81       	ld	r22, Z
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 316:	85 ed       	ldi	r24, 0xD5	; 213
 318:	8a 95       	dec	r24
 31a:	f1 f7       	brne	.-4      	; 0x318 <string2lcd+0x1e>
 31c:	00 00       	nop
 31e:	1f 5f       	subi	r17, 0xFF	; 255
 320:	81 2f       	mov	r24, r17
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	fe 01       	movw	r30, r28
 326:	01 90       	ld	r0, Z+
 328:	00 20       	and	r0, r0
 32a:	e9 f7       	brne	.-6      	; 0x326 <string2lcd+0x2c>
 32c:	ec 1b       	sub	r30, r28
 32e:	fd 0b       	sbc	r31, r29
 330:	32 97       	sbiw	r30, 0x02	; 2
 332:	e8 17       	cp	r30, r24
 334:	f9 07       	cpc	r31, r25
 336:	40 f7       	brcc	.-48     	; 0x308 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	08 95       	ret

00000340 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	99 ef       	ldi	r25, 0xF9	; 249
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <lcd_init+0x4>
 348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_init+0xa>
 34a:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 34c:	88 e0       	ldi	r24, 0x08	; 8
 34e:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
 352:	60 e3       	ldi	r22, 0x30	; 48
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 35a:	8f e5       	ldi	r24, 0x5F	; 95
 35c:	9d e6       	ldi	r25, 0x6D	; 109
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <lcd_init+0x1e>
 362:	00 c0       	rjmp	.+0      	; 0x364 <lcd_init+0x24>
 364:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 366:	60 e3       	ldi	r22, 0x30	; 48
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 36e:	8f e5       	ldi	r24, 0x5F	; 95
 370:	9d e6       	ldi	r25, 0x6D	; 109
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <lcd_init+0x32>
 376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_init+0x38>
 378:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 37a:	60 e3       	ldi	r22, 0x30	; 48
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 382:	8f e5       	ldi	r24, 0x5F	; 95
 384:	9d e6       	ldi	r25, 0x6D	; 109
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <lcd_init+0x46>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <lcd_init+0x4c>
 38c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
 38e:	68 e3       	ldi	r22, 0x38	; 56
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 396:	8f e1       	ldi	r24, 0x1F	; 31
 398:	9e e4       	ldi	r25, 0x4E	; 78
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <lcd_init+0x5a>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <lcd_init+0x60>
 3a0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
 3a2:	68 e0       	ldi	r22, 0x08	; 8
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 3aa:	8f e1       	ldi	r24, 0x1F	; 31
 3ac:	9e e4       	ldi	r25, 0x4E	; 78
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_init+0x6e>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <lcd_init+0x74>
 3b4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 3be:	8f e1       	ldi	r24, 0x1F	; 31
 3c0:	9e e4       	ldi	r25, 0x4E	; 78
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <lcd_init+0x82>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <lcd_init+0x88>
 3c8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
 3ca:	66 e0       	ldi	r22, 0x06	; 6
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 3d2:	8f e1       	ldi	r24, 0x1F	; 31
 3d4:	9e e4       	ldi	r25, 0x4E	; 78
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_init+0x96>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_init+0x9c>
 3dc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
 3de:	6c e0       	ldi	r22, 0x0C	; 12
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 3e6:	8f e1       	ldi	r24, 0x1F	; 31
 3e8:	9e e4       	ldi	r25, 0x4E	; 78
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <lcd_init+0xaa>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <lcd_init+0xb0>
 3f0:	00 00       	nop
 3f2:	08 95       	ret

000003f4 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 3f4:	af 92       	push	r10
 3f6:	bf 92       	push	r11
 3f8:	cf 92       	push	r12
 3fa:	df 92       	push	r13
 3fc:	ef 92       	push	r14
 3fe:	ff 92       	push	r15
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	69 97       	sbiw	r28, 0x19	; 25
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	b4 2e       	mov	r11, r20
 41a:	f2 2e       	mov	r15, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 41c:	00 23       	and	r16, r16
 41e:	51 f0       	breq	.+20     	; 0x434 <lcd_int32+0x40>
        bSigned = (qr.quot<0);
 420:	8b 01       	movw	r16, r22
 422:	9c 01       	movw	r18, r24
 424:	00 27       	eor	r16, r16
 426:	37 fd       	sbrc	r19, 7
 428:	03 95       	inc	r16
 42a:	11 27       	eor	r17, r17
 42c:	22 27       	eor	r18, r18
 42e:	33 27       	eor	r19, r19
        qr.quot = labs(qr.quot);
 430:	97 fd       	sbrc	r25, 7
 432:	8c c0       	rjmp	.+280    	; 0x54c <lcd_int32+0x158>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 434:	ff 20       	and	r15, r15
 436:	09 f4       	brne	.+2      	; 0x43a <lcd_int32+0x46>
 438:	81 c0       	rjmp	.+258    	; 0x53c <lcd_int32+0x148>
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	9e 01       	movw	r18, r28
 43e:	2f 5f       	subi	r18, 0xFF	; 255
 440:	3f 4f       	sbci	r19, 0xFF	; 255
 442:	69 01       	movw	r12, r18
 444:	01 c0       	rjmp	.+2      	; 0x448 <lcd_int32+0x54>
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
 446:	12 2f       	mov	r17, r18
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 448:	2a e0       	ldi	r18, 0x0A	; 10
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__divmodsi4>
 454:	a6 2f       	mov	r26, r22
 456:	2a 8b       	std	Y+18, r18	; 0x12
 458:	3b 8b       	std	Y+19, r19	; 0x13
 45a:	4c 8b       	std	Y+20, r20	; 0x14
 45c:	5d 8b       	std	Y+21, r21	; 0x15
 45e:	6a 89       	ldd	r22, Y+18	; 0x12
 460:	7b 89       	ldd	r23, Y+19	; 0x13
 462:	8c 89       	ldd	r24, Y+20	; 0x14
 464:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	21 0f       	add	r18, r17
 46a:	f6 01       	movw	r30, r12
 46c:	e1 0f       	add	r30, r17
 46e:	f1 1d       	adc	r31, r1
 470:	a0 5d       	subi	r26, 0xD0	; 208
 472:	a0 83       	st	Z, r26
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 474:	2f 11       	cpse	r18, r15
 476:	e7 cf       	rjmp	.-50     	; 0x446 <lcd_int32+0x52>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 478:	aa 24       	eor	r10, r10
 47a:	a3 94       	inc	r10
 47c:	af 0c       	add	r10, r15
 47e:	f6 01       	movw	r30, r12
 480:	ef 0d       	add	r30, r15
 482:	f1 1d       	adc	r31, r1
 484:	2e e2       	ldi	r18, 0x2E	; 46
 486:	20 83       	st	Z, r18
 488:	01 c0       	rjmp	.+2      	; 0x48c <lcd_int32+0x98>
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
 48a:	a1 2e       	mov	r10, r17
        sline[i++] = '.';
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 48c:	2a e0       	ldi	r18, 0x0A	; 10
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__divmodsi4>
 498:	a6 2f       	mov	r26, r22
 49a:	2a 8b       	std	Y+18, r18	; 0x12
 49c:	3b 8b       	std	Y+19, r19	; 0x13
 49e:	4c 8b       	std	Y+20, r20	; 0x14
 4a0:	5d 8b       	std	Y+21, r21	; 0x15
 4a2:	6e 8b       	std	Y+22, r22	; 0x16
 4a4:	7f 8b       	std	Y+23, r23	; 0x17
 4a6:	88 8f       	std	Y+24, r24	; 0x18
 4a8:	99 8f       	std	Y+25, r25	; 0x19
 4aa:	6a 89       	ldd	r22, Y+18	; 0x12
 4ac:	7b 89       	ldd	r23, Y+19	; 0x13
 4ae:	8c 89       	ldd	r24, Y+20	; 0x14
 4b0:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 4b2:	11 e0       	ldi	r17, 0x01	; 1
 4b4:	1a 0d       	add	r17, r10
 4b6:	f6 01       	movw	r30, r12
 4b8:	ea 0d       	add	r30, r10
 4ba:	f1 1d       	adc	r31, r1
 4bc:	a0 5d       	subi	r26, 0xD0	; 208
 4be:	a0 83       	st	Z, r26
        }while(qr.quot);
 4c0:	61 15       	cp	r22, r1
 4c2:	71 05       	cpc	r23, r1
 4c4:	81 05       	cpc	r24, r1
 4c6:	91 05       	cpc	r25, r1
 4c8:	01 f7       	brne	.-64     	; 0x48a <lcd_int32+0x96>

      // fill the whole field if a width was specified
      if (fieldwidth){
 4ca:	bb 20       	and	r11, r11
 4cc:	81 f0       	breq	.+32     	; 0x4ee <lcd_int32+0xfa>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 4ce:	e1 10       	cpse	r14, r1
 4d0:	3b c0       	rjmp	.+118    	; 0x548 <lcd_int32+0x154>
 4d2:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 4d4:	1b 15       	cp	r17, r11
 4d6:	10 f0       	brcs	.+4      	; 0x4dc <lcd_int32+0xe8>
 4d8:	0a c0       	rjmp	.+20     	; 0x4ee <lcd_int32+0xfa>
 4da:	18 2f       	mov	r17, r24
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	81 0f       	add	r24, r17
 4e0:	f6 01       	movw	r30, r12
 4e2:	e1 0f       	add	r30, r17
 4e4:	f1 1d       	adc	r31, r1
 4e6:	90 83       	st	Z, r25
 4e8:	8b 11       	cpse	r24, r11
 4ea:	f7 cf       	rjmp	.-18     	; 0x4da <lcd_int32+0xe6>
 4ec:	1b 2d       	mov	r17, r11
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 4ee:	00 23       	and	r16, r16
 4f0:	31 f0       	breq	.+12     	; 0x4fe <lcd_int32+0x10a>
 4f2:	f6 01       	movw	r30, r12
 4f4:	e1 0f       	add	r30, r17
 4f6:	f1 1d       	adc	r31, r1
 4f8:	8d e2       	ldi	r24, 0x2D	; 45
 4fa:	80 83       	st	Z, r24
 4fc:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 4fe:	11 50       	subi	r17, 0x01	; 1
 500:	f6 01       	movw	r30, r12
 502:	e1 0f       	add	r30, r17
 504:	f1 1d       	adc	r31, r1
 506:	60 81       	ld	r22, Z
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50e:	35 ed       	ldi	r19, 0xD5	; 213
 510:	3a 95       	dec	r19
 512:	f1 f7       	brne	.-4      	; 0x510 <lcd_int32+0x11c>
 514:	00 00       	nop
 516:	11 11       	cpse	r17, r1
 518:	f2 cf       	rjmp	.-28     	; 0x4fe <lcd_int32+0x10a>

}
 51a:	69 96       	adiw	r28, 0x19	; 25
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	ff 90       	pop	r15
 530:	ef 90       	pop	r14
 532:	df 90       	pop	r13
 534:	cf 90       	pop	r12
 536:	bf 90       	pop	r11
 538:	af 90       	pop	r10
 53a:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 53c:	a1 2c       	mov	r10, r1
 53e:	9e 01       	movw	r18, r28
 540:	2f 5f       	subi	r18, 0xFF	; 255
 542:	3f 4f       	sbci	r19, 0xFF	; 255
 544:	69 01       	movw	r12, r18
 546:	a2 cf       	rjmp	.-188    	; 0x48c <lcd_int32+0x98>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 548:	90 e3       	ldi	r25, 0x30	; 48
 54a:	c4 cf       	rjmp	.-120    	; 0x4d4 <lcd_int32+0xe0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 54c:	90 95       	com	r25
 54e:	80 95       	com	r24
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	6c cf       	rjmp	.-296    	; 0x434 <lcd_int32+0x40>

0000055c <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
 55c:	9f 92       	push	r9
 55e:	af 92       	push	r10
 560:	bf 92       	push	r11
 562:	cf 92       	push	r12
 564:	df 92       	push	r13
 566:	ef 92       	push	r14
 568:	ff 92       	push	r15
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	61 97       	sbiw	r28, 0x11	; 17
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
 582:	fc 01       	movw	r30, r24
 584:	e6 2e       	mov	r14, r22
 586:	94 2e       	mov	r9, r20
 588:	b2 2e       	mov	r11, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
 58a:	cf 2e       	mov	r12, r31
 58c:	cc 1c       	adc	r12, r12
 58e:	cc 24       	eor	r12, r12
 590:	cc 1c       	adc	r12, r12
 592:	fc 2c       	mov	r15, r12
 594:	19 f0       	breq	.+6      	; 0x59c <lcd_int16+0x40>
                qr.quot = -qr.quot;
 596:	f1 95       	neg	r31
 598:	e1 95       	neg	r30
 59a:	f1 09       	sbc	r31, r1

        // convert the digits to the right of the decimal point 
        if (decpos){
 59c:	99 20       	and	r9, r9
 59e:	09 f4       	brne	.+2      	; 0x5a2 <lcd_int16+0x46>
 5a0:	85 c0       	rjmp	.+266    	; 0x6ac <lcd_int16+0x150>
 5a2:	d1 2c       	mov	r13, r1
 5a4:	8e 01       	movw	r16, r28
 5a6:	0f 5f       	subi	r16, 0xFF	; 255
 5a8:	1f 4f       	sbci	r17, 0xFF	; 255
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <lcd_int16+0x52>
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
 5ac:	d9 2e       	mov	r13, r25
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
 5ae:	6a e0       	ldi	r22, 0x0A	; 10
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	cf 01       	movw	r24, r30
 5b4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__divmodhi4>
 5b8:	26 2f       	mov	r18, r22
 5ba:	e2 2f       	mov	r30, r18
 5bc:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	9d 0d       	add	r25, r13
 5c2:	d8 01       	movw	r26, r16
 5c4:	ad 0d       	add	r26, r13
 5c6:	b1 1d       	adc	r27, r1
 5c8:	80 5d       	subi	r24, 0xD0	; 208
 5ca:	8c 93       	st	X, r24
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
 5cc:	99 11       	cpse	r25, r9
 5ce:	ee cf       	rjmp	.-36     	; 0x5ac <lcd_int16+0x50>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
 5d0:	aa 24       	eor	r10, r10
 5d2:	a3 94       	inc	r10
 5d4:	a9 0c       	add	r10, r9
 5d6:	d8 01       	movw	r26, r16
 5d8:	a9 0d       	add	r26, r9
 5da:	b1 1d       	adc	r27, r1
 5dc:	8e e2       	ldi	r24, 0x2E	; 46
 5de:	8c 93       	st	X, r24
 5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <lcd_int16+0x88>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
 5e2:	ad 2c       	mov	r10, r13
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
 5e4:	6a e0       	ldi	r22, 0x0A	; 10
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	cf 01       	movw	r24, r30
 5ea:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__divmodhi4>
 5ee:	26 2f       	mov	r18, r22
 5f0:	e2 2f       	mov	r30, r18
 5f2:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
 5f4:	dd 24       	eor	r13, r13
 5f6:	d3 94       	inc	r13
 5f8:	da 0c       	add	r13, r10
 5fa:	d8 01       	movw	r26, r16
 5fc:	aa 0d       	add	r26, r10
 5fe:	b1 1d       	adc	r27, r1
 600:	80 5d       	subi	r24, 0xD0	; 208
 602:	8c 93       	st	X, r24
        }
        while(qr.quot);
 604:	30 97       	sbiw	r30, 0x00	; 0
 606:	69 f7       	brne	.-38     	; 0x5e2 <lcd_int16+0x86>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
 608:	8d 2d       	mov	r24, r13
        }
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
 60a:	bb 20       	and	r11, r11
 60c:	51 f1       	breq	.+84     	; 0x662 <lcd_int16+0x106>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 60e:	e1 10       	cpse	r14, r1
 610:	52 c0       	rjmp	.+164    	; 0x6b6 <lcd_int16+0x15a>
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
 612:	ff 20       	and	r15, r15
 614:	31 f0       	breq	.+12     	; 0x622 <lcd_int16+0xc6>
 616:	f8 01       	movw	r30, r16
 618:	ed 0d       	add	r30, r13
 61a:	f1 1d       	adc	r31, r1
 61c:	8d e2       	ldi	r24, 0x2D	; 45
 61e:	80 83       	st	Z, r24
 620:	d3 94       	inc	r13

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 622:	da 94       	dec	r13
 624:	f8 01       	movw	r30, r16
 626:	ed 0d       	add	r30, r13
 628:	f1 1d       	adc	r31, r1
 62a:	60 81       	ld	r22, Z
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	0e 94 6d 00 	call	0xda	; 0xda <send_lcd>
 632:	85 ed       	ldi	r24, 0xD5	; 213
 634:	8a 95       	dec	r24
 636:	f1 f7       	brne	.-4      	; 0x634 <lcd_int16+0xd8>
 638:	00 00       	nop
 63a:	d1 10       	cpse	r13, r1
 63c:	f2 cf       	rjmp	.-28     	; 0x622 <lcd_int16+0xc6>
}
 63e:	61 96       	adiw	r28, 0x11	; 17
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	de bf       	out	0x3e, r29	; 62
 646:	0f be       	out	0x3f, r0	; 63
 648:	cd bf       	out	0x3d, r28	; 61
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	1f 91       	pop	r17
 650:	0f 91       	pop	r16
 652:	ff 90       	pop	r15
 654:	ef 90       	pop	r14
 656:	df 90       	pop	r13
 658:	cf 90       	pop	r12
 65a:	bf 90       	pop	r11
 65c:	af 90       	pop	r10
 65e:	9f 90       	pop	r9
 660:	08 95       	ret
                sline[i++] = qr.rem + '0';
        }
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
 662:	cc 20       	and	r12, r12
 664:	41 f0       	breq	.+16     	; 0x676 <lcd_int16+0x11a>
        {
                sline[i++] = '-';
 666:	52 e0       	ldi	r21, 0x02	; 2
 668:	d5 2e       	mov	r13, r21
 66a:	da 0c       	add	r13, r10
 66c:	f8 01       	movw	r30, r16
 66e:	e8 0f       	add	r30, r24
 670:	f1 1d       	adc	r31, r1
 672:	8d e2       	ldi	r24, 0x2D	; 45
 674:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 676:	ee 20       	and	r14, r14
 678:	a1 f2       	breq	.-88     	; 0x622 <lcd_int16+0xc6>
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	f1 2c       	mov	r15, r1
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 680:	40 e2       	ldi	r20, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 682:	8d 2d       	mov	r24, r13
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	6e 2d       	mov	r22, r14
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	62 1b       	sub	r22, r18
 68c:	73 0b       	sbc	r23, r19
 68e:	86 17       	cp	r24, r22
 690:	97 07       	cpc	r25, r23
 692:	0c f0       	brlt	.+2      	; 0x696 <lcd_int16+0x13a>
 694:	be cf       	rjmp	.-132    	; 0x612 <lcd_int16+0xb6>
 696:	d3 94       	inc	r13
 698:	f8 01       	movw	r30, r16
 69a:	e8 0f       	add	r30, r24
 69c:	f9 1f       	adc	r31, r25
 69e:	40 83       	st	Z, r20
 6a0:	8d 2d       	mov	r24, r13
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	86 17       	cp	r24, r22
 6a6:	97 07       	cpc	r25, r23
 6a8:	b4 f3       	brlt	.-20     	; 0x696 <lcd_int16+0x13a>
 6aa:	b3 cf       	rjmp	.-154    	; 0x612 <lcd_int16+0xb6>
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
 6ac:	a1 2c       	mov	r10, r1
 6ae:	8e 01       	movw	r16, r28
 6b0:	0f 5f       	subi	r16, 0xFF	; 255
 6b2:	1f 4f       	sbci	r17, 0xFF	; 255
 6b4:	97 cf       	rjmp	.-210    	; 0x5e4 <lcd_int16+0x88>
 6b6:	2c 2d       	mov	r18, r12
 6b8:	30 e0       	ldi	r19, 0x00	; 0
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 6ba:	40 e3       	ldi	r20, 0x30	; 48
 6bc:	e2 cf       	rjmp	.-60     	; 0x682 <lcd_int16+0x126>

000006be <main>:
/*******************************************************/

int main()
{
    //initalize the SPI port then the LCD
    spi_init();
 6be:	0e 94 5a 00 	call	0xb4	; 0xb4 <spi_init>
    lcd_init();
 6c2:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_init>
    clear_display();
 6c6:	0e 94 4d 01 	call	0x29a	; 0x29a <clear_display>
    
    //Initalize ADC and its ports
    DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input
 6ca:	80 91 61 00 	lds	r24, 0x0061
 6ce:	8f 77       	andi	r24, 0x7F	; 127
 6d0:	80 93 61 00 	sts	0x0061, r24
    PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
 6d4:	80 91 62 00 	lds	r24, 0x0062
 6d8:	8f 77       	andi	r24, 0x7F	; 127
 6da:	80 93 62 00 	sts	0x0062, r24
    
    ADMUX |= (1<<REFS0)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);  //single-ended, input PORTF bit 7, right adjusted, 10 bits
 6de:	87 b1       	in	r24, 0x07	; 7
 6e0:	87 64       	ori	r24, 0x47	; 71
 6e2:	87 b9       	out	0x07, r24	; 7
    
   ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 6e4:	86 b1       	in	r24, 0x06	; 6
 6e6:	87 68       	ori	r24, 0x87	; 135
 6e8:	86 b9       	out	0x06, r24	; 6
        //div() function computes the value num/denom and returns the quotient and
        //remainder in a structure called div_t that contains two members, quot and rem.
        //now determine Vin, where Vin = (adc_result/204.8)
        fp_adc_result = div(adc_result, 205);              //do division by 205 (204.8 to be exact)
        itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
        fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fractional form
 6ea:	c4 e6       	ldi	r28, 0x64	; 100
        cursor_home();
    } //while
     */
    
    while(1){
        ADCSRA|= (1<<ADSC);						//poke ADSC and start conversion
 6ec:	36 9a       	sbi	0x06, 6	; 6
        while (bit_is_clear(ADCSR,ADIF)){}		//spin while interrupt flag not set
 6ee:	34 9b       	sbis	0x06, 4	; 6
 6f0:	fe cf       	rjmp	.-4      	; 0x6ee <main+0x30>
        ADCSRA |= (1<<ADIF);					//its done, clear flag by writing a one
 6f2:	34 9a       	sbi	0x06, 4	; 6
        adc_result = ADC;                      //read the ADC output as 16 bits
 6f4:	84 b1       	in	r24, 0x04	; 4
 6f6:	95 b1       	in	r25, 0x05	; 5
 6f8:	90 93 02 01 	sts	0x0102, r25
 6fc:	80 93 01 01 	sts	0x0101, r24
        
        //div() function computes the value num/denom and returns the quotient and
        //remainder in a structure called div_t that contains two members, quot and rem.
        //now determine Vin, where Vin = (adc_result/204.8)
        fp_adc_result = div(adc_result, 205);              //do division by 205 (204.8 to be exact)
 700:	6d ec       	ldi	r22, 0xCD	; 205
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__divmodhi4>
 708:	9b 01       	movw	r18, r22
 70a:	60 93 28 01 	sts	0x0128, r22
 70e:	70 93 29 01 	sts	0x0129, r23
 712:	80 93 2a 01 	sts	0x012A, r24
 716:	90 93 2b 01 	sts	0x012B, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 71a:	4a e0       	ldi	r20, 0x0A	; 10
 71c:	68 e1       	ldi	r22, 0x18	; 24
 71e:	71 e0       	ldi	r23, 0x01	; 1
 720:	c9 01       	movw	r24, r18
 722:	0e 94 3b 04 	call	0x876	; 0x876 <__itoa_ncheck>
        itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
        fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fractional form
 726:	80 91 2a 01 	lds	r24, 0x012A
 72a:	90 91 2b 01 	lds	r25, 0x012B
 72e:	6d ec       	ldi	r22, 0xCD	; 205
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	9c 01       	movw	r18, r24
 734:	c2 9f       	mul	r28, r18
 736:	c0 01       	movw	r24, r0
 738:	c3 9f       	mul	r28, r19
 73a:	90 0d       	add	r25, r0
 73c:	11 24       	eor	r1, r1
 73e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__divmodhi4>
 742:	9b 01       	movw	r18, r22
 744:	60 93 14 01 	sts	0x0114, r22
 748:	70 93 15 01 	sts	0x0115, r23
 74c:	80 93 16 01 	sts	0x0116, r24
 750:	90 93 17 01 	sts	0x0117, r25
 754:	4a e0       	ldi	r20, 0x0A	; 10
 756:	63 e0       	ldi	r22, 0x03	; 3
 758:	71 e0       	ldi	r23, 0x01	; 1
 75a:	c9 01       	movw	r24, r18
 75c:	0e 94 3b 04 	call	0x876	; 0x876 <__itoa_ncheck>
        itoa(fp_low_result.quot, lcd_str_l, 10);           //convert fractional part to ascii string
        
        
        //send string to LCD
        string2lcd(lcd_str_h);  //write upper half
 760:	88 e1       	ldi	r24, 0x18	; 24
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	0e 94 7d 01 	call	0x2fa	; 0x2fa <string2lcd>
        char2lcd('.');          //write decimal point
 768:	8e e2       	ldi	r24, 0x2E	; 46
 76a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <char2lcd>
        string2lcd(lcd_str_l);  //write lower half
 76e:	83 e0       	ldi	r24, 0x03	; 3
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	0e 94 7d 01 	call	0x2fa	; 0x2fa <string2lcd>
        
        for(i=0;i<=10;i++){ _delay_ms(50);}  //delay 0.5 sec
 776:	10 92 13 01 	sts	0x0113, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 77a:	3f ef       	ldi	r19, 0xFF	; 255
 77c:	80 e7       	ldi	r24, 0x70	; 112
 77e:	92 e0       	ldi	r25, 0x02	; 2
 780:	31 50       	subi	r19, 0x01	; 1
 782:	80 40       	sbci	r24, 0x00	; 0
 784:	90 40       	sbci	r25, 0x00	; 0
 786:	e1 f7       	brne	.-8      	; 0x780 <main+0xc2>
 788:	00 c0       	rjmp	.+0      	; 0x78a <main+0xcc>
 78a:	00 00       	nop
 78c:	80 91 13 01 	lds	r24, 0x0113
 790:	8f 5f       	subi	r24, 0xFF	; 255
 792:	80 93 13 01 	sts	0x0113, r24
 796:	8b 30       	cpi	r24, 0x0B	; 11
 798:	80 f3       	brcs	.-32     	; 0x77a <main+0xbc>
        clear_display();
 79a:	0e 94 4d 01 	call	0x29a	; 0x29a <clear_display>
        cursor_home();
 79e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <cursor_home>
    } //while
 7a2:	a4 cf       	rjmp	.-184    	; 0x6ec <main+0x2e>

000007a4 <__divmodhi4>:
 7a4:	97 fb       	bst	r25, 7
 7a6:	07 2e       	mov	r0, r23
 7a8:	16 f4       	brtc	.+4      	; 0x7ae <__divmodhi4+0xa>
 7aa:	00 94       	com	r0
 7ac:	07 d0       	rcall	.+14     	; 0x7bc <__divmodhi4_neg1>
 7ae:	77 fd       	sbrc	r23, 7
 7b0:	09 d0       	rcall	.+18     	; 0x7c4 <__divmodhi4_neg2>
 7b2:	0e 94 05 04 	call	0x80a	; 0x80a <__udivmodhi4>
 7b6:	07 fc       	sbrc	r0, 7
 7b8:	05 d0       	rcall	.+10     	; 0x7c4 <__divmodhi4_neg2>
 7ba:	3e f4       	brtc	.+14     	; 0x7ca <__divmodhi4_exit>

000007bc <__divmodhi4_neg1>:
 7bc:	90 95       	com	r25
 7be:	81 95       	neg	r24
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	08 95       	ret

000007c4 <__divmodhi4_neg2>:
 7c4:	70 95       	com	r23
 7c6:	61 95       	neg	r22
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255

000007ca <__divmodhi4_exit>:
 7ca:	08 95       	ret

000007cc <__divmodsi4>:
 7cc:	05 2e       	mov	r0, r21
 7ce:	97 fb       	bst	r25, 7
 7d0:	1e f4       	brtc	.+6      	; 0x7d8 <__divmodsi4+0xc>
 7d2:	00 94       	com	r0
 7d4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__negsi2>
 7d8:	57 fd       	sbrc	r21, 7
 7da:	07 d0       	rcall	.+14     	; 0x7ea <__divmodsi4_neg2>
 7dc:	0e 94 19 04 	call	0x832	; 0x832 <__udivmodsi4>
 7e0:	07 fc       	sbrc	r0, 7
 7e2:	03 d0       	rcall	.+6      	; 0x7ea <__divmodsi4_neg2>
 7e4:	4e f4       	brtc	.+18     	; 0x7f8 <__divmodsi4_exit>
 7e6:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__negsi2>

000007ea <__divmodsi4_neg2>:
 7ea:	50 95       	com	r21
 7ec:	40 95       	com	r20
 7ee:	30 95       	com	r19
 7f0:	21 95       	neg	r18
 7f2:	3f 4f       	sbci	r19, 0xFF	; 255
 7f4:	4f 4f       	sbci	r20, 0xFF	; 255
 7f6:	5f 4f       	sbci	r21, 0xFF	; 255

000007f8 <__divmodsi4_exit>:
 7f8:	08 95       	ret

000007fa <__negsi2>:
 7fa:	90 95       	com	r25
 7fc:	80 95       	com	r24
 7fe:	70 95       	com	r23
 800:	61 95       	neg	r22
 802:	7f 4f       	sbci	r23, 0xFF	; 255
 804:	8f 4f       	sbci	r24, 0xFF	; 255
 806:	9f 4f       	sbci	r25, 0xFF	; 255
 808:	08 95       	ret

0000080a <__udivmodhi4>:
 80a:	aa 1b       	sub	r26, r26
 80c:	bb 1b       	sub	r27, r27
 80e:	51 e1       	ldi	r21, 0x11	; 17
 810:	07 c0       	rjmp	.+14     	; 0x820 <__udivmodhi4_ep>

00000812 <__udivmodhi4_loop>:
 812:	aa 1f       	adc	r26, r26
 814:	bb 1f       	adc	r27, r27
 816:	a6 17       	cp	r26, r22
 818:	b7 07       	cpc	r27, r23
 81a:	10 f0       	brcs	.+4      	; 0x820 <__udivmodhi4_ep>
 81c:	a6 1b       	sub	r26, r22
 81e:	b7 0b       	sbc	r27, r23

00000820 <__udivmodhi4_ep>:
 820:	88 1f       	adc	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	5a 95       	dec	r21
 826:	a9 f7       	brne	.-22     	; 0x812 <__udivmodhi4_loop>
 828:	80 95       	com	r24
 82a:	90 95       	com	r25
 82c:	bc 01       	movw	r22, r24
 82e:	cd 01       	movw	r24, r26
 830:	08 95       	ret

00000832 <__udivmodsi4>:
 832:	a1 e2       	ldi	r26, 0x21	; 33
 834:	1a 2e       	mov	r1, r26
 836:	aa 1b       	sub	r26, r26
 838:	bb 1b       	sub	r27, r27
 83a:	fd 01       	movw	r30, r26
 83c:	0d c0       	rjmp	.+26     	; 0x858 <__udivmodsi4_ep>

0000083e <__udivmodsi4_loop>:
 83e:	aa 1f       	adc	r26, r26
 840:	bb 1f       	adc	r27, r27
 842:	ee 1f       	adc	r30, r30
 844:	ff 1f       	adc	r31, r31
 846:	a2 17       	cp	r26, r18
 848:	b3 07       	cpc	r27, r19
 84a:	e4 07       	cpc	r30, r20
 84c:	f5 07       	cpc	r31, r21
 84e:	20 f0       	brcs	.+8      	; 0x858 <__udivmodsi4_ep>
 850:	a2 1b       	sub	r26, r18
 852:	b3 0b       	sbc	r27, r19
 854:	e4 0b       	sbc	r30, r20
 856:	f5 0b       	sbc	r31, r21

00000858 <__udivmodsi4_ep>:
 858:	66 1f       	adc	r22, r22
 85a:	77 1f       	adc	r23, r23
 85c:	88 1f       	adc	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	1a 94       	dec	r1
 862:	69 f7       	brne	.-38     	; 0x83e <__udivmodsi4_loop>
 864:	60 95       	com	r22
 866:	70 95       	com	r23
 868:	80 95       	com	r24
 86a:	90 95       	com	r25
 86c:	9b 01       	movw	r18, r22
 86e:	ac 01       	movw	r20, r24
 870:	bd 01       	movw	r22, r26
 872:	cf 01       	movw	r24, r30
 874:	08 95       	ret

00000876 <__itoa_ncheck>:
 876:	bb 27       	eor	r27, r27
 878:	4a 30       	cpi	r20, 0x0A	; 10
 87a:	31 f4       	brne	.+12     	; 0x888 <__itoa_ncheck+0x12>
 87c:	99 23       	and	r25, r25
 87e:	22 f4       	brpl	.+8      	; 0x888 <__itoa_ncheck+0x12>
 880:	bd e2       	ldi	r27, 0x2D	; 45
 882:	90 95       	com	r25
 884:	81 95       	neg	r24
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	0c 94 47 04 	jmp	0x88e	; 0x88e <__utoa_common>

0000088c <__utoa_ncheck>:
 88c:	bb 27       	eor	r27, r27

0000088e <__utoa_common>:
 88e:	fb 01       	movw	r30, r22
 890:	55 27       	eor	r21, r21
 892:	aa 27       	eor	r26, r26
 894:	88 0f       	add	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	aa 1f       	adc	r26, r26
 89a:	a4 17       	cp	r26, r20
 89c:	10 f0       	brcs	.+4      	; 0x8a2 <__utoa_common+0x14>
 89e:	a4 1b       	sub	r26, r20
 8a0:	83 95       	inc	r24
 8a2:	50 51       	subi	r21, 0x10	; 16
 8a4:	b9 f7       	brne	.-18     	; 0x894 <__utoa_common+0x6>
 8a6:	a0 5d       	subi	r26, 0xD0	; 208
 8a8:	aa 33       	cpi	r26, 0x3A	; 58
 8aa:	08 f0       	brcs	.+2      	; 0x8ae <__utoa_common+0x20>
 8ac:	a9 5d       	subi	r26, 0xD9	; 217
 8ae:	a1 93       	st	Z+, r26
 8b0:	00 97       	sbiw	r24, 0x00	; 0
 8b2:	79 f7       	brne	.-34     	; 0x892 <__utoa_common+0x4>
 8b4:	b1 11       	cpse	r27, r1
 8b6:	b1 93       	st	Z+, r27
 8b8:	11 92       	st	Z+, r1
 8ba:	cb 01       	movw	r24, r22
 8bc:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <strrev>

000008c0 <strrev>:
 8c0:	dc 01       	movw	r26, r24
 8c2:	fc 01       	movw	r30, r24
 8c4:	67 2f       	mov	r22, r23
 8c6:	71 91       	ld	r23, Z+
 8c8:	77 23       	and	r23, r23
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <strrev+0x4>
 8cc:	32 97       	sbiw	r30, 0x02	; 2
 8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <strrev+0x18>
 8d0:	7c 91       	ld	r23, X
 8d2:	6d 93       	st	X+, r22
 8d4:	70 83       	st	Z, r23
 8d6:	62 91       	ld	r22, -Z
 8d8:	ae 17       	cp	r26, r30
 8da:	bf 07       	cpc	r27, r31
 8dc:	c8 f3       	brcs	.-14     	; 0x8d0 <strrev+0x10>
 8de:	08 95       	ret

000008e0 <_exit>:
 8e0:	f8 94       	cli

000008e2 <__stop_program>:
 8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <__stop_program>
