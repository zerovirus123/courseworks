
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00003176  0000320a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  00800196  00800196  000032a0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000032b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003aab  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000400  00000000  00000000  00006e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001300  00000000  00000000  0000720b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d4  00000000  00000000  0000850c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000521  00000000  00000000  000088e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002f0b  00000000  00000000  00008e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000bd0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__ctors_end>
       4:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
       8:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
       c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      10:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      14:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      18:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      1c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      20:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      24:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      28:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      2c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      30:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__vector_12>
      34:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      38:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      3c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      40:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__vector_16>
      44:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      48:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      4c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      50:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      54:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__vector_21>
      58:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      5c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      60:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      64:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      68:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      6c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      70:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      74:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      78:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      7c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      80:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      84:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      88:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      8c:	ed 05       	cpc	r30, r13
      8e:	f5 05       	cpc	r31, r5
      90:	fd 05       	cpc	r31, r13
      92:	05 06       	cpc	r0, r21
      94:	0d 06       	cpc	r0, r29
      96:	16 06       	cpc	r1, r22
      98:	1f 06       	cpc	r1, r31
      9a:	dd 05       	cpc	r29, r13
      9c:	e5 05       	cpc	r30, r5
      9e:	73 07       	cpc	r23, r19
      a0:	6b 07       	cpc	r22, r27
      a2:	66 07       	cpc	r22, r22
      a4:	90 07       	cpc	r25, r16
      a6:	83 07       	cpc	r24, r19
      a8:	8b 07       	cpc	r24, r27
      aa:	7b 07       	cpc	r23, r27
      ac:	44 07       	cpc	r20, r20
      ae:	3c 07       	cpc	r19, r28
      b0:	37 07       	cpc	r19, r23
      b2:	2f 07       	cpc	r18, r31
      b4:	98 07       	cpc	r25, r24
      b6:	4c 07       	cpc	r20, r28
      b8:	22 07       	cpc	r18, r18
      ba:	0a 07       	cpc	r16, r26
      bc:	b8 07       	cpc	r27, r24
      be:	61 07       	cpc	r22, r17
      c0:	59 07       	cpc	r21, r25
      c2:	51 07       	cpc	r21, r17
      c4:	d8 07       	cpc	r29, r24
      c6:	12 07       	cpc	r17, r18
      c8:	c8 07       	cpc	r28, r24
      ca:	1a 07       	cpc	r17, r26
      cc:	e5 07       	cpc	r30, r21
      ce:	b0 07       	cpc	r27, r16
      d0:	d0 07       	cpc	r29, r16
      d2:	2a 07       	cpc	r18, r26
      d4:	a8 07       	cpc	r26, r24
      d6:	a0 07       	cpc	r26, r16
      d8:	c0 07       	cpc	r28, r16
      da:	05 07       	cpc	r16, r21
      dc:	d3 06       	cpc	r13, r19
      de:	cb 06       	cpc	r12, r27
      e0:	db 06       	cpc	r13, r27
      e2:	dd 07       	cpc	r29, r29
      e4:	be 06       	cpc	r11, r30
      e6:	b6 06       	cpc	r11, r22
      e8:	e0 06       	cpc	r14, r16
      ea:	99 06       	cpc	r9, r25
      ec:	fd 06       	cpc	r15, r29
      ee:	c6 06       	cpc	r12, r22
      f0:	a9 06       	cpc	r10, r25
      f2:	a1 06       	cpc	r10, r17
      f4:	ed 06       	cpc	r14, r29
      f6:	b1 06       	cpc	r11, r17
      f8:	e5 06       	cpc	r14, r21
      fa:	91 06       	cpc	r9, r17
      fc:	77 06       	cpc	r7, r23
      fe:	f5 06       	cpc	r15, r21
     100:	67 06       	cpc	r6, r23
     102:	5f 06       	cpc	r5, r31
     104:	84 06       	cpc	r8, r20
     106:	7c 06       	cpc	r7, r28
     108:	89 06       	cpc	r8, r25
     10a:	5a 06       	cpc	r5, r26
     10c:	6f 06       	cpc	r6, r31
     10e:	42 06       	cpc	r4, r18
     110:	52 06       	cpc	r5, r18
     112:	3d 06       	cpc	r3, r29
     114:	35 06       	cpc	r3, r21
     116:	2d 06       	cpc	r2, r29
     118:	28 06       	cpc	r2, r24
     11a:	4a 06       	cpc	r4, r26
     11c:	ef 08       	sbc	r14, r15
     11e:	0d 09       	sbc	r16, r13
     120:	e9 08       	sbc	r14, r9
     122:	fb 08       	sbc	r15, r11
     124:	dd 08       	sbc	r13, r13
     126:	e3 08       	sbc	r14, r3
     128:	dd 08       	sbc	r13, r13
     12a:	e3 08       	sbc	r14, r3
     12c:	13 09       	sbc	r17, r3
     12e:	ef 08       	sbc	r14, r15
     130:	0d 09       	sbc	r16, r13
     132:	e9 08       	sbc	r14, r9
     134:	fb 08       	sbc	r15, r11
     136:	f5 08       	sbc	r15, r5
     138:	d7 08       	sbc	r13, r7
     13a:	f5 08       	sbc	r15, r5
     13c:	d7 08       	sbc	r13, r7
     13e:	3d 09       	sbc	r19, r13
     140:	79 09       	sbc	r23, r9
     142:	31 09       	sbc	r19, r1
     144:	a9 09       	sbc	r26, r9
     146:	31 09       	sbc	r19, r1
     148:	6d 09       	sbc	r22, r13
     14a:	67 09       	sbc	r22, r7
     14c:	d7 08       	sbc	r13, r7
     14e:	43 09       	sbc	r20, r3
     150:	d7 08       	sbc	r13, r7
     152:	55 09       	sbc	r21, r5
     154:	01 09       	sbc	r16, r1
     156:	97 09       	sbc	r25, r7
     158:	dd 08       	sbc	r13, r13
     15a:	8b 09       	sbc	r24, r11
     15c:	19 09       	sbc	r17, r9
     15e:	91 09       	sbc	r25, r1
     160:	1f 09       	sbc	r17, r15
     162:	9d 09       	sbc	r25, r13
     164:	61 09       	sbc	r22, r1
     166:	07 09       	sbc	r16, r7
     168:	01 09       	sbc	r16, r1
     16a:	49 09       	sbc	r20, r9
     16c:	25 09       	sbc	r18, r5
     16e:	ef 08       	sbc	r14, r15
     170:	0d 09       	sbc	r16, r13
     172:	e9 08       	sbc	r14, r9
     174:	fb 08       	sbc	r15, r11
     176:	dd 08       	sbc	r13, r13
     178:	e3 08       	sbc	r14, r3
     17a:	dd 08       	sbc	r13, r13
     17c:	e3 08       	sbc	r14, r3
     17e:	13 09       	sbc	r17, r3
     180:	ef 08       	sbc	r14, r15
     182:	73 09       	sbc	r23, r3
     184:	07 09       	sbc	r16, r7
     186:	e9 08       	sbc	r14, r9
     188:	f5 08       	sbc	r15, r5
     18a:	d7 08       	sbc	r13, r7
     18c:	f5 08       	sbc	r15, r5
     18e:	d7 08       	sbc	r13, r7
     190:	3d 09       	sbc	r19, r13
     192:	7f 09       	sbc	r23, r15
     194:	4f 09       	sbc	r20, r15
     196:	13 09       	sbc	r17, r3
     198:	85 09       	sbc	r24, r5
     19a:	43 09       	sbc	r20, r3
     19c:	19 09       	sbc	r17, r9
     19e:	1f 09       	sbc	r17, r15
     1a0:	01 09       	sbc	r16, r1
     1a2:	07 09       	sbc	r16, r7
     1a4:	a3 09       	sbc	r26, r3
     1a6:	25 09       	sbc	r18, r5
     1a8:	c1 09       	sbc	r28, r1
     1aa:	e5 09       	sbc	r30, r5
     1ac:	bb 09       	sbc	r27, r11
     1ae:	df 09       	sbc	r29, r15
     1b0:	63 0a       	sbc	r6, r19
     1b2:	5d 0a       	sbc	r5, r29
     1b4:	bb 09       	sbc	r27, r11
     1b6:	e5 09       	sbc	r30, r5
     1b8:	eb 09       	sbc	r30, r11
     1ba:	c7 09       	sbc	r28, r7
     1bc:	6f 0a       	sbc	r6, r31
     1be:	bb 09       	sbc	r27, r11
     1c0:	c1 09       	sbc	r28, r1
     1c2:	df 09       	sbc	r29, r15
     1c4:	bb 09       	sbc	r27, r11
     1c6:	27 0a       	sbc	r2, r23
     1c8:	bb 09       	sbc	r27, r11
     1ca:	d3 09       	sbc	r29, r3
     1cc:	c1 09       	sbc	r28, r1
     1ce:	03 0a       	sbc	r0, r19
     1d0:	eb 09       	sbc	r30, r11
     1d2:	c7 09       	sbc	r28, r7
     1d4:	fd 09       	sbc	r31, r13
     1d6:	81 0a       	sbc	r8, r17
     1d8:	d3 09       	sbc	r29, r3
     1da:	f1 09       	sbc	r31, r1
     1dc:	8d 0a       	sbc	r8, r29
     1de:	3f 0a       	sbc	r3, r31
     1e0:	f1 09       	sbc	r31, r1
     1e2:	57 0a       	sbc	r5, r23
     1e4:	bb 09       	sbc	r27, r11
     1e6:	c1 09       	sbc	r28, r1
     1e8:	df 09       	sbc	r29, r15
     1ea:	bb 09       	sbc	r27, r11
     1ec:	21 0a       	sbc	r2, r17
     1ee:	c7 09       	sbc	r28, r7
     1f0:	e5 09       	sbc	r30, r5
     1f2:	bb 09       	sbc	r27, r11
     1f4:	d3 09       	sbc	r29, r3
     1f6:	c1 09       	sbc	r28, r1
     1f8:	03 0a       	sbc	r0, r19
     1fa:	eb 09       	sbc	r30, r11
     1fc:	c7 09       	sbc	r28, r7
     1fe:	7b 0a       	sbc	r7, r27
     200:	15 0a       	sbc	r1, r21
     202:	0f 0a       	sbc	r0, r31
     204:	d9 09       	sbc	r29, r9
     206:	09 0a       	sbc	r0, r25
     208:	f7 09       	sbc	r31, r7
     20a:	d9 09       	sbc	r29, r9
     20c:	4b 0a       	sbc	r4, r27
     20e:	51 0a       	sbc	r5, r17
     210:	45 0a       	sbc	r4, r21
     212:	15 0a       	sbc	r1, r21
     214:	0f 0a       	sbc	r0, r31
     216:	d9 09       	sbc	r29, r9
     218:	09 0a       	sbc	r0, r25
     21a:	f7 09       	sbc	r31, r7
     21c:	69 0a       	sbc	r6, r25
     21e:	75 0a       	sbc	r7, r21
     220:	fd 09       	sbc	r31, r13
     222:	2d 0a       	sbc	r2, r29
     224:	33 0a       	sbc	r3, r19
     226:	3d 0f       	add	r19, r29
     228:	31 0f       	add	r19, r17
     22a:	2b 0f       	add	r18, r27
     22c:	1f 0f       	add	r17, r31
     22e:	19 0f       	add	r17, r25
     230:	0d 0f       	add	r16, r29
     232:	07 0f       	add	r16, r23
     234:	01 0f       	add	r16, r17
     236:	fb 0e       	add	r15, r27
     238:	f5 0e       	add	r15, r21
     23a:	e9 0e       	add	r14, r25
     23c:	e3 0e       	add	r14, r19
     23e:	dd 0e       	add	r13, r29
     240:	d1 0e       	add	r13, r17
     242:	cb 0e       	add	r12, r27
     244:	bf 0e       	add	r11, r31
     246:	b9 0e       	add	r11, r25
     248:	ad 0e       	add	r10, r29
     24a:	a7 0e       	add	r10, r23
     24c:	9b 0e       	add	r9, r27
     24e:	95 0e       	add	r9, r21
     250:	8f 0e       	add	r8, r31
     252:	89 0e       	add	r8, r25
     254:	83 0e       	add	r8, r19
     256:	77 0e       	add	r7, r23
     258:	71 0e       	add	r7, r17
     25a:	6b 0e       	add	r6, r27
     25c:	65 0e       	add	r6, r21
     25e:	5f 0e       	add	r5, r31
     260:	53 0e       	add	r5, r19
     262:	4d 0e       	add	r4, r29
     264:	41 0e       	add	r4, r17
     266:	3b 0e       	add	r3, r27
     268:	35 0e       	add	r3, r21
     26a:	2f 0e       	add	r2, r31
     26c:	23 0e       	add	r2, r19
     26e:	1d 0e       	add	r1, r29
     270:	11 0e       	add	r1, r17
     272:	0b 0e       	add	r0, r27
     274:	ff 0d       	add	r31, r15
     276:	f9 0d       	add	r31, r9
     278:	ed 0d       	add	r30, r13
     27a:	e7 0d       	add	r30, r7
     27c:	db 0d       	add	r29, r11
     27e:	d5 0d       	add	r29, r5
     280:	c9 0d       	add	r28, r9
     282:	c3 0d       	add	r28, r3
     284:	bd 0d       	add	r27, r13
     286:	b7 0d       	add	r27, r7
     288:	b1 0d       	add	r27, r1
     28a:	a5 0d       	add	r26, r5
     28c:	9f 0d       	add	r25, r15
     28e:	99 0d       	add	r25, r9
     290:	93 0d       	add	r25, r3
     292:	8d 0d       	add	r24, r13
     294:	81 0d       	add	r24, r1
     296:	7b 0d       	add	r23, r11
     298:	6f 0d       	add	r22, r15
     29a:	69 0d       	add	r22, r9
     29c:	63 0d       	add	r22, r3
     29e:	5d 0d       	add	r21, r13
     2a0:	51 0d       	add	r21, r1
     2a2:	4b 0d       	add	r20, r11
     2a4:	45 0d       	add	r20, r5
     2a6:	3f 0d       	add	r19, r15
     2a8:	39 0d       	add	r19, r9
     2aa:	2d 0d       	add	r18, r13
     2ac:	27 0d       	add	r18, r7
     2ae:	1b 0d       	add	r17, r11
     2b0:	15 0d       	add	r17, r5
     2b2:	0f 0d       	add	r16, r15
     2b4:	09 0d       	add	r16, r9
     2b6:	fd 0c       	add	r15, r13
     2b8:	f7 0c       	add	r15, r7
     2ba:	f1 0c       	add	r15, r1
     2bc:	eb 0c       	add	r14, r11
     2be:	df 0c       	add	r13, r15
     2c0:	d9 0c       	add	r13, r9
     2c2:	d3 0c       	add	r13, r3
     2c4:	cd 0c       	add	r12, r13
     2c6:	c7 0c       	add	r12, r7
     2c8:	bb 0c       	add	r11, r11
     2ca:	b5 0c       	add	r11, r5
     2cc:	a9 0c       	add	r10, r9
     2ce:	a3 0c       	add	r10, r3
     2d0:	97 0c       	add	r9, r7
     2d2:	91 0c       	add	r9, r1
     2d4:	85 0c       	add	r8, r5
     2d6:	7f 0c       	add	r7, r15
     2d8:	73 0c       	add	r7, r3
     2da:	6d 0c       	add	r6, r13
     2dc:	67 0c       	add	r6, r7
     2de:	61 0c       	add	r6, r1
     2e0:	5b 0c       	add	r5, r11
     2e2:	4f 0c       	add	r4, r15
     2e4:	49 0c       	add	r4, r9
     2e6:	3d 0c       	add	r3, r13
     2e8:	37 0c       	add	r3, r7
     2ea:	31 0c       	add	r3, r1
     2ec:	2b 0c       	add	r2, r11
     2ee:	1f 0c       	add	r1, r15
     2f0:	19 0c       	add	r1, r9
     2f2:	13 0c       	add	r1, r3
     2f4:	0d 0c       	add	r0, r13
     2f6:	01 0c       	add	r0, r1
     2f8:	fb 0b       	sbc	r31, r27
     2fa:	ef 0b       	sbc	r30, r31
     2fc:	e9 0b       	sbc	r30, r25
     2fe:	dd 0b       	sbc	r29, r29
     300:	d7 0b       	sbc	r29, r23
     302:	cb 0b       	sbc	r28, r27
     304:	c5 0b       	sbc	r28, r21
     306:	b9 0b       	sbc	r27, r25
     308:	b3 0b       	sbc	r27, r19
     30a:	a7 0b       	sbc	r26, r23
     30c:	a1 0b       	sbc	r26, r17
     30e:	95 0b       	sbc	r25, r21
     310:	8f 0b       	sbc	r24, r31
     312:	89 0b       	sbc	r24, r25
     314:	83 0b       	sbc	r24, r19
     316:	7d 0b       	sbc	r23, r29
     318:	71 0b       	sbc	r23, r17
     31a:	6b 0b       	sbc	r22, r27
     31c:	65 0b       	sbc	r22, r21
     31e:	59 0b       	sbc	r21, r25
     320:	53 0b       	sbc	r21, r19
     322:	47 0b       	sbc	r20, r23
     324:	41 0b       	sbc	r20, r17
     326:	35 0b       	sbc	r19, r21
     328:	2f 0b       	sbc	r18, r31
     32a:	23 0b       	sbc	r18, r19
     32c:	1d 0b       	sbc	r17, r29
     32e:	17 0b       	sbc	r17, r23
     330:	11 0b       	sbc	r17, r17
     332:	05 0b       	sbc	r16, r21
     334:	ff 0a       	sbc	r15, r31
     336:	f3 0a       	sbc	r15, r19
     338:	ed 0a       	sbc	r14, r29
     33a:	e1 0a       	sbc	r14, r17
     33c:	db 0a       	sbc	r13, r27
     33e:	cf 0a       	sbc	r12, r31
     340:	c9 0a       	sbc	r12, r25
     342:	c3 0a       	sbc	r12, r19
     344:	bd 0a       	sbc	r11, r29
     346:	b7 0a       	sbc	r11, r23
     348:	ab 0a       	sbc	r10, r27
     34a:	a5 0a       	sbc	r10, r21
     34c:	9f 0a       	sbc	r9, r31
     34e:	43 0f       	add	r20, r19
     350:	6d 0f       	add	r22, r29
     352:	5b 0f       	add	r21, r27
     354:	6d 0f       	add	r22, r29
     356:	5b 0f       	add	r21, r27
     358:	6d 0f       	add	r22, r29
     35a:	5b 0f       	add	r21, r27
     35c:	91 0f       	add	r25, r17
     35e:	5b 0f       	add	r21, r27
     360:	91 0f       	add	r25, r17
     362:	79 0f       	add	r23, r25
     364:	67 0f       	add	r22, r23
     366:	a9 0f       	add	r26, r25
     368:	67 0f       	add	r22, r23
     36a:	97 0f       	add	r25, r23
     36c:	85 0f       	add	r24, r21
     36e:	73 0f       	add	r23, r19
     370:	5b 0f       	add	r21, r27
     372:	73 0f       	add	r23, r19
     374:	5b 0f       	add	r21, r27
     376:	73 0f       	add	r23, r19
     378:	5b 0f       	add	r21, r27
     37a:	8b 0f       	add	r24, r27
     37c:	5b 0f       	add	r21, r27
     37e:	8b 0f       	add	r24, r27
     380:	79 0f       	add	r23, r25
     382:	9d 0f       	add	r25, r29
     384:	a3 0f       	add	r26, r19
     386:	5b 0f       	add	r21, r27
     388:	67 0f       	add	r22, r23
     38a:	af 0f       	add	r26, r31
     38c:	85 0f       	add	r24, r21
     38e:	d6 10       	cpse	r13, r6
     390:	d4 10       	cpse	r13, r4
     392:	d2 10       	cpse	r13, r2
     394:	d0 10       	cpse	r13, r0
     396:	ce 10       	cpse	r12, r14
     398:	cc 10       	cpse	r12, r12
     39a:	ca 10       	cpse	r12, r10
     39c:	c8 10       	cpse	r12, r8
     39e:	c6 10       	cpse	r12, r6
     3a0:	c4 10       	cpse	r12, r4
     3a2:	ad 10       	cpse	r10, r13
     3a4:	d8 10       	cpse	r13, r8

000003a6 <__ctors_end>:
     3a6:	11 24       	eor	r1, r1
     3a8:	1f be       	out	0x3f, r1	; 63
     3aa:	cf ef       	ldi	r28, 0xFF	; 255
     3ac:	d0 e1       	ldi	r29, 0x10	; 16
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	cd bf       	out	0x3d, r28	; 61

000003b2 <__do_copy_data>:
     3b2:	11 e0       	ldi	r17, 0x01	; 1
     3b4:	a0 e0       	ldi	r26, 0x00	; 0
     3b6:	b1 e0       	ldi	r27, 0x01	; 1
     3b8:	e6 e7       	ldi	r30, 0x76	; 118
     3ba:	f1 e3       	ldi	r31, 0x31	; 49
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	0b bf       	out	0x3b, r16	; 59
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <__do_copy_data+0x14>
     3c2:	07 90       	elpm	r0, Z+
     3c4:	0d 92       	st	X+, r0
     3c6:	a6 39       	cpi	r26, 0x96	; 150
     3c8:	b1 07       	cpc	r27, r17
     3ca:	d9 f7       	brne	.-10     	; 0x3c2 <__do_copy_data+0x10>

000003cc <__do_clear_bss>:
     3cc:	21 e0       	ldi	r18, 0x01	; 1
     3ce:	a6 e9       	ldi	r26, 0x96	; 150
     3d0:	b1 e0       	ldi	r27, 0x01	; 1
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <.do_clear_bss_start>

000003d4 <.do_clear_bss_loop>:
     3d4:	1d 92       	st	X+, r1

000003d6 <.do_clear_bss_start>:
     3d6:	ae 3e       	cpi	r26, 0xEE	; 238
     3d8:	b2 07       	cpc	r27, r18
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <.do_clear_bss_loop>
     3dc:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <main>
     3e0:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <_exit>

000003e4 <__bad_interrupt>:
     3e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e8 <strobe_lcd>:
}


void strobe_lcd(void) {
    //twiddles bit 3, PORTF creating the enable signal for the LCD
    PORTF |= 0x08;
     3e8:	e2 e6       	ldi	r30, 0x62	; 98
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 83       	st	Z, r24
    PORTF &= ~0x08;
     3f2:	80 81       	ld	r24, Z
     3f4:	87 7f       	andi	r24, 0xF7	; 247
     3f6:	80 83       	st	Z, r24
     3f8:	08 95       	ret

000003fa <LCD_Clr>:
}

void LCD_Clr(void) {
    LCD_CMD(0x01);
     3fa:	1f b8       	out	0x0f, r1	; 15
     3fc:	77 9b       	sbis	0x0e, 7	; 14
     3fe:	fe cf       	rjmp	.-4      	; 0x3fc <LCD_Clr+0x2>
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	8f b9       	out	0x0f, r24	; 15
     404:	77 9b       	sbis	0x0e, 7	; 14
     406:	fe cf       	rjmp	.-4      	; 0x404 <LCD_Clr+0xa>
     408:	80 91 62 00 	lds	r24, 0x0062
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	80 93 62 00 	sts	0x0062, r24
     412:	80 91 62 00 	lds	r24, 0x0062
     416:	87 7f       	andi	r24, 0xF7	; 247
     418:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41c:	8f e8       	ldi	r24, 0x8F	; 143
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <LCD_Clr+0x26>
     424:	00 c0       	rjmp	.+0      	; 0x426 <LCD_Clr+0x2c>
     426:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     428:	8f e3       	ldi	r24, 0x3F	; 63
     42a:	9f e1       	ldi	r25, 0x1F	; 31
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <LCD_Clr+0x32>
     430:	00 c0       	rjmp	.+0      	; 0x432 <LCD_Clr+0x38>
     432:	00 00       	nop
     434:	08 95       	ret

00000436 <LCD_MovCursorLn1>:
    _delay_ms(2);   //obligatory waiting for slow LCD
}

void LCD_MovCursorLn1(void) {
    LCD_CMD(0x80);
     436:	1f b8       	out	0x0f, r1	; 15
     438:	77 9b       	sbis	0x0e, 7	; 14
     43a:	fe cf       	rjmp	.-4      	; 0x438 <LCD_MovCursorLn1+0x2>
     43c:	80 e8       	ldi	r24, 0x80	; 128
     43e:	8f b9       	out	0x0f, r24	; 15
     440:	77 9b       	sbis	0x0e, 7	; 14
     442:	fe cf       	rjmp	.-4      	; 0x440 <LCD_MovCursorLn1+0xa>
     444:	80 91 62 00 	lds	r24, 0x0062
     448:	88 60       	ori	r24, 0x08	; 8
     44a:	80 93 62 00 	sts	0x0062, r24
     44e:	80 91 62 00 	lds	r24, 0x0062
     452:	87 7f       	andi	r24, 0xF7	; 247
     454:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     458:	8f e8       	ldi	r24, 0x8F	; 143
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <LCD_MovCursorLn1+0x26>
     460:	00 c0       	rjmp	.+0      	; 0x462 <LCD_MovCursorLn1+0x2c>
     462:	00 00       	nop
     464:	08 95       	ret

00000466 <LCD_MovCursorLn2>:
}

void LCD_MovCursorLn2(void) {
    LCD_CMD(0xC0);
     466:	1f b8       	out	0x0f, r1	; 15
     468:	77 9b       	sbis	0x0e, 7	; 14
     46a:	fe cf       	rjmp	.-4      	; 0x468 <LCD_MovCursorLn2+0x2>
     46c:	80 ec       	ldi	r24, 0xC0	; 192
     46e:	8f b9       	out	0x0f, r24	; 15
     470:	77 9b       	sbis	0x0e, 7	; 14
     472:	fe cf       	rjmp	.-4      	; 0x470 <LCD_MovCursorLn2+0xa>
     474:	80 91 62 00 	lds	r24, 0x0062
     478:	88 60       	ori	r24, 0x08	; 8
     47a:	80 93 62 00 	sts	0x0062, r24
     47e:	80 91 62 00 	lds	r24, 0x0062
     482:	87 7f       	andi	r24, 0xF7	; 247
     484:	80 93 62 00 	sts	0x0062, r24
     488:	8f e8       	ldi	r24, 0x8F	; 143
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <LCD_MovCursorLn2+0x26>
     490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_MovCursorLn2+0x2c>
     492:	00 00       	nop
     494:	08 95       	ret

00000496 <LCD_CursorBlinkOn>:
}

void LCD_CursorBlinkOn(void) {
    LCD_CMD(0x0F);
     496:	1f b8       	out	0x0f, r1	; 15
     498:	77 9b       	sbis	0x0e, 7	; 14
     49a:	fe cf       	rjmp	.-4      	; 0x498 <LCD_CursorBlinkOn+0x2>
     49c:	8f e0       	ldi	r24, 0x0F	; 15
     49e:	8f b9       	out	0x0f, r24	; 15
     4a0:	77 9b       	sbis	0x0e, 7	; 14
     4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <LCD_CursorBlinkOn+0xa>
     4a4:	80 91 62 00 	lds	r24, 0x0062
     4a8:	88 60       	ori	r24, 0x08	; 8
     4aa:	80 93 62 00 	sts	0x0062, r24
     4ae:	80 91 62 00 	lds	r24, 0x0062
     4b2:	87 7f       	andi	r24, 0xF7	; 247
     4b4:	80 93 62 00 	sts	0x0062, r24
     4b8:	8f e8       	ldi	r24, 0x8F	; 143
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <LCD_CursorBlinkOn+0x26>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <LCD_CursorBlinkOn+0x2c>
     4c2:	00 00       	nop
     4c4:	08 95       	ret

000004c6 <LCD_CursorBlinkOff>:
}

void LCD_CursorBlinkOff(void) {
    LCD_CMD(0x0C);
     4c6:	1f b8       	out	0x0f, r1	; 15
     4c8:	77 9b       	sbis	0x0e, 7	; 14
     4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <LCD_CursorBlinkOff+0x2>
     4cc:	8c e0       	ldi	r24, 0x0C	; 12
     4ce:	8f b9       	out	0x0f, r24	; 15
     4d0:	77 9b       	sbis	0x0e, 7	; 14
     4d2:	fe cf       	rjmp	.-4      	; 0x4d0 <LCD_CursorBlinkOff+0xa>
     4d4:	80 91 62 00 	lds	r24, 0x0062
     4d8:	88 60       	ori	r24, 0x08	; 8
     4da:	80 93 62 00 	sts	0x0062, r24
     4de:	80 91 62 00 	lds	r24, 0x0062
     4e2:	87 7f       	andi	r24, 0xF7	; 247
     4e4:	80 93 62 00 	sts	0x0062, r24
     4e8:	8f e8       	ldi	r24, 0x8F	; 143
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <LCD_CursorBlinkOff+0x26>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <LCD_CursorBlinkOff+0x2c>
     4f2:	00 00       	nop
     4f4:	08 95       	ret

000004f6 <LCD_MovCursor>:
 
	The cursor will not be moved if an invalid location is provided
 */
void LCD_MovCursor(uint8_t line, uint8_t position) {
    uint8_t addr;
    if (position > 15)
     4f6:	60 31       	cpi	r22, 0x10	; 16
     4f8:	20 f4       	brcc	.+8      	; 0x502 <LCD_MovCursor+0xc>
        return;
    if (line == 1) {
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	19 f0       	breq	.+6      	; 0x504 <LCD_MovCursor+0xe>
        addr = 0x80 + position;
    } else if (line == 2) {
     4fe:	82 30       	cpi	r24, 0x02	; 2
     500:	c9 f0       	breq	.+50     	; 0x534 <LCD_MovCursor+0x3e>
     502:	08 95       	ret
void LCD_MovCursor(uint8_t line, uint8_t position) {
    uint8_t addr;
    if (position > 15)
        return;
    if (line == 1) {
        addr = 0x80 + position;
     504:	60 58       	subi	r22, 0x80	; 128
        addr = 0xC0 + position;
    } else {
        // invalid line number
        return;
    }
    LCD_CMD(addr);
     506:	1f b8       	out	0x0f, r1	; 15
     508:	77 9b       	sbis	0x0e, 7	; 14
     50a:	fe cf       	rjmp	.-4      	; 0x508 <LCD_MovCursor+0x12>
     50c:	6f b9       	out	0x0f, r22	; 15
     50e:	77 9b       	sbis	0x0e, 7	; 14
     510:	fe cf       	rjmp	.-4      	; 0x50e <LCD_MovCursor+0x18>
     512:	80 91 62 00 	lds	r24, 0x0062
     516:	88 60       	ori	r24, 0x08	; 8
     518:	80 93 62 00 	sts	0x0062, r24
     51c:	80 91 62 00 	lds	r24, 0x0062
     520:	87 7f       	andi	r24, 0xF7	; 247
     522:	80 93 62 00 	sts	0x0062, r24
     526:	8f e8       	ldi	r24, 0x8F	; 143
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <LCD_MovCursor+0x34>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <LCD_MovCursor+0x3a>
     530:	00 00       	nop
     532:	08 95       	ret
    if (position > 15)
        return;
    if (line == 1) {
        addr = 0x80 + position;
    } else if (line == 2) {
        addr = 0xC0 + position;
     534:	60 54       	subi	r22, 0x40	; 64
     536:	e7 cf       	rjmp	.-50     	; 0x506 <LCD_MovCursor+0x10>

00000538 <LCD_FillSpaces>:
        return;
    }
    LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
     538:	80 e1       	ldi	r24, 0x10	; 16
     53a:	90 e0       	ldi	r25, 0x00	; 0
    int count;
    for (count=0; count<=15; count++){
        LCD_DATA(' ');
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	30 e2       	ldi	r19, 0x20	; 32
     540:	4f b9       	out	0x0f, r20	; 15
     542:	77 9b       	sbis	0x0e, 7	; 14
     544:	fe cf       	rjmp	.-4      	; 0x542 <LCD_FillSpaces+0xa>
     546:	3f b9       	out	0x0f, r19	; 15
     548:	77 9b       	sbis	0x0e, 7	; 14
     54a:	fe cf       	rjmp	.-4      	; 0x548 <LCD_FillSpaces+0x10>
     54c:	20 91 62 00 	lds	r18, 0x0062
     550:	28 60       	ori	r18, 0x08	; 8
     552:	20 93 62 00 	sts	0x0062, r18
     556:	20 91 62 00 	lds	r18, 0x0062
     55a:	27 7f       	andi	r18, 0xF7	; 247
     55c:	20 93 62 00 	sts	0x0062, r18
     560:	ef e8       	ldi	r30, 0x8F	; 143
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	31 97       	sbiw	r30, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <LCD_FillSpaces+0x2c>
     568:	00 c0       	rjmp	.+0      	; 0x56a <LCD_FillSpaces+0x32>
     56a:	00 00       	nop
     56c:	01 97       	sbiw	r24, 0x01	; 1
    LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
    int count;
    for (count=0; count<=15; count++){
     56e:	00 97       	sbiw	r24, 0x00	; 0
     570:	39 f7       	brne	.-50     	; 0x540 <LCD_FillSpaces+0x8>
        LCD_DATA(' ');
    }
}
     572:	08 95       	ret

00000574 <LCD_PutDec8>:
	and display the result.
 */
void LCD_PutDec8(uint8_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    while (num >= 100) {
     574:	84 36       	cpi	r24, 0x64	; 100
     576:	08 f4       	brcc	.+2      	; 0x57a <LCD_PutDec8+0x6>
     578:	5d c0       	rjmp	.+186    	; 0x634 <LCD_PutDec8+0xc0>
        digit++;
        num -= 100;
     57a:	9c e9       	ldi	r25, 0x9C	; 156
     57c:	98 0f       	add	r25, r24
	and display the result.
 */
void LCD_PutDec8(uint8_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    while (num >= 100) {
     57e:	94 36       	cpi	r25, 0x64	; 100
     580:	08 f4       	brcc	.+2      	; 0x584 <LCD_PutDec8+0x10>
     582:	5c c0       	rjmp	.+184    	; 0x63c <LCD_PutDec8+0xc8>
        digit++;
        num -= 100;
     584:	88 5c       	subi	r24, 0xC8	; 200
     586:	22 e3       	ldi	r18, 0x32	; 50
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9f b9       	out	0x0f, r25	; 15
     58c:	77 9b       	sbis	0x0e, 7	; 14
     58e:	fe cf       	rjmp	.-4      	; 0x58c <LCD_PutDec8+0x18>
     590:	2f b9       	out	0x0f, r18	; 15
     592:	77 9b       	sbis	0x0e, 7	; 14
     594:	fe cf       	rjmp	.-4      	; 0x592 <LCD_PutDec8+0x1e>
     596:	90 91 62 00 	lds	r25, 0x0062
     59a:	98 60       	ori	r25, 0x08	; 8
     59c:	90 93 62 00 	sts	0x0062, r25
     5a0:	90 91 62 00 	lds	r25, 0x0062
     5a4:	97 7f       	andi	r25, 0xF7	; 247
     5a6:	90 93 62 00 	sts	0x0062, r25
     5aa:	ef e8       	ldi	r30, 0x8F	; 143
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <LCD_PutDec8+0x3a>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <LCD_PutDec8+0x40>
     5b4:	00 00       	nop
        flag = 1;
     5b6:	91 e0       	ldi	r25, 0x01	; 1
    }
    digit = 0;
    while (num >= 10) {
     5b8:	8a 30       	cpi	r24, 0x0A	; 10
     5ba:	c0 f1       	brcs	.+112    	; 0x62c <LCD_PutDec8+0xb8>
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
     5bc:	90 e0       	ldi	r25, 0x00	; 0
    while (num >= 10) {
        digit++;
     5be:	9f 5f       	subi	r25, 0xFF	; 255
        num -= 10;
     5c0:	8a 50       	subi	r24, 0x0A	; 10
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 10) {
     5c2:	8a 30       	cpi	r24, 0x0A	; 10
     5c4:	e0 f7       	brcc	.-8      	; 0x5be <LCD_PutDec8+0x4a>
        digit++;
        num -= 10;
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	2f b9       	out	0x0f, r18	; 15
     5ca:	77 9b       	sbis	0x0e, 7	; 14
     5cc:	fe cf       	rjmp	.-4      	; 0x5ca <LCD_PutDec8+0x56>
     5ce:	90 5d       	subi	r25, 0xD0	; 208
     5d0:	9f b9       	out	0x0f, r25	; 15
     5d2:	77 9b       	sbis	0x0e, 7	; 14
     5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <LCD_PutDec8+0x5e>
     5d6:	90 91 62 00 	lds	r25, 0x0062
     5da:	98 60       	ori	r25, 0x08	; 8
     5dc:	90 93 62 00 	sts	0x0062, r25
     5e0:	90 91 62 00 	lds	r25, 0x0062
     5e4:	97 7f       	andi	r25, 0xF7	; 247
     5e6:	90 93 62 00 	sts	0x0062, r25
     5ea:	ef e8       	ldi	r30, 0x8F	; 143
     5ec:	f1 e0       	ldi	r31, 0x01	; 1
     5ee:	31 97       	sbiw	r30, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCD_PutDec8+0x7a>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <LCD_PutDec8+0x80>
     5f4:	00 00       	nop
        flag = 1;
    }
    digit = 0;
    while (num >= 1) {
     5f6:	88 23       	and	r24, r24
     5f8:	f9 f0       	breq	.+62     	; 0x638 <LCD_PutDec8+0xc4>
     5fa:	80 5d       	subi	r24, 0xD0	; 208
        digit++;
        num -= 1;
    }
    LCD_DATA(digit + 48);
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	9f b9       	out	0x0f, r25	; 15
     600:	77 9b       	sbis	0x0e, 7	; 14
     602:	fe cf       	rjmp	.-4      	; 0x600 <LCD_PutDec8+0x8c>
     604:	8f b9       	out	0x0f, r24	; 15
     606:	77 9b       	sbis	0x0e, 7	; 14
     608:	fe cf       	rjmp	.-4      	; 0x606 <LCD_PutDec8+0x92>
     60a:	80 91 62 00 	lds	r24, 0x0062
     60e:	88 60       	ori	r24, 0x08	; 8
     610:	80 93 62 00 	sts	0x0062, r24
     614:	80 91 62 00 	lds	r24, 0x0062
     618:	87 7f       	andi	r24, 0xF7	; 247
     61a:	80 93 62 00 	sts	0x0062, r24
     61e:	8f e8       	ldi	r24, 0x8F	; 143
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <LCD_PutDec8+0xae>
     626:	00 c0       	rjmp	.+0      	; 0x628 <LCD_PutDec8+0xb4>
     628:	00 00       	nop
     62a:	08 95       	ret
    digit = 0;
    while (num >= 10) {
        digit++;
        num -= 10;
    }
    if (digit > 0 || flag == 1) {
     62c:	91 30       	cpi	r25, 0x01	; 1
     62e:	19 f7       	brne	.-58     	; 0x5f6 <LCD_PutDec8+0x82>
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	c9 cf       	rjmp	.-110    	; 0x5c6 <LCD_PutDec8+0x52>
	Convert an 8 bit unsigned number to ASCII
	and display the result.
 */
void LCD_PutDec8(uint8_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	c0 cf       	rjmp	.-128    	; 0x5b8 <LCD_PutDec8+0x44>
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 1) {
     638:	80 e3       	ldi	r24, 0x30	; 48
     63a:	e0 cf       	rjmp	.-64     	; 0x5fc <LCD_PutDec8+0x88>
	and display the result.
 */
void LCD_PutDec8(uint8_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    while (num >= 100) {
     63c:	89 2f       	mov	r24, r25
     63e:	21 e3       	ldi	r18, 0x31	; 49
     640:	a3 cf       	rjmp	.-186    	; 0x588 <LCD_PutDec8+0x14>

00000642 <LCD_PutDec16>:
	and display the result.
 */
void LCD_PutDec16(uint16_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    while (num >= 10000) {
     642:	80 31       	cpi	r24, 0x10	; 16
     644:	27 e2       	ldi	r18, 0x27	; 39
     646:	92 07       	cpc	r25, r18
     648:	08 f4       	brcc	.+2      	; 0x64c <LCD_PutDec16+0xa>
     64a:	bf c0       	rjmp	.+382    	; 0x7ca <LCD_PutDec16+0x188>
/*
	Convert a 16 bit unsigned number to ASCII
	and display the result.
 */
void LCD_PutDec16(uint16_t num) {
    uint8_t digit = 0;
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	01 c0       	rjmp	.+2      	; 0x652 <LCD_PutDec16+0x10>
    uint8_t flag = 0;
    while (num >= 10000) {
        digit++;
     650:	23 2f       	mov	r18, r19
     652:	31 e0       	ldi	r19, 0x01	; 1
     654:	32 0f       	add	r19, r18
        num -= 10000;
     656:	80 51       	subi	r24, 0x10	; 16
     658:	97 42       	sbci	r25, 0x27	; 39
	and display the result.
 */
void LCD_PutDec16(uint16_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
    while (num >= 10000) {
     65a:	80 31       	cpi	r24, 0x10	; 16
     65c:	47 e2       	ldi	r20, 0x27	; 39
     65e:	94 07       	cpc	r25, r20
     660:	b8 f7       	brcc	.-18     	; 0x650 <LCD_PutDec16+0xe>
        digit++;
        num -= 10000;
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
     662:	31 e0       	ldi	r19, 0x01	; 1
     664:	3f b9       	out	0x0f, r19	; 15
     666:	77 9b       	sbis	0x0e, 7	; 14
     668:	fe cf       	rjmp	.-4      	; 0x666 <LCD_PutDec16+0x24>
     66a:	2f 5c       	subi	r18, 0xCF	; 207
     66c:	2f b9       	out	0x0f, r18	; 15
     66e:	77 9b       	sbis	0x0e, 7	; 14
     670:	fe cf       	rjmp	.-4      	; 0x66e <LCD_PutDec16+0x2c>
     672:	20 91 62 00 	lds	r18, 0x0062
     676:	28 60       	ori	r18, 0x08	; 8
     678:	20 93 62 00 	sts	0x0062, r18
     67c:	20 91 62 00 	lds	r18, 0x0062
     680:	27 7f       	andi	r18, 0xF7	; 247
     682:	20 93 62 00 	sts	0x0062, r18
     686:	ef e8       	ldi	r30, 0x8F	; 143
     688:	f1 e0       	ldi	r31, 0x01	; 1
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <LCD_PutDec16+0x48>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <LCD_PutDec16+0x4e>
     690:	00 00       	nop
        flag = 1;
     692:	21 e0       	ldi	r18, 0x01	; 1
    }
    digit = 0;
    while (num >= 1000) {
     694:	88 3e       	cpi	r24, 0xE8	; 232
     696:	f3 e0       	ldi	r31, 0x03	; 3
     698:	9f 07       	cpc	r25, r31
     69a:	08 f4       	brcc	.+2      	; 0x69e <LCD_PutDec16+0x5c>
     69c:	8e c0       	rjmp	.+284    	; 0x7ba <LCD_PutDec16+0x178>
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
     69e:	20 e0       	ldi	r18, 0x00	; 0
    while (num >= 1000) {
        digit++;
     6a0:	2f 5f       	subi	r18, 0xFF	; 255
        num -= 1000;
     6a2:	88 5e       	subi	r24, 0xE8	; 232
     6a4:	93 40       	sbci	r25, 0x03	; 3
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 1000) {
     6a6:	88 3e       	cpi	r24, 0xE8	; 232
     6a8:	33 e0       	ldi	r19, 0x03	; 3
     6aa:	93 07       	cpc	r25, r19
     6ac:	c8 f7       	brcc	.-14     	; 0x6a0 <LCD_PutDec16+0x5e>
        digit++;
        num -= 1000;
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
     6ae:	31 e0       	ldi	r19, 0x01	; 1
     6b0:	3f b9       	out	0x0f, r19	; 15
     6b2:	77 9b       	sbis	0x0e, 7	; 14
     6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <LCD_PutDec16+0x70>
     6b6:	20 5d       	subi	r18, 0xD0	; 208
     6b8:	2f b9       	out	0x0f, r18	; 15
     6ba:	77 9b       	sbis	0x0e, 7	; 14
     6bc:	fe cf       	rjmp	.-4      	; 0x6ba <LCD_PutDec16+0x78>
     6be:	20 91 62 00 	lds	r18, 0x0062
     6c2:	28 60       	ori	r18, 0x08	; 8
     6c4:	20 93 62 00 	sts	0x0062, r18
     6c8:	20 91 62 00 	lds	r18, 0x0062
     6cc:	27 7f       	andi	r18, 0xF7	; 247
     6ce:	20 93 62 00 	sts	0x0062, r18
     6d2:	ef e8       	ldi	r30, 0x8F	; 143
     6d4:	f1 e0       	ldi	r31, 0x01	; 1
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCD_PutDec16+0x94>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <LCD_PutDec16+0x9a>
     6dc:	00 00       	nop
        flag = 1;
     6de:	31 e0       	ldi	r19, 0x01	; 1
    }
    digit = 0;
    while (num >= 100) {
     6e0:	84 36       	cpi	r24, 0x64	; 100
     6e2:	91 05       	cpc	r25, r1
     6e4:	08 f4       	brcc	.+2      	; 0x6e8 <LCD_PutDec16+0xa6>
     6e6:	65 c0       	rjmp	.+202    	; 0x7b2 <LCD_PutDec16+0x170>
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
     6e8:	20 e0       	ldi	r18, 0x00	; 0
    while (num >= 100) {
        digit++;
     6ea:	2f 5f       	subi	r18, 0xFF	; 255
        num -= 100;
     6ec:	84 56       	subi	r24, 0x64	; 100
     6ee:	91 09       	sbc	r25, r1
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 100) {
     6f0:	84 36       	cpi	r24, 0x64	; 100
     6f2:	91 05       	cpc	r25, r1
     6f4:	d0 f7       	brcc	.-12     	; 0x6ea <LCD_PutDec16+0xa8>
        digit++;
        num -= 100;
    }
    if (digit > 0 || flag == 1) {
     6f6:	22 23       	and	r18, r18
     6f8:	09 f4       	brne	.+2      	; 0x6fc <LCD_PutDec16+0xba>
     6fa:	5b c0       	rjmp	.+182    	; 0x7b2 <LCD_PutDec16+0x170>
        LCD_DATA(digit + 48);
     6fc:	31 e0       	ldi	r19, 0x01	; 1
     6fe:	3f b9       	out	0x0f, r19	; 15
     700:	77 9b       	sbis	0x0e, 7	; 14
     702:	fe cf       	rjmp	.-4      	; 0x700 <LCD_PutDec16+0xbe>
     704:	20 5d       	subi	r18, 0xD0	; 208
     706:	2f b9       	out	0x0f, r18	; 15
     708:	77 9b       	sbis	0x0e, 7	; 14
     70a:	fe cf       	rjmp	.-4      	; 0x708 <LCD_PutDec16+0xc6>
     70c:	20 91 62 00 	lds	r18, 0x0062
     710:	28 60       	ori	r18, 0x08	; 8
     712:	20 93 62 00 	sts	0x0062, r18
     716:	20 91 62 00 	lds	r18, 0x0062
     71a:	27 7f       	andi	r18, 0xF7	; 247
     71c:	20 93 62 00 	sts	0x0062, r18
     720:	ef e8       	ldi	r30, 0x8F	; 143
     722:	f1 e0       	ldi	r31, 0x01	; 1
     724:	31 97       	sbiw	r30, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <LCD_PutDec16+0xe2>
     728:	00 c0       	rjmp	.+0      	; 0x72a <LCD_PutDec16+0xe8>
     72a:	00 00       	nop
        flag = 1;
     72c:	31 e0       	ldi	r19, 0x01	; 1
    }
    digit = 0;
    while (num >= 10) {
     72e:	8a 30       	cpi	r24, 0x0A	; 10
     730:	91 05       	cpc	r25, r1
     732:	d8 f1       	brcs	.+118    	; 0x7aa <LCD_PutDec16+0x168>
    }
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
     734:	20 e0       	ldi	r18, 0x00	; 0
    while (num >= 10) {
        digit++;
     736:	2f 5f       	subi	r18, 0xFF	; 255
        num -= 10;
     738:	0a 97       	sbiw	r24, 0x0a	; 10
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 10) {
     73a:	8a 30       	cpi	r24, 0x0A	; 10
     73c:	91 05       	cpc	r25, r1
     73e:	d8 f7       	brcc	.-10     	; 0x736 <LCD_PutDec16+0xf4>
        digit++;
        num -= 10;
    }
    if (digit > 0 || flag == 1) {
     740:	22 23       	and	r18, r18
     742:	99 f1       	breq	.+102    	; 0x7aa <LCD_PutDec16+0x168>
        LCD_DATA(digit + 48);
     744:	31 e0       	ldi	r19, 0x01	; 1
     746:	3f b9       	out	0x0f, r19	; 15
     748:	77 9b       	sbis	0x0e, 7	; 14
     74a:	fe cf       	rjmp	.-4      	; 0x748 <LCD_PutDec16+0x106>
     74c:	20 5d       	subi	r18, 0xD0	; 208
     74e:	2f b9       	out	0x0f, r18	; 15
     750:	77 9b       	sbis	0x0e, 7	; 14
     752:	fe cf       	rjmp	.-4      	; 0x750 <LCD_PutDec16+0x10e>
     754:	20 91 62 00 	lds	r18, 0x0062
     758:	28 60       	ori	r18, 0x08	; 8
     75a:	20 93 62 00 	sts	0x0062, r18
     75e:	20 91 62 00 	lds	r18, 0x0062
     762:	27 7f       	andi	r18, 0xF7	; 247
     764:	20 93 62 00 	sts	0x0062, r18
     768:	ef e8       	ldi	r30, 0x8F	; 143
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	31 97       	sbiw	r30, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <LCD_PutDec16+0x12a>
     770:	00 c0       	rjmp	.+0      	; 0x772 <LCD_PutDec16+0x130>
     772:	00 00       	nop
        flag = 1;
    }
    digit = 0;
    while (num >= 1) {
     774:	00 97       	sbiw	r24, 0x00	; 0
     776:	59 f1       	breq	.+86     	; 0x7ce <LCD_PutDec16+0x18c>
     778:	80 5d       	subi	r24, 0xD0	; 208
        digit++;
        num -= 1;
    }
    LCD_DATA(digit + 48);
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	9f b9       	out	0x0f, r25	; 15
     77e:	77 9b       	sbis	0x0e, 7	; 14
     780:	fe cf       	rjmp	.-4      	; 0x77e <LCD_PutDec16+0x13c>
     782:	8f b9       	out	0x0f, r24	; 15
     784:	77 9b       	sbis	0x0e, 7	; 14
     786:	fe cf       	rjmp	.-4      	; 0x784 <LCD_PutDec16+0x142>
     788:	80 91 62 00 	lds	r24, 0x0062
     78c:	88 60       	ori	r24, 0x08	; 8
     78e:	80 93 62 00 	sts	0x0062, r24
     792:	80 91 62 00 	lds	r24, 0x0062
     796:	87 7f       	andi	r24, 0xF7	; 247
     798:	80 93 62 00 	sts	0x0062, r24
     79c:	8f e8       	ldi	r24, 0x8F	; 143
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <LCD_PutDec16+0x15e>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <LCD_PutDec16+0x164>
     7a6:	00 00       	nop
     7a8:	08 95       	ret
    digit = 0;
    while (num >= 10) {
        digit++;
        num -= 10;
    }
    if (digit > 0 || flag == 1) {
     7aa:	31 30       	cpi	r19, 0x01	; 1
     7ac:	19 f7       	brne	.-58     	; 0x774 <LCD_PutDec16+0x132>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	c9 cf       	rjmp	.-110    	; 0x744 <LCD_PutDec16+0x102>
    digit = 0;
    while (num >= 100) {
        digit++;
        num -= 100;
    }
    if (digit > 0 || flag == 1) {
     7b2:	31 30       	cpi	r19, 0x01	; 1
     7b4:	41 f0       	breq	.+16     	; 0x7c6 <LCD_PutDec16+0x184>
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	ba cf       	rjmp	.-140    	; 0x72e <LCD_PutDec16+0xec>
    digit = 0;
    while (num >= 1000) {
        digit++;
        num -= 1000;
    }
    if (digit > 0 || flag == 1) {
     7ba:	21 30       	cpi	r18, 0x01	; 1
     7bc:	11 f0       	breq	.+4      	; 0x7c2 <LCD_PutDec16+0x180>
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	8f cf       	rjmp	.-226    	; 0x6e0 <LCD_PutDec16+0x9e>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	74 cf       	rjmp	.-280    	; 0x6ae <LCD_PutDec16+0x6c>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	99 cf       	rjmp	.-206    	; 0x6fc <LCD_PutDec16+0xba>
	Convert a 16 bit unsigned number to ASCII
	and display the result.
 */
void LCD_PutDec16(uint16_t num) {
    uint8_t digit = 0;
    uint8_t flag = 0;
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	63 cf       	rjmp	.-314    	; 0x694 <LCD_PutDec16+0x52>
    if (digit > 0 || flag == 1) {
        LCD_DATA(digit + 48);
        flag = 1;
    }
    digit = 0;
    while (num >= 1) {
     7ce:	80 e3       	ldi	r24, 0x30	; 48
     7d0:	d4 cf       	rjmp	.-88     	; 0x77a <LCD_PutDec16+0x138>

000007d2 <LCD_PutChar>:
/*
	Send an ASCII character to the LCD
	usage: LCD_PutChar('H');
 */
void LCD_PutChar(char a_char) {
    LCD_DATA(a_char);
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	9f b9       	out	0x0f, r25	; 15
     7d6:	77 9b       	sbis	0x0e, 7	; 14
     7d8:	fe cf       	rjmp	.-4      	; 0x7d6 <LCD_PutChar+0x4>
     7da:	8f b9       	out	0x0f, r24	; 15
     7dc:	77 9b       	sbis	0x0e, 7	; 14
     7de:	fe cf       	rjmp	.-4      	; 0x7dc <LCD_PutChar+0xa>
     7e0:	80 91 62 00 	lds	r24, 0x0062
     7e4:	88 60       	ori	r24, 0x08	; 8
     7e6:	80 93 62 00 	sts	0x0062, r24
     7ea:	80 91 62 00 	lds	r24, 0x0062
     7ee:	87 7f       	andi	r24, 0xF7	; 247
     7f0:	80 93 62 00 	sts	0x0062, r24
     7f4:	8f e8       	ldi	r24, 0x8F	; 143
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <LCD_PutChar+0x26>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <LCD_PutChar+0x2c>
     7fe:	00 00       	nop
     800:	08 95       	ret

00000802 <LCD_PutStr>:
}

/*
	Send an ASCII string to the LCD
 */
void LCD_PutStr(char *lcd_str) {
     802:	dc 01       	movw	r26, r24
    uint8_t count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
        LCD_DATA(lcd_str[count]);
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	4f b9       	out	0x0f, r20	; 15
     80e:	77 9b       	sbis	0x0e, 7	; 14
     810:	fe cf       	rjmp	.-4      	; 0x80e <LCD_PutStr+0xc>
     812:	fd 01       	movw	r30, r26
     814:	e2 0f       	add	r30, r18
     816:	f3 1f       	adc	r31, r19
     818:	80 81       	ld	r24, Z
     81a:	8f b9       	out	0x0f, r24	; 15
     81c:	77 9b       	sbis	0x0e, 7	; 14
     81e:	fe cf       	rjmp	.-4      	; 0x81c <LCD_PutStr+0x1a>
     820:	80 91 62 00 	lds	r24, 0x0062
     824:	88 60       	ori	r24, 0x08	; 8
     826:	80 93 62 00 	sts	0x0062, r24
     82a:	80 91 62 00 	lds	r24, 0x0062
     82e:	87 7f       	andi	r24, 0xF7	; 247
     830:	80 93 62 00 	sts	0x0062, r24
     834:	ef e8       	ldi	r30, 0x8F	; 143
     836:	f1 e0       	ldi	r31, 0x01	; 1
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <LCD_PutStr+0x36>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <LCD_PutStr+0x3c>
     83e:	00 00       	nop
/*
	Send an ASCII string to the LCD
 */
void LCD_PutStr(char *lcd_str) {
    uint8_t count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
     840:	9f 5f       	subi	r25, 0xFF	; 255
     842:	29 2f       	mov	r18, r25
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	fd 01       	movw	r30, r26
     848:	01 90       	ld	r0, Z+
     84a:	00 20       	and	r0, r0
     84c:	e9 f7       	brne	.-6      	; 0x848 <LCD_PutStr+0x46>
     84e:	ea 1b       	sub	r30, r26
     850:	fb 0b       	sbc	r31, r27
     852:	32 97       	sbiw	r30, 0x02	; 2
     854:	e2 17       	cp	r30, r18
     856:	f3 07       	cpc	r31, r19
     858:	c8 f6       	brcc	.-78     	; 0x80c <LCD_PutStr+0xa>
        LCD_DATA(lcd_str[count]);
    }
}
     85a:	08 95       	ret

0000085c <LCD_SPIInit>:

void LCD_SPIInit(void) {
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     85c:	e1 e6       	ldi	r30, 0x61	; 97
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	88 60       	ori	r24, 0x08	; 8
     864:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initialization for SPI
     866:	88 b3       	in	r24, 0x18	; 24
     868:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK
     86a:	87 b3       	in	r24, 0x17	; 23
     86c:	87 60       	ori	r24, 0x07	; 7
     86e:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first
    SPCR = 0x50;
     870:	80 e5       	ldi	r24, 0x50	; 80
     872:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	8e b9       	out	0x0e, r24	; 14
     878:	08 95       	ret

0000087a <LCD_Init>:
        LCD_DATA(lcd_str[count]);
    }
}

void LCD_SPIInit(void) {
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
     87a:	80 91 61 00 	lds	r24, 0x0061
     87e:	88 60       	ori	r24, 0x08	; 8
     880:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initialization for SPI
     884:	88 b3       	in	r24, 0x18	; 24
     886:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK
     888:	87 b3       	in	r24, 0x17	; 23
     88a:	87 60       	ori	r24, 0x07	; 7
     88c:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first
    SPCR = 0x50;
     88e:	80 e5       	ldi	r24, 0x50	; 80
     890:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	8e b9       	out	0x0e, r24	; 14
     */
    
    // Set the SPI settings
    LCD_SPIInit();
    
    DDRF |= 0x08;  // port F bit 3 is the enable strobe for the LCD
     896:	80 91 61 00 	lds	r24, 0x0061
     89a:	88 60       	ori	r24, 0x08	; 8
     89c:	80 93 61 00 	sts	0x0061, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a0:	8f e5       	ldi	r24, 0x5F	; 95
     8a2:	9a ee       	ldi	r25, 0xEA	; 234
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <LCD_Init+0x2a>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <LCD_Init+0x30>
     8aa:	00 00       	nop
    _delay_ms(15);
    
    // request 8 bit interface mode
    LCD_CMD(0x38);
     8ac:	1f b8       	out	0x0f, r1	; 15
     8ae:	77 9b       	sbis	0x0e, 7	; 14
     8b0:	fe cf       	rjmp	.-4      	; 0x8ae <LCD_Init+0x34>
     8b2:	88 e3       	ldi	r24, 0x38	; 56
     8b4:	8f b9       	out	0x0f, r24	; 15
     8b6:	77 9b       	sbis	0x0e, 7	; 14
     8b8:	fe cf       	rjmp	.-4      	; 0x8b6 <LCD_Init+0x3c>
     8ba:	80 91 62 00 	lds	r24, 0x0062
     8be:	88 60       	ori	r24, 0x08	; 8
     8c0:	80 93 62 00 	sts	0x0062, r24
     8c4:	80 91 62 00 	lds	r24, 0x0062
     8c8:	87 7f       	andi	r24, 0xF7	; 247
     8ca:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ce:	8f e8       	ldi	r24, 0x8F	; 143
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <LCD_Init+0x58>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <LCD_Init+0x5e>
     8d8:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8da:	8f e1       	ldi	r24, 0x1F	; 31
     8dc:	9e e4       	ldi	r25, 0x4E	; 78
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <LCD_Init+0x64>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <LCD_Init+0x6a>
     8e4:	00 00       	nop
    _delay_ms(5);
    
    // display off
    LCD_CMD(0x08);
     8e6:	1f b8       	out	0x0f, r1	; 15
     8e8:	77 9b       	sbis	0x0e, 7	; 14
     8ea:	fe cf       	rjmp	.-4      	; 0x8e8 <LCD_Init+0x6e>
     8ec:	88 e0       	ldi	r24, 0x08	; 8
     8ee:	8f b9       	out	0x0f, r24	; 15
     8f0:	77 9b       	sbis	0x0e, 7	; 14
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <LCD_Init+0x76>
     8f4:	80 91 62 00 	lds	r24, 0x0062
     8f8:	88 60       	ori	r24, 0x08	; 8
     8fa:	80 93 62 00 	sts	0x0062, r24
     8fe:	80 91 62 00 	lds	r24, 0x0062
     902:	87 7f       	andi	r24, 0xF7	; 247
     904:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     908:	8f e8       	ldi	r24, 0x8F	; 143
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <LCD_Init+0x92>
     910:	00 c0       	rjmp	.+0      	; 0x912 <LCD_Init+0x98>
     912:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     914:	8f e3       	ldi	r24, 0x3F	; 63
     916:	9f e1       	ldi	r25, 0x1F	; 31
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <LCD_Init+0x9e>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <LCD_Init+0xa4>
     91e:	00 00       	nop
    _delay_ms(2);
    
    // choose entry mode so that the cursor is incremented
    LCD_CMD(0x06);
     920:	1f b8       	out	0x0f, r1	; 15
     922:	77 9b       	sbis	0x0e, 7	; 14
     924:	fe cf       	rjmp	.-4      	; 0x922 <LCD_Init+0xa8>
     926:	86 e0       	ldi	r24, 0x06	; 6
     928:	8f b9       	out	0x0f, r24	; 15
     92a:	77 9b       	sbis	0x0e, 7	; 14
     92c:	fe cf       	rjmp	.-4      	; 0x92a <LCD_Init+0xb0>
     92e:	80 91 62 00 	lds	r24, 0x0062
     932:	88 60       	ori	r24, 0x08	; 8
     934:	80 93 62 00 	sts	0x0062, r24
     938:	80 91 62 00 	lds	r24, 0x0062
     93c:	87 7f       	andi	r24, 0xF7	; 247
     93e:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     942:	8f e8       	ldi	r24, 0x8F	; 143
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <LCD_Init+0xcc>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <LCD_Init+0xd2>
     94c:	00 00       	nop
     Each digit on the display uses a 5x8 matrix
     In order to customize the icon, you specify 5 bits
     for each of the 8 rows.
     */
    // Create a custom battery logo in slot 0
    LCD_CMD(0x40); // <-- address of custom slot 0
     94e:	1f b8       	out	0x0f, r1	; 15
     950:	77 9b       	sbis	0x0e, 7	; 14
     952:	fe cf       	rjmp	.-4      	; 0x950 <LCD_Init+0xd6>
     954:	80 e4       	ldi	r24, 0x40	; 64
     956:	8f b9       	out	0x0f, r24	; 15
     958:	77 9b       	sbis	0x0e, 7	; 14
     95a:	fe cf       	rjmp	.-4      	; 0x958 <LCD_Init+0xde>
     95c:	80 91 62 00 	lds	r24, 0x0062
     960:	88 60       	ori	r24, 0x08	; 8
     962:	80 93 62 00 	sts	0x0062, r24
     966:	80 91 62 00 	lds	r24, 0x0062
     96a:	87 7f       	andi	r24, 0xF7	; 247
     96c:	80 93 62 00 	sts	0x0062, r24
     970:	8f e8       	ldi	r24, 0x8F	; 143
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <LCD_Init+0xfa>
     978:	00 c0       	rjmp	.+0      	; 0x97a <LCD_Init+0x100>
     97a:	00 00       	nop
    LCD_DATA(0x0E); // <-- top 5 pixels of icon
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	8f b9       	out	0x0f, r24	; 15
     980:	77 9b       	sbis	0x0e, 7	; 14
     982:	fe cf       	rjmp	.-4      	; 0x980 <LCD_Init+0x106>
     984:	8e e0       	ldi	r24, 0x0E	; 14
     986:	8f b9       	out	0x0f, r24	; 15
     988:	77 9b       	sbis	0x0e, 7	; 14
     98a:	fe cf       	rjmp	.-4      	; 0x988 <LCD_Init+0x10e>
     98c:	80 91 62 00 	lds	r24, 0x0062
     990:	88 60       	ori	r24, 0x08	; 8
     992:	80 93 62 00 	sts	0x0062, r24
     996:	80 91 62 00 	lds	r24, 0x0062
     99a:	87 7f       	andi	r24, 0xF7	; 247
     99c:	80 93 62 00 	sts	0x0062, r24
     9a0:	8f e8       	ldi	r24, 0x8F	; 143
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <LCD_Init+0x12a>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <LCD_Init+0x130>
     9aa:	00 00       	nop
    LCD_DATA(0x1B); // <-- next 5 pixels of icon
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	8f b9       	out	0x0f, r24	; 15
     9b0:	77 9b       	sbis	0x0e, 7	; 14
     9b2:	fe cf       	rjmp	.-4      	; 0x9b0 <LCD_Init+0x136>
     9b4:	8b e1       	ldi	r24, 0x1B	; 27
     9b6:	8f b9       	out	0x0f, r24	; 15
     9b8:	77 9b       	sbis	0x0e, 7	; 14
     9ba:	fe cf       	rjmp	.-4      	; 0x9b8 <LCD_Init+0x13e>
     9bc:	80 91 62 00 	lds	r24, 0x0062
     9c0:	88 60       	ori	r24, 0x08	; 8
     9c2:	80 93 62 00 	sts	0x0062, r24
     9c6:	80 91 62 00 	lds	r24, 0x0062
     9ca:	87 7f       	andi	r24, 0xF7	; 247
     9cc:	80 93 62 00 	sts	0x0062, r24
     9d0:	8f e8       	ldi	r24, 0x8F	; 143
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <LCD_Init+0x15a>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <LCD_Init+0x160>
     9da:	00 00       	nop
    LCD_DATA(0x11);
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	8f b9       	out	0x0f, r24	; 15
     9e0:	77 9b       	sbis	0x0e, 7	; 14
     9e2:	fe cf       	rjmp	.-4      	; 0x9e0 <LCD_Init+0x166>
     9e4:	81 e1       	ldi	r24, 0x11	; 17
     9e6:	8f b9       	out	0x0f, r24	; 15
     9e8:	77 9b       	sbis	0x0e, 7	; 14
     9ea:	fe cf       	rjmp	.-4      	; 0x9e8 <LCD_Init+0x16e>
     9ec:	80 91 62 00 	lds	r24, 0x0062
     9f0:	88 60       	ori	r24, 0x08	; 8
     9f2:	80 93 62 00 	sts	0x0062, r24
     9f6:	80 91 62 00 	lds	r24, 0x0062
     9fa:	87 7f       	andi	r24, 0xF7	; 247
     9fc:	80 93 62 00 	sts	0x0062, r24
     a00:	8f e8       	ldi	r24, 0x8F	; 143
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <LCD_Init+0x18a>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <LCD_Init+0x190>
     a0a:	00 00       	nop
    LCD_DATA(0x11);
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	8f b9       	out	0x0f, r24	; 15
     a10:	77 9b       	sbis	0x0e, 7	; 14
     a12:	fe cf       	rjmp	.-4      	; 0xa10 <LCD_Init+0x196>
     a14:	81 e1       	ldi	r24, 0x11	; 17
     a16:	8f b9       	out	0x0f, r24	; 15
     a18:	77 9b       	sbis	0x0e, 7	; 14
     a1a:	fe cf       	rjmp	.-4      	; 0xa18 <LCD_Init+0x19e>
     a1c:	80 91 62 00 	lds	r24, 0x0062
     a20:	88 60       	ori	r24, 0x08	; 8
     a22:	80 93 62 00 	sts	0x0062, r24
     a26:	80 91 62 00 	lds	r24, 0x0062
     a2a:	87 7f       	andi	r24, 0xF7	; 247
     a2c:	80 93 62 00 	sts	0x0062, r24
     a30:	8f e8       	ldi	r24, 0x8F	; 143
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <LCD_Init+0x1ba>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <LCD_Init+0x1c0>
     a3a:	00 00       	nop
    LCD_DATA(0x11);
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	8f b9       	out	0x0f, r24	; 15
     a40:	77 9b       	sbis	0x0e, 7	; 14
     a42:	fe cf       	rjmp	.-4      	; 0xa40 <LCD_Init+0x1c6>
     a44:	81 e1       	ldi	r24, 0x11	; 17
     a46:	8f b9       	out	0x0f, r24	; 15
     a48:	77 9b       	sbis	0x0e, 7	; 14
     a4a:	fe cf       	rjmp	.-4      	; 0xa48 <LCD_Init+0x1ce>
     a4c:	80 91 62 00 	lds	r24, 0x0062
     a50:	88 60       	ori	r24, 0x08	; 8
     a52:	80 93 62 00 	sts	0x0062, r24
     a56:	80 91 62 00 	lds	r24, 0x0062
     a5a:	87 7f       	andi	r24, 0xF7	; 247
     a5c:	80 93 62 00 	sts	0x0062, r24
     a60:	8f e8       	ldi	r24, 0x8F	; 143
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <LCD_Init+0x1ea>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <LCD_Init+0x1f0>
     a6a:	00 00       	nop
    LCD_DATA(0x11);
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	8f b9       	out	0x0f, r24	; 15
     a70:	77 9b       	sbis	0x0e, 7	; 14
     a72:	fe cf       	rjmp	.-4      	; 0xa70 <LCD_Init+0x1f6>
     a74:	81 e1       	ldi	r24, 0x11	; 17
     a76:	8f b9       	out	0x0f, r24	; 15
     a78:	77 9b       	sbis	0x0e, 7	; 14
     a7a:	fe cf       	rjmp	.-4      	; 0xa78 <LCD_Init+0x1fe>
     a7c:	80 91 62 00 	lds	r24, 0x0062
     a80:	88 60       	ori	r24, 0x08	; 8
     a82:	80 93 62 00 	sts	0x0062, r24
     a86:	80 91 62 00 	lds	r24, 0x0062
     a8a:	87 7f       	andi	r24, 0xF7	; 247
     a8c:	80 93 62 00 	sts	0x0062, r24
     a90:	8f e8       	ldi	r24, 0x8F	; 143
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <LCD_Init+0x21a>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <LCD_Init+0x220>
     a9a:	00 00       	nop
    LCD_DATA(0x11);
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	8f b9       	out	0x0f, r24	; 15
     aa0:	77 9b       	sbis	0x0e, 7	; 14
     aa2:	fe cf       	rjmp	.-4      	; 0xaa0 <LCD_Init+0x226>
     aa4:	81 e1       	ldi	r24, 0x11	; 17
     aa6:	8f b9       	out	0x0f, r24	; 15
     aa8:	77 9b       	sbis	0x0e, 7	; 14
     aaa:	fe cf       	rjmp	.-4      	; 0xaa8 <LCD_Init+0x22e>
     aac:	80 91 62 00 	lds	r24, 0x0062
     ab0:	88 60       	ori	r24, 0x08	; 8
     ab2:	80 93 62 00 	sts	0x0062, r24
     ab6:	80 91 62 00 	lds	r24, 0x0062
     aba:	87 7f       	andi	r24, 0xF7	; 247
     abc:	80 93 62 00 	sts	0x0062, r24
     ac0:	8f e8       	ldi	r24, 0x8F	; 143
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <LCD_Init+0x24a>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <LCD_Init+0x250>
     aca:	00 00       	nop
    LCD_DATA(0x1F); // <-- bottom 5 pixels of icon
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	8f b9       	out	0x0f, r24	; 15
     ad0:	77 9b       	sbis	0x0e, 7	; 14
     ad2:	fe cf       	rjmp	.-4      	; 0xad0 <LCD_Init+0x256>
     ad4:	8f e1       	ldi	r24, 0x1F	; 31
     ad6:	8f b9       	out	0x0f, r24	; 15
     ad8:	77 9b       	sbis	0x0e, 7	; 14
     ada:	fe cf       	rjmp	.-4      	; 0xad8 <LCD_Init+0x25e>
     adc:	80 91 62 00 	lds	r24, 0x0062
     ae0:	88 60       	ori	r24, 0x08	; 8
     ae2:	80 93 62 00 	sts	0x0062, r24
     ae6:	80 91 62 00 	lds	r24, 0x0062
     aea:	87 7f       	andi	r24, 0xF7	; 247
     aec:	80 93 62 00 	sts	0x0062, r24
     af0:	8f e8       	ldi	r24, 0x8F	; 143
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <LCD_Init+0x27a>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <LCD_Init+0x280>
     afa:	00 00       	nop
    
    /*
     Clear the screen and enable the LCD
     */	
    // clear display
    LCD_CMD(0x01);
     afc:	1f b8       	out	0x0f, r1	; 15
     afe:	77 9b       	sbis	0x0e, 7	; 14
     b00:	fe cf       	rjmp	.-4      	; 0xafe <LCD_Init+0x284>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	8f b9       	out	0x0f, r24	; 15
     b06:	77 9b       	sbis	0x0e, 7	; 14
     b08:	fe cf       	rjmp	.-4      	; 0xb06 <LCD_Init+0x28c>
     b0a:	80 91 62 00 	lds	r24, 0x0062
     b0e:	88 60       	ori	r24, 0x08	; 8
     b10:	80 93 62 00 	sts	0x0062, r24
     b14:	80 91 62 00 	lds	r24, 0x0062
     b18:	87 7f       	andi	r24, 0xF7	; 247
     b1a:	80 93 62 00 	sts	0x0062, r24
     b1e:	8f e8       	ldi	r24, 0x8F	; 143
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <LCD_Init+0x2a8>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <LCD_Init+0x2ae>
     b28:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b2a:	8f e1       	ldi	r24, 0x1F	; 31
     b2c:	9e e4       	ldi	r25, 0x4E	; 78
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <LCD_Init+0x2b4>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <LCD_Init+0x2ba>
     b34:	00 00       	nop
    _delay_ms(5);
    
    // display on
    LCD_CMD(0x0C);
     b36:	1f b8       	out	0x0f, r1	; 15
     b38:	77 9b       	sbis	0x0e, 7	; 14
     b3a:	fe cf       	rjmp	.-4      	; 0xb38 <LCD_Init+0x2be>
     b3c:	8c e0       	ldi	r24, 0x0C	; 12
     b3e:	8f b9       	out	0x0f, r24	; 15
     b40:	77 9b       	sbis	0x0e, 7	; 14
     b42:	fe cf       	rjmp	.-4      	; 0xb40 <LCD_Init+0x2c6>
     b44:	80 91 62 00 	lds	r24, 0x0062
     b48:	88 60       	ori	r24, 0x08	; 8
     b4a:	80 93 62 00 	sts	0x0062, r24
     b4e:	80 91 62 00 	lds	r24, 0x0062
     b52:	87 7f       	andi	r24, 0xF7	; 247
     b54:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b58:	8f e8       	ldi	r24, 0x8F	; 143
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <LCD_Init+0x2e2>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <LCD_Init+0x2e8>
     b62:	00 00       	nop
     b64:	08 95       	ret

00000b66 <play_rest>:
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
     b66:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
     b68:	10 92 d7 01 	sts	0x01D7, r1
     b6c:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	90 93 d4 01 	sts	0x01D4, r25
     b76:	80 93 d3 01 	sts	0x01D3, r24
     b7a:	08 95       	ret

00000b7c <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
     b7c:	cf 93       	push	r28
    //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
    //duration is in 64th notes at 120bpm
    //e.g. play_note('D', 1, 0, 16)
    //this would play a Db, octave 0 for 1 quarter note
    //120 bpm (every 32ms inc beat)
    PORTD &= unmute;      //unmute (just in case)
     b7e:	92 98       	cbi	0x12, 2	; 18
    beat = 0;             //reset the beat counter
     b80:	10 92 d7 01 	sts	0x01D7, r1
     b84:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;  //set the max beat
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	30 93 d4 01 	sts	0x01D4, r19
     b8e:	20 93 d3 01 	sts	0x01D3, r18
    switch (octave) {
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	49 30       	cpi	r20, 0x09	; 9
     b96:	51 05       	cpc	r21, r1
     b98:	20 f0       	brcs	.+8      	; 0xba2 <play_note+0x26>
            case 'G': if(flat){OCR1A=Gb8;}
            else {OCR1A=G8;}
                break;
        } 
            break;
        default: OCR1A=0x0000;
     b9a:	1b bc       	out	0x2b, r1	; 43
     b9c:	1a bc       	out	0x2a, r1	; 42
    }
}
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret
    //this would play a Db, octave 0 for 1 quarter note
    //120 bpm (every 32ms inc beat)
    PORTD &= unmute;      //unmute (just in case)
    beat = 0;             //reset the beat counter
    max_beat = duration;  //set the max beat
    switch (octave) {
     ba2:	4a 5b       	subi	r20, 0xBA	; 186
     ba4:	5f 4f       	sbci	r21, 0xFF	; 255
     ba6:	fa 01       	movw	r30, r20
            case 'G': if(flat){OCR1A=Gb7;}
            else {OCR1A=G7;}
                break;
        } 
            break;
        case 8: switch (note) {
     ba8:	99 27       	eor	r25, r25
     baa:	87 fd       	sbrc	r24, 7
     bac:	90 95       	com	r25
     bae:	a9 2f       	mov	r26, r25
     bb0:	b9 2f       	mov	r27, r25
     bb2:	81 54       	subi	r24, 0x41	; 65
     bb4:	91 09       	sbc	r25, r1
    //this would play a Db, octave 0 for 1 quarter note
    //120 bpm (every 32ms inc beat)
    PORTD &= unmute;      //unmute (just in case)
    beat = 0;             //reset the beat counter
    max_beat = duration;  //set the max beat
    switch (octave) {
     bb6:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb6;}
            else {OCR1A=G6;}
                break;
        } 
            break;
        case 7: switch (note) {
     bba:	87 30       	cpi	r24, 0x07	; 7
     bbc:	91 05       	cpc	r25, r1
     bbe:	78 f7       	brcc	.-34     	; 0xb9e <play_note+0x22>
     bc0:	81 5b       	subi	r24, 0xB1	; 177
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	fc 01       	movw	r30, r24
     bc6:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb7;}
            else {OCR1A=G7;}
                break;
        } 
            break;
        case 8: switch (note) {
     bca:	87 30       	cpi	r24, 0x07	; 7
     bcc:	91 05       	cpc	r25, r1
     bce:	38 f7       	brcc	.-50     	; 0xb9e <play_note+0x22>
     bd0:	8a 5a       	subi	r24, 0xAA	; 170
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	fc 01       	movw	r30, r24
     bd6:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
    //120 bpm (every 32ms inc beat)
    PORTD &= unmute;      //unmute (just in case)
    beat = 0;             //reset the beat counter
    max_beat = duration;  //set the max beat
    switch (octave) {
        case 0: switch (note) {
     bda:	87 30       	cpi	r24, 0x07	; 7
     bdc:	91 05       	cpc	r25, r1
     bde:	f8 f6       	brcc	.-66     	; 0xb9e <play_note+0x22>
     be0:	83 5a       	subi	r24, 0xA3	; 163
     be2:	9f 4f       	sbci	r25, 0xFF	; 255
     be4:	fc 01       	movw	r30, r24
     be6:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb0;}
            else {OCR1A=G0;}
                break;
        }
            break;
        case 1: switch (note) {
     bea:	87 30       	cpi	r24, 0x07	; 7
     bec:	91 05       	cpc	r25, r1
     bee:	b8 f6       	brcc	.-82     	; 0xb9e <play_note+0x22>
     bf0:	8c 59       	subi	r24, 0x9C	; 156
     bf2:	9f 4f       	sbci	r25, 0xFF	; 255
     bf4:	fc 01       	movw	r30, r24
     bf6:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb1;}
            else {OCR1A=G1;}
                break;
        }
            break;
        case 2: switch (note) {
     bfa:	87 30       	cpi	r24, 0x07	; 7
     bfc:	91 05       	cpc	r25, r1
     bfe:	78 f6       	brcc	.-98     	; 0xb9e <play_note+0x22>
     c00:	85 59       	subi	r24, 0x95	; 149
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	fc 01       	movw	r30, r24
     c06:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb2;}
            else {OCR1A=G2;}
                break;
        }
            break;
        case 3: switch (note) {
     c0a:	87 30       	cpi	r24, 0x07	; 7
     c0c:	91 05       	cpc	r25, r1
     c0e:	38 f6       	brcc	.-114    	; 0xb9e <play_note+0x22>
     c10:	8e 58       	subi	r24, 0x8E	; 142
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	fc 01       	movw	r30, r24
     c16:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb3;}
            else {OCR1A=G3;}
                break;
        }
            break;
        case 4: switch (note) {
     c1a:	87 30       	cpi	r24, 0x07	; 7
     c1c:	91 05       	cpc	r25, r1
     c1e:	08 f0       	brcs	.+2      	; 0xc22 <play_note+0xa6>
     c20:	be cf       	rjmp	.-132    	; 0xb9e <play_note+0x22>
     c22:	87 58       	subi	r24, 0x87	; 135
     c24:	9f 4f       	sbci	r25, 0xFF	; 255
     c26:	fc 01       	movw	r30, r24
     c28:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb4;}
            else {OCR1A=G4;}
                break;
        } 
            break;
        case 5: switch (note) {
     c2c:	87 30       	cpi	r24, 0x07	; 7
     c2e:	91 05       	cpc	r25, r1
     c30:	08 f0       	brcs	.+2      	; 0xc34 <play_note+0xb8>
     c32:	b5 cf       	rjmp	.-150    	; 0xb9e <play_note+0x22>
     c34:	80 58       	subi	r24, 0x80	; 128
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	fc 01       	movw	r30, r24
     c3a:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            case 'G': if(flat){OCR1A=Gb5;}
            else {OCR1A=G5;}
                break;
        } 
            break;
        case 6: switch (note) {
     c3e:	87 30       	cpi	r24, 0x07	; 7
     c40:	91 05       	cpc	r25, r1
     c42:	08 f0       	brcs	.+2      	; 0xc46 <play_note+0xca>
     c44:	ac cf       	rjmp	.-168    	; 0xb9e <play_note+0x22>
     c46:	89 57       	subi	r24, 0x79	; 121
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	fc 01       	movw	r30, r24
     c4c:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            else {OCR1A=D6;}
                break;
            case 'E': if(flat){OCR1A=Eb6;}
            else {OCR1A=E6;}
                break;
            case 'F': OCR1A=F6;
     c50:	88 e5       	ldi	r24, 0x58	; 88
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	9b bd       	out	0x2b, r25	; 43
     c56:	8a bd       	out	0x2a, r24	; 42
                break;
     c58:	a2 cf       	rjmp	.-188    	; 0xb9e <play_note+0x22>
            case 'C': OCR1A=C6;
                break;
            case 'D': if(flat){OCR1A=Db6;}
            else {OCR1A=D6;}
                break;
            case 'E': if(flat){OCR1A=Eb6;}
     c5a:	66 23       	and	r22, r22
     c5c:	09 f4       	brne	.+2      	; 0xc60 <play_note+0xe4>
     c5e:	0f c2       	rjmp	.+1054   	; 0x107e <play_note+0x502>
     c60:	83 e6       	ldi	r24, 0x63	; 99
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	9b bd       	out	0x2b, r25	; 43
     c66:	8a bd       	out	0x2a, r24	; 42
     c68:	9a cf       	rjmp	.-204    	; 0xb9e <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb6;}
            else {OCR1A=B6;}
                break;
            case 'C': OCR1A=C6;
                break;
            case 'D': if(flat){OCR1A=Db6;}
     c6a:	66 23       	and	r22, r22
     c6c:	09 f4       	brne	.+2      	; 0xc70 <play_note+0xf4>
     c6e:	11 c2       	rjmp	.+1058   	; 0x1092 <play_note+0x516>
     c70:	8f e6       	ldi	r24, 0x6F	; 111
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	9b bd       	out	0x2b, r25	; 43
     c76:	8a bd       	out	0x2a, r24	; 42
     c78:	92 cf       	rjmp	.-220    	; 0xb9e <play_note+0x22>
            else {OCR1A=A6;}
                break;
            case 'B': if(flat){OCR1A=Bb6;}
            else {OCR1A=B6;}
                break;
            case 'C': OCR1A=C6;
     c7a:	86 e7       	ldi	r24, 0x76	; 118
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	9b bd       	out	0x2b, r25	; 43
     c80:	8a bd       	out	0x2a, r24	; 42
                break;
     c82:	8d cf       	rjmp	.-230    	; 0xb9e <play_note+0x22>
            else {OCR1A=G5;}
                break;
        } 
            break;
        case 6: switch (note) {
            case 'A': if(flat){OCR1A=Ab6;}
     c84:	66 23       	and	r22, r22
     c86:	09 f4       	brne	.+2      	; 0xc8a <play_note+0x10e>
     c88:	ff c1       	rjmp	.+1022   	; 0x1088 <play_note+0x50c>
     c8a:	8a e4       	ldi	r24, 0x4A	; 74
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	9b bd       	out	0x2b, r25	; 43
     c90:	8a bd       	out	0x2a, r24	; 42
     c92:	85 cf       	rjmp	.-246    	; 0xb9e <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb6;}
            else {OCR1A=E6;}
                break;
            case 'F': OCR1A=F6;
                break;
            case 'G': if(flat){OCR1A=Gb6;}
     c94:	66 23       	and	r22, r22
     c96:	09 f4       	brne	.+2      	; 0xc9a <play_note+0x11e>
     c98:	01 c2       	rjmp	.+1026   	; 0x109c <play_note+0x520>
     c9a:	83 e5       	ldi	r24, 0x53	; 83
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	9b bd       	out	0x2b, r25	; 43
     ca0:	8a bd       	out	0x2a, r24	; 42
     ca2:	7d cf       	rjmp	.-262    	; 0xb9e <play_note+0x22>
            break;
        case 6: switch (note) {
            case 'A': if(flat){OCR1A=Ab6;}
            else {OCR1A=A6;}
                break;
            case 'B': if(flat){OCR1A=Bb6;}
     ca4:	66 23       	and	r22, r22
     ca6:	09 f4       	brne	.+2      	; 0xcaa <play_note+0x12e>
     ca8:	b8 c1       	rjmp	.+880    	; 0x101a <play_note+0x49e>
     caa:	82 e4       	ldi	r24, 0x42	; 66
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	9b bd       	out	0x2b, r25	; 43
     cb0:	8a bd       	out	0x2a, r24	; 42
     cb2:	75 cf       	rjmp	.-278    	; 0xb9e <play_note+0x22>
            else {OCR1A=D5;}
                break;
            case 'E': if(flat){OCR1A=Eb5;}
            else {OCR1A=E5;}
                break;
            case 'F': OCR1A=F5;
     cb4:	81 eb       	ldi	r24, 0xB1	; 177
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9b bd       	out	0x2b, r25	; 43
     cba:	8a bd       	out	0x2a, r24	; 42
                break;
     cbc:	70 cf       	rjmp	.-288    	; 0xb9e <play_note+0x22>
            break;
        case 5: switch (note) {
            case 'A': if(flat){OCR1A=Ab5;}
            else {OCR1A=A5;}
                break;
            case 'B': if(flat){OCR1A=Bb5;}
     cbe:	66 23       	and	r22, r22
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <play_note+0x148>
     cc2:	d3 c1       	rjmp	.+934    	; 0x106a <play_note+0x4ee>
     cc4:	85 e8       	ldi	r24, 0x85	; 133
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9b bd       	out	0x2b, r25	; 43
     cca:	8a bd       	out	0x2a, r24	; 42
     ccc:	68 cf       	rjmp	.-304    	; 0xb9e <play_note+0x22>
            else {OCR1A=G4;}
                break;
        } 
            break;
        case 5: switch (note) {
            case 'A': if(flat){OCR1A=Ab5;}
     cce:	66 23       	and	r22, r22
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <play_note+0x158>
     cd2:	c1 c1       	rjmp	.+898    	; 0x1056 <play_note+0x4da>
     cd4:	85 e9       	ldi	r24, 0x95	; 149
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9b bd       	out	0x2b, r25	; 43
     cda:	8a bd       	out	0x2a, r24	; 42
     cdc:	60 cf       	rjmp	.-320    	; 0xb9e <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb5;}
            else {OCR1A=E5;}
                break;
            case 'F': OCR1A=F5;
                break;
            case 'G': if(flat){OCR1A=Gb5;}
     cde:	66 23       	and	r22, r22
     ce0:	09 f4       	brne	.+2      	; 0xce4 <play_note+0x168>
     ce2:	be c1       	rjmp	.+892    	; 0x1060 <play_note+0x4e4>
     ce4:	87 ea       	ldi	r24, 0xA7	; 167
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9b bd       	out	0x2b, r25	; 43
     cea:	8a bd       	out	0x2a, r24	; 42
     cec:	58 cf       	rjmp	.-336    	; 0xb9e <play_note+0x22>
            else {OCR1A=D4;}
                break;
            case 'E': if(flat){OCR1A=Eb4;}
            else {OCR1A=E4;}
                break;
            case 'F': OCR1A=F4;
     cee:	84 e6       	ldi	r24, 0x64	; 100
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	9b bd       	out	0x2b, r25	; 43
     cf4:	8a bd       	out	0x2a, r24	; 42
                break;
     cf6:	53 cf       	rjmp	.-346    	; 0xb9e <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb5;}
            else {OCR1A=B5;}
                break;
            case 'C': OCR1A=C5;
                break;
            case 'D': if(flat){OCR1A=Db5;}
     cf8:	66 23       	and	r22, r22
     cfa:	09 f4       	brne	.+2      	; 0xcfe <play_note+0x182>
     cfc:	bb c1       	rjmp	.+886    	; 0x1074 <play_note+0x4f8>
     cfe:	80 ee       	ldi	r24, 0xE0	; 224
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9b bd       	out	0x2b, r25	; 43
     d04:	8a bd       	out	0x2a, r24	; 42
     d06:	4b cf       	rjmp	.-362    	; 0xb9e <play_note+0x22>
            else {OCR1A=A5;}
                break;
            case 'B': if(flat){OCR1A=Bb5;}
            else {OCR1A=B5;}
                break;
            case 'C': OCR1A=C5;
     d08:	8d ee       	ldi	r24, 0xED	; 237
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9b bd       	out	0x2b, r25	; 43
     d0e:	8a bd       	out	0x2a, r24	; 42
                break;
     d10:	46 cf       	rjmp	.-372    	; 0xb9e <play_note+0x22>
            case 'D': if(flat){OCR1A=Db5;}
            else {OCR1A=D5;}
                break;
            case 'E': if(flat){OCR1A=Eb5;}
     d12:	66 23       	and	r22, r22
     d14:	09 f4       	brne	.+2      	; 0xd18 <play_note+0x19c>
     d16:	8b c1       	rjmp	.+790    	; 0x102e <play_note+0x4b2>
     d18:	87 ec       	ldi	r24, 0xC7	; 199
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9b bd       	out	0x2b, r25	; 43
     d1e:	8a bd       	out	0x2a, r24	; 42
     d20:	3e cf       	rjmp	.-388    	; 0xb9e <play_note+0x22>
            case 'C': OCR1A=C4;
                break;
            case 'D': if(flat){OCR1A=Db4;}
            else {OCR1A=D4;}
                break;
            case 'E': if(flat){OCR1A=Eb4;}
     d22:	66 23       	and	r22, r22
     d24:	09 f4       	brne	.+2      	; 0xd28 <play_note+0x1ac>
     d26:	74 c1       	rjmp	.+744    	; 0x1010 <play_note+0x494>
     d28:	80 e9       	ldi	r24, 0x90	; 144
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	9b bd       	out	0x2b, r25	; 43
     d2e:	8a bd       	out	0x2a, r24	; 42
     d30:	36 cf       	rjmp	.-404    	; 0xb9e <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb3;}
            else {OCR1A=B3;}
                break;
            case 'C': OCR1A=C3;
                break;
            case 'D': if(flat){OCR1A=Db3;}
     d32:	66 23       	and	r22, r22
     d34:	09 f4       	brne	.+2      	; 0xd38 <play_note+0x1bc>
     d36:	cb c1       	rjmp	.+918    	; 0x10ce <play_note+0x552>
     d38:	84 e8       	ldi	r24, 0x84	; 132
     d3a:	93 e0       	ldi	r25, 0x03	; 3
     d3c:	9b bd       	out	0x2b, r25	; 43
     d3e:	8a bd       	out	0x2a, r24	; 42
     d40:	2e cf       	rjmp	.-420    	; 0xb9e <play_note+0x22>
            else {OCR1A=G3;}
                break;
        }
            break;
        case 4: switch (note) {
            case 'A': if(flat){OCR1A=Ab4;}
     d42:	66 23       	and	r22, r22
     d44:	09 f4       	brne	.+2      	; 0xd48 <play_note+0x1cc>
     d46:	af c1       	rjmp	.+862    	; 0x10a6 <play_note+0x52a>
     d48:	8b e2       	ldi	r24, 0x2B	; 43
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	9b bd       	out	0x2b, r25	; 43
     d4e:	8a bd       	out	0x2a, r24	; 42
     d50:	26 cf       	rjmp	.-436    	; 0xb9e <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb3;}
            else {OCR1A=E3;}
                break;
            case 'F': OCR1A=F3;
                break;
            case 'G': if(flat){OCR1A=Gb3;}
     d52:	66 23       	and	r22, r22
     d54:	09 f4       	brne	.+2      	; 0xd58 <play_note+0x1dc>
     d56:	b1 c1       	rjmp	.+866    	; 0x10ba <play_note+0x53e>
     d58:	82 ea       	ldi	r24, 0xA2	; 162
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	9b bd       	out	0x2b, r25	; 43
     d5e:	8a bd       	out	0x2a, r24	; 42
     d60:	1e cf       	rjmp	.-452    	; 0xb9e <play_note+0x22>
            else {OCR1A=A4;}
                break;
            case 'B': if(flat){OCR1A=Bb4;}
            else {OCR1A=B4;}
                break;
            case 'C': OCR1A=C4;
     d62:	8c ed       	ldi	r24, 0xDC	; 220
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	9b bd       	out	0x2b, r25	; 43
     d68:	8a bd       	out	0x2a, r24	; 42
                break;
     d6a:	19 cf       	rjmp	.-462    	; 0xb9e <play_note+0x22>
            break;
        case 3: switch (note) {
            case 'A': if(flat){OCR1A=Ab3;}
            else {OCR1A=A3;}
                break;
            case 'B': if(flat){OCR1A=Bb3;}
     d6c:	66 23       	and	r22, r22
     d6e:	09 f4       	brne	.+2      	; 0xd72 <play_note+0x1f6>
     d70:	59 c1       	rjmp	.+690    	; 0x1024 <play_note+0x4a8>
     d72:	87 e1       	ldi	r24, 0x17	; 23
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	9b bd       	out	0x2b, r25	; 43
     d78:	8a bd       	out	0x2a, r24	; 42
     d7a:	11 cf       	rjmp	.-478    	; 0xb9e <play_note+0x22>
            else {OCR1A=G2;}
                break;
        }
            break;
        case 3: switch (note) {
            case 'A': if(flat){OCR1A=Ab3;}
     d7c:	66 23       	and	r22, r22
     d7e:	09 f4       	brne	.+2      	; 0xd82 <play_note+0x206>
     d80:	b0 c1       	rjmp	.+864    	; 0x10e2 <play_note+0x566>
     d82:	88 e5       	ldi	r24, 0x58	; 88
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	9b bd       	out	0x2b, r25	; 43
     d88:	8a bd       	out	0x2a, r24	; 42
     d8a:	09 cf       	rjmp	.-494    	; 0xb9e <play_note+0x22>
            else {OCR1A=D3;}
                break;
            case 'E': if(flat){OCR1A=Eb3;}
            else {OCR1A=E3;}
                break;
            case 'F': OCR1A=F3;
     d8c:	8a ec       	ldi	r24, 0xCA	; 202
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	9b bd       	out	0x2b, r25	; 43
     d92:	8a bd       	out	0x2a, r24	; 42
                break;
     d94:	04 cf       	rjmp	.-504    	; 0xb9e <play_note+0x22>
            case 'C': OCR1A=C2;
                break;
            case 'D': if(flat){OCR1A=Db2;}
            else {OCR1A=D2;}
                break;
            case 'E': if(flat){OCR1A=Eb2;}
     d96:	66 23       	and	r22, r22
     d98:	09 f4       	brne	.+2      	; 0xd9c <play_note+0x220>
     d9a:	35 c1       	rjmp	.+618    	; 0x1006 <play_note+0x48a>
     d9c:	86 e4       	ldi	r24, 0x46	; 70
     d9e:	96 e0       	ldi	r25, 0x06	; 6
     da0:	9b bd       	out	0x2b, r25	; 43
     da2:	8a bd       	out	0x2a, r24	; 42
     da4:	fc ce       	rjmp	.-520    	; 0xb9e <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb2;}
            else {OCR1A=B2;}
                break;
            case 'C': OCR1A=C2;
                break;
            case 'D': if(flat){OCR1A=Db2;}
     da6:	66 23       	and	r22, r22
     da8:	09 f4       	brne	.+2      	; 0xdac <play_note+0x230>
     daa:	82 c1       	rjmp	.+772    	; 0x10b0 <play_note+0x534>
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	97 e0       	ldi	r25, 0x07	; 7
     db0:	9b bd       	out	0x2b, r25	; 43
     db2:	8a bd       	out	0x2a, r24	; 42
     db4:	f4 ce       	rjmp	.-536    	; 0xb9e <play_note+0x22>
            else {OCR1A=D2;}
                break;
            case 'E': if(flat){OCR1A=Eb2;}
            else {OCR1A=E2;}
                break;
            case 'F': OCR1A=F2;
     db6:	86 e9       	ldi	r24, 0x96	; 150
     db8:	95 e0       	ldi	r25, 0x05	; 5
     dba:	9b bd       	out	0x2b, r25	; 43
     dbc:	8a bd       	out	0x2a, r24	; 42
                break;
     dbe:	ef ce       	rjmp	.-546    	; 0xb9e <play_note+0x22>
            else {OCR1A=A3;}
                break;
            case 'B': if(flat){OCR1A=Bb3;}
            else {OCR1A=B3;}
                break;
            case 'C': OCR1A=C3;
     dc0:	8a eb       	ldi	r24, 0xBA	; 186
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	9b bd       	out	0x2b, r25	; 43
     dc6:	8a bd       	out	0x2a, r24	; 42
                break;
     dc8:	ea ce       	rjmp	.-556    	; 0xb9e <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb4;}
            else {OCR1A=B4;}
                break;
            case 'C': OCR1A=C4;
                break;
            case 'D': if(flat){OCR1A=Db4;}
     dca:	66 23       	and	r22, r22
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <play_note+0x254>
     dce:	7a c1       	rjmp	.+756    	; 0x10c4 <play_note+0x548>
     dd0:	81 ec       	ldi	r24, 0xC1	; 193
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	9b bd       	out	0x2b, r25	; 43
     dd6:	8a bd       	out	0x2a, r24	; 42
     dd8:	e2 ce       	rjmp	.-572    	; 0xb9e <play_note+0x22>
            break;
        case 4: switch (note) {
            case 'A': if(flat){OCR1A=Ab4;}
            else {OCR1A=A4;}
                break;
            case 'B': if(flat){OCR1A=Bb4;}
     dda:	66 23       	and	r22, r22
     ddc:	09 f4       	brne	.+2      	; 0xde0 <play_note+0x264>
     dde:	7c c1       	rjmp	.+760    	; 0x10d8 <play_note+0x55c>
     de0:	8b e0       	ldi	r24, 0x0B	; 11
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	9b bd       	out	0x2b, r25	; 43
     de6:	8a bd       	out	0x2a, r24	; 42
     de8:	da ce       	rjmp	.-588    	; 0xb9e <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb4;}
            else {OCR1A=E4;}
                break;
            case 'F': OCR1A=F4;
                break;
            case 'G': if(flat){OCR1A=Gb4;}
     dea:	66 23       	and	r22, r22
     dec:	09 f4       	brne	.+2      	; 0xdf0 <play_note+0x274>
     dee:	7e c1       	rjmp	.+764    	; 0x10ec <play_note+0x570>
     df0:	80 e5       	ldi	r24, 0x50	; 80
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	9b bd       	out	0x2b, r25	; 43
     df6:	8a bd       	out	0x2a, r24	; 42
     df8:	d2 ce       	rjmp	.-604    	; 0xb9e <play_note+0x22>
            case 'C': OCR1A=C3;
                break;
            case 'D': if(flat){OCR1A=Db3;}
            else {OCR1A=D3;}
                break;
            case 'E': if(flat){OCR1A=Eb3;}
     dfa:	66 23       	and	r22, r22
     dfc:	09 f4       	brne	.+2      	; 0xe00 <play_note+0x284>
     dfe:	ad c1       	rjmp	.+858    	; 0x115a <__stack+0x5b>
     e00:	82 e2       	ldi	r24, 0x22	; 34
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	9b bd       	out	0x2b, r25	; 43
     e06:	8a bd       	out	0x2a, r24	; 42
     e08:	ca ce       	rjmp	.-620    	; 0xb9e <play_note+0x22>
            else {OCR1A=A2;}
                break;
            case 'B': if(flat){OCR1A=Bb2;}
            else {OCR1A=B2;}
                break;
            case 'C': OCR1A=C2;
     e0a:	86 e7       	ldi	r24, 0x76	; 118
     e0c:	97 e0       	ldi	r25, 0x07	; 7
     e0e:	9b bd       	out	0x2b, r25	; 43
     e10:	8a bd       	out	0x2a, r24	; 42
                break;
     e12:	c5 ce       	rjmp	.-630    	; 0xb9e <play_note+0x22>
    PORTD &= unmute;      //unmute (just in case)
    beat = 0;             //reset the beat counter
    max_beat = duration;  //set the max beat
    switch (octave) {
        case 0: switch (note) {
            case 'A': if(flat){OCR1A=Ab0;}
     e14:	66 23       	and	r22, r22
     e16:	09 f4       	brne	.+2      	; 0xe1a <play_note+0x29e>
     e18:	0f c1       	rjmp	.+542    	; 0x1038 <play_note+0x4bc>
     e1a:	8e ec       	ldi	r24, 0xCE	; 206
     e1c:	92 e1       	ldi	r25, 0x12	; 18
     e1e:	9b bd       	out	0x2b, r25	; 43
     e20:	8a bd       	out	0x2a, r24	; 42
     e22:	bd ce       	rjmp	.-646    	; 0xb9e <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb0;}
            else {OCR1A=E0;}
                break;
            case 'F': OCR1A=F0;
                break;
            case 'G': if(flat){OCR1A=Gb0;}
     e24:	66 23       	and	r22, r22
     e26:	09 f4       	brne	.+2      	; 0xe2a <play_note+0x2ae>
     e28:	7a c1       	rjmp	.+756    	; 0x111e <__stack+0x1f>
     e2a:	8d e1       	ldi	r24, 0x1D	; 29
     e2c:	95 e1       	ldi	r25, 0x15	; 21
     e2e:	9b bd       	out	0x2b, r25	; 43
     e30:	8a bd       	out	0x2a, r24	; 42
     e32:	b5 ce       	rjmp	.-662    	; 0xb9e <play_note+0x22>
            break;
        case 1: switch (note) {
            case 'A': if(flat){OCR1A=Ab1;}
            else {OCR1A=A1;}
                break;
            case 'B': if(flat){OCR1A=Bb1;}
     e34:	66 23       	and	r22, r22
     e36:	09 f4       	brne	.+2      	; 0xe3a <play_note+0x2be>
     e38:	dc c0       	rjmp	.+440    	; 0xff2 <play_note+0x476>
     e3a:	80 e6       	ldi	r24, 0x60	; 96
     e3c:	98 e0       	ldi	r25, 0x08	; 8
     e3e:	9b bd       	out	0x2b, r25	; 43
     e40:	8a bd       	out	0x2a, r24	; 42
     e42:	ad ce       	rjmp	.-678    	; 0xb9e <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb8;}
            else {OCR1A=E8;}
                break;
            case 'F': OCR1A=F8;
                break;
            case 'G': if(flat){OCR1A=Gb8;}
     e44:	66 23       	and	r22, r22
     e46:	09 f4       	brne	.+2      	; 0xe4a <play_note+0x2ce>
     e48:	92 c1       	rjmp	.+804    	; 0x116e <__stack+0x6f>
     e4a:	80 e1       	ldi	r24, 0x10	; 16
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9b bd       	out	0x2b, r25	; 43
     e50:	8a bd       	out	0x2a, r24	; 42
     e52:	a5 ce       	rjmp	.-694    	; 0xb9e <play_note+0x22>
            else {OCR1A=D1;}
                break;
            case 'E': if(flat){OCR1A=Eb1;}
            else {OCR1A=E1;}
                break;
            case 'F': OCR1A=F1;
     e54:	8e e2       	ldi	r24, 0x2E	; 46
     e56:	9b e0       	ldi	r25, 0x0B	; 11
     e58:	9b bd       	out	0x2b, r25	; 43
     e5a:	8a bd       	out	0x2a, r24	; 42
                break;
     e5c:	a0 ce       	rjmp	.-704    	; 0xb9e <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb8;}
            else {OCR1A=B8;}
                break;
            case 'C': OCR1A=C8;
                break;
            case 'D': if(flat){OCR1A=Db8;}
     e5e:	66 23       	and	r22, r22
     e60:	09 f4       	brne	.+2      	; 0xe64 <play_note+0x2e8>
     e62:	49 c1       	rjmp	.+658    	; 0x10f6 <play_note+0x57a>
     e64:	8b e1       	ldi	r24, 0x1B	; 27
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9b bd       	out	0x2b, r25	; 43
     e6a:	8a bd       	out	0x2a, r24	; 42
     e6c:	98 ce       	rjmp	.-720    	; 0xb9e <play_note+0x22>
            else {OCR1A=A8;}
                break;
            case 'B': if(flat){OCR1A=Bb8;}
            else {OCR1A=B8;}
                break;
            case 'C': OCR1A=C8;
     e6e:	8c e1       	ldi	r24, 0x1C	; 28
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9b bd       	out	0x2b, r25	; 43
     e74:	8a bd       	out	0x2a, r24	; 42
                break;
     e76:	93 ce       	rjmp	.-730    	; 0xb9e <play_note+0x22>
            break;
        case 8: switch (note) {
            case 'A': if(flat){OCR1A=Ab8;}
            else {OCR1A=A8;}
                break;
            case 'B': if(flat){OCR1A=Bb8;}
     e78:	66 23       	and	r22, r22
     e7a:	09 f4       	brne	.+2      	; 0xe7e <play_note+0x302>
     e7c:	41 c1       	rjmp	.+642    	; 0x1100 <__stack+0x1>
     e7e:	87 e0       	ldi	r24, 0x07	; 7
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9b bd       	out	0x2b, r25	; 43
     e84:	8a bd       	out	0x2a, r24	; 42
     e86:	8b ce       	rjmp	.-746    	; 0xb9e <play_note+0x22>
            else {OCR1A=G7;}
                break;
        } 
            break;
        case 8: switch (note) {
            case 'A': if(flat){OCR1A=Ab8;}
     e88:	66 23       	and	r22, r22
     e8a:	09 f4       	brne	.+2      	; 0xe8e <play_note+0x312>
     e8c:	da c0       	rjmp	.+436    	; 0x1042 <play_note+0x4c6>
     e8e:	8b e0       	ldi	r24, 0x0B	; 11
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9b bd       	out	0x2b, r25	; 43
     e94:	8a bd       	out	0x2a, r24	; 42
     e96:	83 ce       	rjmp	.-762    	; 0xb9e <play_note+0x22>
            else {OCR1A=D8;}
                break;
            case 'E': if(flat){OCR1A=Eb8;}
            else {OCR1A=E8;}
                break;
            case 'F': OCR1A=F8;
     e98:	82 e1       	ldi	r24, 0x12	; 18
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9b bd       	out	0x2b, r25	; 43
     e9e:	8a bd       	out	0x2a, r24	; 42
                break;
     ea0:	7e ce       	rjmp	.-772    	; 0xb9e <play_note+0x22>
            case 'C': OCR1A=C0;
                break;
            case 'D': if(flat){OCR1A=Db0;}
            else {OCR1A=D0;}
                break;
            case 'E': if(flat){OCR1A=Eb0;}
     ea2:	66 23       	and	r22, r22
     ea4:	09 f4       	brne	.+2      	; 0xea8 <play_note+0x32c>
     ea6:	9b c0       	rjmp	.+310    	; 0xfde <play_note+0x462>
     ea8:	89 e1       	ldi	r24, 0x19	; 25
     eaa:	99 e1       	ldi	r25, 0x19	; 25
     eac:	9b bd       	out	0x2b, r25	; 43
     eae:	8a bd       	out	0x2a, r24	; 42
     eb0:	76 ce       	rjmp	.-788    	; 0xb9e <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb0;}
            else {OCR1A=B0;}
                break;
            case 'C': OCR1A=C0;
                break;
            case 'D': if(flat){OCR1A=Db0;}
     eb2:	66 23       	and	r22, r22
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <play_note+0x33c>
     eb6:	29 c1       	rjmp	.+594    	; 0x110a <__stack+0xb>
     eb8:	80 e3       	ldi	r24, 0x30	; 48
     eba:	9c e1       	ldi	r25, 0x1C	; 28
     ebc:	9b bd       	out	0x2b, r25	; 43
     ebe:	8a bd       	out	0x2a, r24	; 42
     ec0:	6e ce       	rjmp	.-804    	; 0xb9e <play_note+0x22>
            else {OCR1A=A0;}
                break;
            case 'B': if(flat){OCR1A=Bb0;}
            else {OCR1A=B0;}
                break;
            case 'C': OCR1A=C0;
     ec2:	8c ed       	ldi	r24, 0xDC	; 220
     ec4:	9d e1       	ldi	r25, 0x1D	; 29
     ec6:	9b bd       	out	0x2b, r25	; 43
     ec8:	8a bd       	out	0x2a, r24	; 42
                break;
     eca:	69 ce       	rjmp	.-814    	; 0xb9e <play_note+0x22>
            else {OCR1A=A7;}
                break;
            case 'B': if(flat){OCR1A=Bb7;}
            else {OCR1A=B7;}
                break;
            case 'C': OCR1A=C7;
     ecc:	8a e3       	ldi	r24, 0x3A	; 58
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9b bd       	out	0x2b, r25	; 43
     ed2:	8a bd       	out	0x2a, r24	; 42
                break;
     ed4:	64 ce       	rjmp	.-824    	; 0xb9e <play_note+0x22>
            break;
        case 7: switch (note) {
            case 'A': if(flat){OCR1A=Ab7;}
            else {OCR1A=A7;}
                break;
            case 'B': if(flat){OCR1A=Bb7;}
     ed6:	66 23       	and	r22, r22
     ed8:	09 f4       	brne	.+2      	; 0xedc <play_note+0x360>
     eda:	35 c1       	rjmp	.+618    	; 0x1146 <__stack+0x47>
     edc:	80 e2       	ldi	r24, 0x20	; 32
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	9b bd       	out	0x2b, r25	; 43
     ee2:	8a bd       	out	0x2a, r24	; 42
     ee4:	5c ce       	rjmp	.-840    	; 0xb9e <play_note+0x22>
            else {OCR1A=G6;}
                break;
        } 
            break;
        case 7: switch (note) {
            case 'A': if(flat){OCR1A=Ab7;}
     ee6:	66 23       	and	r22, r22
     ee8:	09 f4       	brne	.+2      	; 0xeec <play_note+0x370>
     eea:	32 c1       	rjmp	.+612    	; 0x1150 <__stack+0x51>
     eec:	84 e2       	ldi	r24, 0x24	; 36
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9b bd       	out	0x2b, r25	; 43
     ef2:	8a bd       	out	0x2a, r24	; 42
     ef4:	54 ce       	rjmp	.-856    	; 0xb9e <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb7;}
            else {OCR1A=E7;}
                break;
            case 'F': OCR1A=F7;
                break;
            case 'G': if(flat){OCR1A=Gb7;}
     ef6:	66 23       	and	r22, r22
     ef8:	09 f4       	brne	.+2      	; 0xefc <play_note+0x380>
     efa:	76 c0       	rjmp	.+236    	; 0xfe8 <play_note+0x46c>
     efc:	89 e2       	ldi	r24, 0x29	; 41
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9b bd       	out	0x2b, r25	; 43
     f02:	8a bd       	out	0x2a, r24	; 42
     f04:	4c ce       	rjmp	.-872    	; 0xb9e <play_note+0x22>
            case 'C': OCR1A=C7;
                break;
            case 'D': if(flat){OCR1A=Db7;}
            else {OCR1A=D7;}
                break;
            case 'E': if(flat){OCR1A=Eb7;}
     f06:	66 23       	and	r22, r22
     f08:	09 f4       	brne	.+2      	; 0xf0c <play_note+0x390>
     f0a:	78 c0       	rjmp	.+240    	; 0xffc <play_note+0x480>
     f0c:	81 e3       	ldi	r24, 0x31	; 49
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9b bd       	out	0x2b, r25	; 43
     f12:	8a bd       	out	0x2a, r24	; 42
     f14:	44 ce       	rjmp	.-888    	; 0xb9e <play_note+0x22>
            else {OCR1A=E7;}
                break;
            case 'F': OCR1A=F7;
     f16:	8b e2       	ldi	r24, 0x2B	; 43
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9b bd       	out	0x2b, r25	; 43
     f1c:	8a bd       	out	0x2a, r24	; 42
                break;
     f1e:	3f ce       	rjmp	.-898    	; 0xb9e <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb7;}
            else {OCR1A=B7;}
                break;
            case 'C': OCR1A=C7;
                break;
            case 'D': if(flat){OCR1A=Db7;}
     f20:	66 23       	and	r22, r22
     f22:	09 f4       	brne	.+2      	; 0xf26 <play_note+0x3aa>
     f24:	93 c0       	rjmp	.+294    	; 0x104c <play_note+0x4d0>
     f26:	87 e3       	ldi	r24, 0x37	; 55
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	9b bd       	out	0x2b, r25	; 43
     f2c:	8a bd       	out	0x2a, r24	; 42
     f2e:	37 ce       	rjmp	.-914    	; 0xb9e <play_note+0x22>
            case 'C': OCR1A=C8;
                break;
            case 'D': if(flat){OCR1A=Db8;}
            else {OCR1A=D8;}
                break;
            case 'E': if(flat){OCR1A=Eb8;}
     f30:	66 23       	and	r22, r22
     f32:	09 f4       	brne	.+2      	; 0xf36 <play_note+0x3ba>
     f34:	4f c0       	rjmp	.+158    	; 0xfd4 <play_note+0x458>
     f36:	88 e1       	ldi	r24, 0x18	; 24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9b bd       	out	0x2b, r25	; 43
     f3c:	8a bd       	out	0x2a, r24	; 42
     f3e:	2f ce       	rjmp	.-930    	; 0xb9e <play_note+0x22>
            else {OCR1A=G1;}
                break;
        }
            break;
        case 2: switch (note) {
            case 'A': if(flat){OCR1A=Ab2;}
     f40:	66 23       	and	r22, r22
     f42:	09 f4       	brne	.+2      	; 0xf46 <play_note+0x3ca>
     f44:	f6 c0       	rjmp	.+492    	; 0x1132 <__stack+0x33>
     f46:	82 eb       	ldi	r24, 0xB2	; 178
     f48:	94 e0       	ldi	r25, 0x04	; 4
     f4a:	9b bd       	out	0x2b, r25	; 43
     f4c:	8a bd       	out	0x2a, r24	; 42
     f4e:	27 ce       	rjmp	.-946    	; 0xb9e <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb1;}
            else {OCR1A=E1;}
                break;
            case 'F': OCR1A=F1;
                break;
            case 'G': if(flat){OCR1A=Gb1;}
     f50:	66 23       	and	r22, r22
     f52:	09 f4       	brne	.+2      	; 0xf56 <play_note+0x3da>
     f54:	16 c1       	rjmp	.+556    	; 0x1182 <__stack+0x83>
     f56:	8d e8       	ldi	r24, 0x8D	; 141
     f58:	9a e0       	ldi	r25, 0x0A	; 10
     f5a:	9b bd       	out	0x2b, r25	; 43
     f5c:	8a bd       	out	0x2a, r24	; 42
     f5e:	1f ce       	rjmp	.-962    	; 0xb9e <play_note+0x22>
            case 'B': if(flat){OCR1A=Bb1;}
            else {OCR1A=B1;}
                break;
            case 'C': OCR1A=C1;
                break;
            case 'D': if(flat){OCR1A=Db1;}
     f60:	66 23       	and	r22, r22
     f62:	09 f4       	brne	.+2      	; 0xf66 <play_note+0x3ea>
     f64:	d7 c0       	rjmp	.+430    	; 0x1114 <__stack+0x15>
     f66:	86 e1       	ldi	r24, 0x16	; 22
     f68:	9e e0       	ldi	r25, 0x0E	; 14
     f6a:	9b bd       	out	0x2b, r25	; 43
     f6c:	8a bd       	out	0x2a, r24	; 42
     f6e:	17 ce       	rjmp	.-978    	; 0xb9e <play_note+0x22>
    switch (octave) {
        case 0: switch (note) {
            case 'A': if(flat){OCR1A=Ab0;}
            else {OCR1A=A0;}
                break;
            case 'B': if(flat){OCR1A=Bb0;}
     f70:	66 23       	and	r22, r22
     f72:	09 f4       	brne	.+2      	; 0xf76 <play_note+0x3fa>
     f74:	f7 c0       	rjmp	.+494    	; 0x1164 <__stack+0x65>
     f76:	80 ec       	ldi	r24, 0xC0	; 192
     f78:	90 e1       	ldi	r25, 0x10	; 16
     f7a:	9b bd       	out	0x2b, r25	; 43
     f7c:	8a bd       	out	0x2a, r24	; 42
     f7e:	0f ce       	rjmp	.-994    	; 0xb9e <play_note+0x22>
            break;
        case 2: switch (note) {
            case 'A': if(flat){OCR1A=Ab2;}
            else {OCR1A=A2;}
                break;
            case 'B': if(flat){OCR1A=Bb2;}
     f80:	66 23       	and	r22, r22
     f82:	09 f4       	brne	.+2      	; 0xf86 <play_note+0x40a>
     f84:	d1 c0       	rjmp	.+418    	; 0x1128 <__stack+0x29>
     f86:	8f e2       	ldi	r24, 0x2F	; 47
     f88:	94 e0       	ldi	r25, 0x04	; 4
     f8a:	9b bd       	out	0x2b, r25	; 43
     f8c:	8a bd       	out	0x2a, r24	; 42
     f8e:	07 ce       	rjmp	.-1010   	; 0xb9e <play_note+0x22>
            else {OCR1A=G0;}
                break;
        }
            break;
        case 1: switch (note) {
            case 'A': if(flat){OCR1A=Ab1;}
     f90:	66 23       	and	r22, r22
     f92:	09 f4       	brne	.+2      	; 0xf96 <play_note+0x41a>
     f94:	f1 c0       	rjmp	.+482    	; 0x1178 <__stack+0x79>
     f96:	87 e6       	ldi	r24, 0x67	; 103
     f98:	99 e0       	ldi	r25, 0x09	; 9
     f9a:	9b bd       	out	0x2b, r25	; 43
     f9c:	8a bd       	out	0x2a, r24	; 42
     f9e:	ff cd       	rjmp	.-1026   	; 0xb9e <play_note+0x22>
            case 'C': OCR1A=C1;
                break;
            case 'D': if(flat){OCR1A=Db1;}
            else {OCR1A=D1;}
                break;
            case 'E': if(flat){OCR1A=Eb1;}
     fa0:	66 23       	and	r22, r22
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <play_note+0x42a>
     fa4:	cb c0       	rjmp	.+406    	; 0x113c <__stack+0x3d>
     fa6:	8d e8       	ldi	r24, 0x8D	; 141
     fa8:	9c e0       	ldi	r25, 0x0C	; 12
     faa:	9b bd       	out	0x2b, r25	; 43
     fac:	8a bd       	out	0x2a, r24	; 42
     fae:	f7 cd       	rjmp	.-1042   	; 0xb9e <play_note+0x22>
            else {OCR1A=D0;}
                break;
            case 'E': if(flat){OCR1A=Eb0;}
            else {OCR1A=E0;}
                break;
            case 'F': OCR1A=F0;
     fb0:	8d e5       	ldi	r24, 0x5D	; 93
     fb2:	96 e1       	ldi	r25, 0x16	; 22
     fb4:	9b bd       	out	0x2b, r25	; 43
     fb6:	8a bd       	out	0x2a, r24	; 42
                break;
     fb8:	f2 cd       	rjmp	.-1052   	; 0xb9e <play_note+0x22>
            case 'E': if(flat){OCR1A=Eb2;}
            else {OCR1A=E2;}
                break;
            case 'F': OCR1A=F2;
                break;
            case 'G': if(flat){OCR1A=Gb2;}
     fba:	66 23       	and	r22, r22
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <play_note+0x444>
     fbe:	e6 c0       	rjmp	.+460    	; 0x118c <__stack+0x8d>
     fc0:	86 e4       	ldi	r24, 0x46	; 70
     fc2:	95 e0       	ldi	r25, 0x05	; 5
     fc4:	9b bd       	out	0x2b, r25	; 43
     fc6:	8a bd       	out	0x2a, r24	; 42
     fc8:	ea cd       	rjmp	.-1068   	; 0xb9e <play_note+0x22>
            else {OCR1A=A1;}
                break;
            case 'B': if(flat){OCR1A=Bb1;}
            else {OCR1A=B1;}
                break;
            case 'C': OCR1A=C1;
     fca:	8d ee       	ldi	r24, 0xED	; 237
     fcc:	9e e0       	ldi	r25, 0x0E	; 14
     fce:	9b bd       	out	0x2b, r25	; 43
     fd0:	8a bd       	out	0x2a, r24	; 42
                break;
     fd2:	e5 cd       	rjmp	.-1078   	; 0xb9e <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db8;}
            else {OCR1A=D8;}
                break;
            case 'E': if(flat){OCR1A=Eb8;}
            else {OCR1A=E8;}
     fd4:	85 e1       	ldi	r24, 0x15	; 21
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9b bd       	out	0x2b, r25	; 43
     fda:	8a bd       	out	0x2a, r24	; 42
     fdc:	e0 cd       	rjmp	.-1088   	; 0xb9e <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db0;}
            else {OCR1A=D0;}
                break;
            case 'E': if(flat){OCR1A=Eb0;}
            else {OCR1A=E0;}
     fde:	82 eb       	ldi	r24, 0xB2	; 178
     fe0:	97 e1       	ldi	r25, 0x17	; 23
     fe2:	9b bd       	out	0x2b, r25	; 43
     fe4:	8a bd       	out	0x2a, r24	; 42
     fe6:	db cd       	rjmp	.-1098   	; 0xb9e <play_note+0x22>
            else {OCR1A=E7;}
                break;
            case 'F': OCR1A=F7;
                break;
            case 'G': if(flat){OCR1A=Gb7;}
            else {OCR1A=G7;}
     fe8:	86 e2       	ldi	r24, 0x26	; 38
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9b bd       	out	0x2b, r25	; 43
     fee:	8a bd       	out	0x2a, r24	; 42
     ff0:	d6 cd       	rjmp	.-1108   	; 0xb9e <play_note+0x22>
        case 1: switch (note) {
            case 'A': if(flat){OCR1A=Ab1;}
            else {OCR1A=A1;}
                break;
            case 'B': if(flat){OCR1A=Bb1;}
            else {OCR1A=B1;}
     ff2:	87 ee       	ldi	r24, 0xE7	; 231
     ff4:	97 e0       	ldi	r25, 0x07	; 7
     ff6:	9b bd       	out	0x2b, r25	; 43
     ff8:	8a bd       	out	0x2a, r24	; 42
     ffa:	d1 cd       	rjmp	.-1118   	; 0xb9e <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db7;}
            else {OCR1A=D7;}
                break;
            case 'E': if(flat){OCR1A=Eb7;}
            else {OCR1A=E7;}
     ffc:	8e e2       	ldi	r24, 0x2E	; 46
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9b bd       	out	0x2b, r25	; 43
    1002:	8a bd       	out	0x2a, r24	; 42
    1004:	cc cd       	rjmp	.-1128   	; 0xb9e <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db2;}
            else {OCR1A=D2;}
                break;
            case 'E': if(flat){OCR1A=Eb2;}
            else {OCR1A=E2;}
    1006:	8b ee       	ldi	r24, 0xEB	; 235
    1008:	95 e0       	ldi	r25, 0x05	; 5
    100a:	9b bd       	out	0x2b, r25	; 43
    100c:	8a bd       	out	0x2a, r24	; 42
    100e:	c7 cd       	rjmp	.-1138   	; 0xb9e <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db4;}
            else {OCR1A=D4;}
                break;
            case 'E': if(flat){OCR1A=Eb4;}
            else {OCR1A=E4;}
    1010:	8a e7       	ldi	r24, 0x7A	; 122
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	9b bd       	out	0x2b, r25	; 43
    1016:	8a bd       	out	0x2a, r24	; 42
    1018:	c2 cd       	rjmp	.-1148   	; 0xb9e <play_note+0x22>
        case 6: switch (note) {
            case 'A': if(flat){OCR1A=Ab6;}
            else {OCR1A=A6;}
                break;
            case 'B': if(flat){OCR1A=Bb6;}
            else {OCR1A=B6;}
    101a:	8e e3       	ldi	r24, 0x3E	; 62
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	9b bd       	out	0x2b, r25	; 43
    1020:	8a bd       	out	0x2a, r24	; 42
    1022:	bd cd       	rjmp	.-1158   	; 0xb9e <play_note+0x22>
        case 3: switch (note) {
            case 'A': if(flat){OCR1A=Ab3;}
            else {OCR1A=A3;}
                break;
            case 'B': if(flat){OCR1A=Bb3;}
            else {OCR1A=B3;}
    1024:	89 ef       	ldi	r24, 0xF9	; 249
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	9b bd       	out	0x2b, r25	; 43
    102a:	8a bd       	out	0x2a, r24	; 42
    102c:	b8 cd       	rjmp	.-1168   	; 0xb9e <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db5;}
            else {OCR1A=D5;}
                break;
            case 'E': if(flat){OCR1A=Eb5;}
            else {OCR1A=E5;}
    102e:	8c eb       	ldi	r24, 0xBC	; 188
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	9b bd       	out	0x2b, r25	; 43
    1034:	8a bd       	out	0x2a, r24	; 42
    1036:	b3 cd       	rjmp	.-1178   	; 0xb9e <play_note+0x22>
    beat = 0;             //reset the beat counter
    max_beat = duration;  //set the max beat
    switch (octave) {
        case 0: switch (note) {
            case 'A': if(flat){OCR1A=Ab0;}
            else {OCR1A=A0;}
    1038:	80 ec       	ldi	r24, 0xC0	; 192
    103a:	91 e1       	ldi	r25, 0x11	; 17
    103c:	9b bd       	out	0x2b, r25	; 43
    103e:	8a bd       	out	0x2a, r24	; 42
    1040:	ae cd       	rjmp	.-1188   	; 0xb9e <play_note+0x22>
                break;
        } 
            break;
        case 8: switch (note) {
            case 'A': if(flat){OCR1A=Ab8;}
            else {OCR1A=A8;}
    1042:	89 e0       	ldi	r24, 0x09	; 9
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9b bd       	out	0x2b, r25	; 43
    1048:	8a bd       	out	0x2a, r24	; 42
    104a:	a9 cd       	rjmp	.-1198   	; 0xb9e <play_note+0x22>
            else {OCR1A=B7;}
                break;
            case 'C': OCR1A=C7;
                break;
            case 'D': if(flat){OCR1A=Db7;}
            else {OCR1A=D7;}
    104c:	84 e3       	ldi	r24, 0x34	; 52
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9b bd       	out	0x2b, r25	; 43
    1052:	8a bd       	out	0x2a, r24	; 42
    1054:	a4 cd       	rjmp	.-1208   	; 0xb9e <play_note+0x22>
                break;
        } 
            break;
        case 5: switch (note) {
            case 'A': if(flat){OCR1A=Ab5;}
            else {OCR1A=A5;}
    1056:	8d e8       	ldi	r24, 0x8D	; 141
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9b bd       	out	0x2b, r25	; 43
    105c:	8a bd       	out	0x2a, r24	; 42
    105e:	9f cd       	rjmp	.-1218   	; 0xb9e <play_note+0x22>
            else {OCR1A=E5;}
                break;
            case 'F': OCR1A=F5;
                break;
            case 'G': if(flat){OCR1A=Gb5;}
            else {OCR1A=G5;}
    1060:	8e e9       	ldi	r24, 0x9E	; 158
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9b bd       	out	0x2b, r25	; 43
    1066:	8a bd       	out	0x2a, r24	; 42
    1068:	9a cd       	rjmp	.-1228   	; 0xb9e <play_note+0x22>
        case 5: switch (note) {
            case 'A': if(flat){OCR1A=Ab5;}
            else {OCR1A=A5;}
                break;
            case 'B': if(flat){OCR1A=Bb5;}
            else {OCR1A=B5;}
    106a:	8d e7       	ldi	r24, 0x7D	; 125
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9b bd       	out	0x2b, r25	; 43
    1070:	8a bd       	out	0x2a, r24	; 42
    1072:	95 cd       	rjmp	.-1238   	; 0xb9e <play_note+0x22>
                break;
            case 'C': OCR1A=C5;
                break;
            case 'D': if(flat){OCR1A=Db5;}
            else {OCR1A=D5;}
    1074:	83 ed       	ldi	r24, 0xD3	; 211
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9b bd       	out	0x2b, r25	; 43
    107a:	8a bd       	out	0x2a, r24	; 42
    107c:	90 cd       	rjmp	.-1248   	; 0xb9e <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db6;}
            else {OCR1A=D6;}
                break;
            case 'E': if(flat){OCR1A=Eb6;}
            else {OCR1A=E6;}
    107e:	8d e5       	ldi	r24, 0x5D	; 93
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9b bd       	out	0x2b, r25	; 43
    1084:	8a bd       	out	0x2a, r24	; 42
    1086:	8b cd       	rjmp	.-1258   	; 0xb9e <play_note+0x22>
                break;
        } 
            break;
        case 6: switch (note) {
            case 'A': if(flat){OCR1A=Ab6;}
            else {OCR1A=A6;}
    1088:	86 e4       	ldi	r24, 0x46	; 70
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9b bd       	out	0x2b, r25	; 43
    108e:	8a bd       	out	0x2a, r24	; 42
    1090:	86 cd       	rjmp	.-1268   	; 0xb9e <play_note+0x22>
            else {OCR1A=B6;}
                break;
            case 'C': OCR1A=C6;
                break;
            case 'D': if(flat){OCR1A=Db6;}
            else {OCR1A=D6;}
    1092:	89 e6       	ldi	r24, 0x69	; 105
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9b bd       	out	0x2b, r25	; 43
    1098:	8a bd       	out	0x2a, r24	; 42
    109a:	81 cd       	rjmp	.-1278   	; 0xb9e <play_note+0x22>
            else {OCR1A=E6;}
                break;
            case 'F': OCR1A=F6;
                break;
            case 'G': if(flat){OCR1A=Gb6;}
            else {OCR1A=G6;}
    109c:	8e e4       	ldi	r24, 0x4E	; 78
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9b bd       	out	0x2b, r25	; 43
    10a2:	8a bd       	out	0x2a, r24	; 42
    10a4:	7c cd       	rjmp	.-1288   	; 0xb9e <play_note+0x22>
                break;
        }
            break;
        case 4: switch (note) {
            case 'A': if(flat){OCR1A=Ab4;}
            else {OCR1A=A4;}
    10a6:	8b e1       	ldi	r24, 0x1B	; 27
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	9b bd       	out	0x2b, r25	; 43
    10ac:	8a bd       	out	0x2a, r24	; 42
    10ae:	77 cd       	rjmp	.-1298   	; 0xb9e <play_note+0x22>
            else {OCR1A=B2;}
                break;
            case 'C': OCR1A=C2;
                break;
            case 'D': if(flat){OCR1A=Db2;}
            else {OCR1A=D2;}
    10b0:	85 ea       	ldi	r24, 0xA5	; 165
    10b2:	96 e0       	ldi	r25, 0x06	; 6
    10b4:	9b bd       	out	0x2b, r25	; 43
    10b6:	8a bd       	out	0x2a, r24	; 42
    10b8:	72 cd       	rjmp	.-1308   	; 0xb9e <play_note+0x22>
            else {OCR1A=E3;}
                break;
            case 'F': OCR1A=F3;
                break;
            case 'G': if(flat){OCR1A=Gb3;}
            else {OCR1A=G3;}
    10ba:	8c e7       	ldi	r24, 0x7C	; 124
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	9b bd       	out	0x2b, r25	; 43
    10c0:	8a bd       	out	0x2a, r24	; 42
    10c2:	6d cd       	rjmp	.-1318   	; 0xb9e <play_note+0x22>
            else {OCR1A=B4;}
                break;
            case 'C': OCR1A=C4;
                break;
            case 'D': if(flat){OCR1A=Db4;}
            else {OCR1A=D4;}
    10c4:	88 ea       	ldi	r24, 0xA8	; 168
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	9b bd       	out	0x2b, r25	; 43
    10ca:	8a bd       	out	0x2a, r24	; 42
    10cc:	68 cd       	rjmp	.-1328   	; 0xb9e <play_note+0x22>
            else {OCR1A=B3;}
                break;
            case 'C': OCR1A=C3;
                break;
            case 'D': if(flat){OCR1A=Db3;}
            else {OCR1A=D3;}
    10ce:	82 e5       	ldi	r24, 0x52	; 82
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	9b bd       	out	0x2b, r25	; 43
    10d4:	8a bd       	out	0x2a, r24	; 42
    10d6:	63 cd       	rjmp	.-1338   	; 0xb9e <play_note+0x22>
        case 4: switch (note) {
            case 'A': if(flat){OCR1A=Ab4;}
            else {OCR1A=A4;}
                break;
            case 'B': if(flat){OCR1A=Bb4;}
            else {OCR1A=B4;}
    10d8:	8c ef       	ldi	r24, 0xFC	; 252
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9b bd       	out	0x2b, r25	; 43
    10de:	8a bd       	out	0x2a, r24	; 42
    10e0:	5e cd       	rjmp	.-1348   	; 0xb9e <play_note+0x22>
                break;
        }
            break;
        case 3: switch (note) {
            case 'A': if(flat){OCR1A=Ab3;}
            else {OCR1A=A3;}
    10e2:	87 e3       	ldi	r24, 0x37	; 55
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	9b bd       	out	0x2b, r25	; 43
    10e8:	8a bd       	out	0x2a, r24	; 42
    10ea:	59 cd       	rjmp	.-1358   	; 0xb9e <play_note+0x22>
            else {OCR1A=E4;}
                break;
            case 'F': OCR1A=F4;
                break;
            case 'G': if(flat){OCR1A=Gb4;}
            else {OCR1A=G4;}
    10ec:	8d e3       	ldi	r24, 0x3D	; 61
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	9b bd       	out	0x2b, r25	; 43
    10f2:	8a bd       	out	0x2a, r24	; 42
    10f4:	54 cd       	rjmp	.-1368   	; 0xb9e <play_note+0x22>
            else {OCR1A=B8;}
                break;
            case 'C': OCR1A=C8;
                break;
            case 'D': if(flat){OCR1A=Db8;}
            else {OCR1A=D8;}
    10f6:	89 e1       	ldi	r24, 0x19	; 25
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9b bd       	out	0x2b, r25	; 43
    10fc:	8a bd       	out	0x2a, r24	; 42
    10fe:	4f cd       	rjmp	.-1378   	; 0xb9e <play_note+0x22>
        case 8: switch (note) {
            case 'A': if(flat){OCR1A=Ab8;}
            else {OCR1A=A8;}
                break;
            case 'B': if(flat){OCR1A=Bb8;}
            else {OCR1A=B8;}
    1100:	85 e0       	ldi	r24, 0x05	; 5
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9b bd       	out	0x2b, r25	; 43
    1106:	8a bd       	out	0x2a, r24	; 42
    1108:	4a cd       	rjmp	.-1388   	; 0xb9e <play_note+0x22>
            else {OCR1A=B0;}
                break;
            case 'C': OCR1A=C0;
                break;
            case 'D': if(flat){OCR1A=Db0;}
            else {OCR1A=D0;}
    110a:	8a e9       	ldi	r24, 0x9A	; 154
    110c:	9a e1       	ldi	r25, 0x1A	; 26
    110e:	9b bd       	out	0x2b, r25	; 43
    1110:	8a bd       	out	0x2a, r24	; 42
    1112:	45 cd       	rjmp	.-1398   	; 0xb9e <play_note+0x22>
            else {OCR1A=B1;}
                break;
            case 'C': OCR1A=C1;
                break;
            case 'D': if(flat){OCR1A=Db1;}
            else {OCR1A=D1;}
    1114:	8c e4       	ldi	r24, 0x4C	; 76
    1116:	9d e0       	ldi	r25, 0x0D	; 13
    1118:	9b bd       	out	0x2b, r25	; 43
    111a:	8a bd       	out	0x2a, r24	; 42
    111c:	40 cd       	rjmp	.-1408   	; 0xb9e <play_note+0x22>
            else {OCR1A=E0;}
                break;
            case 'F': OCR1A=F0;
                break;
            case 'G': if(flat){OCR1A=Gb0;}
            else {OCR1A=G0;}
    111e:	8d ee       	ldi	r24, 0xED	; 237
    1120:	93 e1       	ldi	r25, 0x13	; 19
    1122:	9b bd       	out	0x2b, r25	; 43
    1124:	8a bd       	out	0x2a, r24	; 42
    1126:	3b cd       	rjmp	.-1418   	; 0xb9e <play_note+0x22>
        case 2: switch (note) {
            case 'A': if(flat){OCR1A=Ab2;}
            else {OCR1A=A2;}
                break;
            case 'B': if(flat){OCR1A=Bb2;}
            else {OCR1A=B2;}
    1128:	83 ef       	ldi	r24, 0xF3	; 243
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	9b bd       	out	0x2b, r25	; 43
    112e:	8a bd       	out	0x2a, r24	; 42
    1130:	36 cd       	rjmp	.-1428   	; 0xb9e <play_note+0x22>
                break;
        }
            break;
        case 2: switch (note) {
            case 'A': if(flat){OCR1A=Ab2;}
            else {OCR1A=A2;}
    1132:	8f e6       	ldi	r24, 0x6F	; 111
    1134:	94 e0       	ldi	r25, 0x04	; 4
    1136:	9b bd       	out	0x2b, r25	; 43
    1138:	8a bd       	out	0x2a, r24	; 42
    113a:	31 cd       	rjmp	.-1438   	; 0xb9e <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db1;}
            else {OCR1A=D1;}
                break;
            case 'E': if(flat){OCR1A=Eb1;}
            else {OCR1A=E1;}
    113c:	88 ed       	ldi	r24, 0xD8	; 216
    113e:	9b e0       	ldi	r25, 0x0B	; 11
    1140:	9b bd       	out	0x2b, r25	; 43
    1142:	8a bd       	out	0x2a, r24	; 42
    1144:	2c cd       	rjmp	.-1448   	; 0xb9e <play_note+0x22>
        case 7: switch (note) {
            case 'A': if(flat){OCR1A=Ab7;}
            else {OCR1A=A7;}
                break;
            case 'B': if(flat){OCR1A=Bb7;}
            else {OCR1A=B7;}
    1146:	8e e1       	ldi	r24, 0x1E	; 30
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9b bd       	out	0x2b, r25	; 43
    114c:	8a bd       	out	0x2a, r24	; 42
    114e:	27 cd       	rjmp	.-1458   	; 0xb9e <play_note+0x22>
                break;
        } 
            break;
        case 7: switch (note) {
            case 'A': if(flat){OCR1A=Ab7;}
            else {OCR1A=A7;}
    1150:	82 e2       	ldi	r24, 0x22	; 34
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9b bd       	out	0x2b, r25	; 43
    1156:	8a bd       	out	0x2a, r24	; 42
    1158:	22 cd       	rjmp	.-1468   	; 0xb9e <play_note+0x22>
                break;
            case 'D': if(flat){OCR1A=Db3;}
            else {OCR1A=D3;}
                break;
            case 'E': if(flat){OCR1A=Eb3;}
            else {OCR1A=E3;}
    115a:	85 ef       	ldi	r24, 0xF5	; 245
    115c:	92 e0       	ldi	r25, 0x02	; 2
    115e:	9b bd       	out	0x2b, r25	; 43
    1160:	8a bd       	out	0x2a, r24	; 42
    1162:	1d cd       	rjmp	.-1478   	; 0xb9e <play_note+0x22>
        case 0: switch (note) {
            case 'A': if(flat){OCR1A=Ab0;}
            else {OCR1A=A0;}
                break;
            case 'B': if(flat){OCR1A=Bb0;}
            else {OCR1A=B0;}
    1164:	80 ed       	ldi	r24, 0xD0	; 208
    1166:	9f e0       	ldi	r25, 0x0F	; 15
    1168:	9b bd       	out	0x2b, r25	; 43
    116a:	8a bd       	out	0x2a, r24	; 42
    116c:	18 cd       	rjmp	.-1488   	; 0xb9e <play_note+0x22>
            else {OCR1A=E8;}
                break;
            case 'F': OCR1A=F8;
                break;
            case 'G': if(flat){OCR1A=Gb8;}
            else {OCR1A=G8;}
    116e:	8d e0       	ldi	r24, 0x0D	; 13
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9b bd       	out	0x2b, r25	; 43
    1174:	8a bd       	out	0x2a, r24	; 42
    1176:	13 cd       	rjmp	.-1498   	; 0xb9e <play_note+0x22>
                break;
        }
            break;
        case 1: switch (note) {
            case 'A': if(flat){OCR1A=Ab1;}
            else {OCR1A=A1;}
    1178:	8f ed       	ldi	r24, 0xDF	; 223
    117a:	98 e0       	ldi	r25, 0x08	; 8
    117c:	9b bd       	out	0x2b, r25	; 43
    117e:	8a bd       	out	0x2a, r24	; 42
    1180:	0e cd       	rjmp	.-1508   	; 0xb9e <play_note+0x22>
            else {OCR1A=E1;}
                break;
            case 'F': OCR1A=F1;
                break;
            case 'G': if(flat){OCR1A=Gb1;}
            else {OCR1A=G1;}
    1182:	86 ef       	ldi	r24, 0xF6	; 246
    1184:	99 e0       	ldi	r25, 0x09	; 9
    1186:	9b bd       	out	0x2b, r25	; 43
    1188:	8a bd       	out	0x2a, r24	; 42
    118a:	09 cd       	rjmp	.-1518   	; 0xb9e <play_note+0x22>
            else {OCR1A=E2;}
                break;
            case 'F': OCR1A=F2;
                break;
            case 'G': if(flat){OCR1A=Gb2;}
            else {OCR1A=G2;}
    118c:	8a ef       	ldi	r24, 0xFA	; 250
    118e:	94 e0       	ldi	r25, 0x04	; 4
    1190:	9b bd       	out	0x2b, r25	; 43
    1192:	8a bd       	out	0x2a, r24	; 42
    1194:	04 cd       	rjmp	.-1528   	; 0xb9e <play_note+0x22>

00001196 <song0>:
volatile uint16_t max_beat;
volatile uint8_t  notes;
volatile uint8_t music_off_flag;  //for snooze function

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
    switch (note) {
    1196:	86 34       	cpi	r24, 0x46	; 70
    1198:	91 05       	cpc	r25, r1
    119a:	20 f0       	brcs	.+8      	; 0x11a4 <song0+0xe>
            break;
        case 68: play_note('F', 0, 4, 24);
            break;
        case 69: play_rest(8);
            break;
        default: notes=-1;
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	80 93 cc 01 	sts	0x01CC, r24
    11a2:	08 95       	ret
volatile uint16_t max_beat;
volatile uint8_t  notes;
volatile uint8_t music_off_flag;  //for snooze function

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
    switch (note) {
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 57       	subi	r30, 0x72	; 114
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            break;
        case 55: play_note('A', 0, 4, 2);
            break;
        case 56: play_note('B', 1, 4, 6);
            break;
        case 57: play_note('A', 0, 4, 2);
    11ae:	22 e0       	ldi	r18, 0x02	; 2
    11b0:	44 e0       	ldi	r20, 0x04	; 4
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	81 e4       	ldi	r24, 0x41	; 65
    11b6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 45: play_note('A', 0, 4, 6);
            break;
        case 46: play_note('A', 1, 4, 2);
            break;
        case 47: play_note('A', 0, 4, 6);
    11ba:	26 e0       	ldi	r18, 0x06	; 6
    11bc:	44 e0       	ldi	r20, 0x04	; 4
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	81 e4       	ldi	r24, 0x41	; 65
    11c2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 48: play_note('A', 1, 4, 2);
    11c6:	22 e0       	ldi	r18, 0x02	; 2
    11c8:	44 e0       	ldi	r20, 0x04	; 4
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	81 e4       	ldi	r24, 0x41	; 65
    11ce:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 51: play_note('G', 1, 4, 8);
            break;
        case 52: play_note('G', 0, 4, 8);
            break;
        case 53: play_note('D', 0, 4, 8);
    11d2:	28 e0       	ldi	r18, 0x08	; 8
    11d4:	44 e0       	ldi	r20, 0x04	; 4
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	84 e4       	ldi	r24, 0x44	; 68
    11da:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 48: play_note('A', 1, 4, 2);
            break;
        case 49: play_note('A', 0, 4, 16);
            break;
        case 50: play_note('F', 0, 4, 8);
    11de:	28 e0       	ldi	r18, 0x08	; 8
    11e0:	44 e0       	ldi	r20, 0x04	; 4
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	86 e4       	ldi	r24, 0x46	; 70
    11e6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 54: play_note('B', 1, 4, 6);
            break;
        case 55: play_note('A', 0, 4, 2);
            break;
        case 56: play_note('B', 1, 4, 6);
    11ea:	26 e0       	ldi	r18, 0x06	; 6
    11ec:	44 e0       	ldi	r20, 0x04	; 4
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	82 e4       	ldi	r24, 0x42	; 66
    11f2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 42: play_note('E', 0, 4, 8);
            break;
        case 43: play_note('D', 0, 4, 8);
            break;
        case 44: play_note('C', 0, 4, 8);
    11f6:	28 e0       	ldi	r18, 0x08	; 8
    11f8:	44 e0       	ldi	r20, 0x04	; 4
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	83 e4       	ldi	r24, 0x43	; 67
    11fe:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 64: play_note('C', 0, 5, 4);
            break;
        case 65: play_note('D', 0, 5, 4);
            break;
        case 66: play_note('A', 0, 4, 8);
    1202:	28 e0       	ldi	r18, 0x08	; 8
    1204:	44 e0       	ldi	r20, 0x04	; 4
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	81 e4       	ldi	r24, 0x41	; 65
    120a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 67: play_note('G', 0, 4, 8);
    120e:	28 e0       	ldi	r18, 0x08	; 8
    1210:	44 e0       	ldi	r20, 0x04	; 4
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	87 e4       	ldi	r24, 0x47	; 71
    1216:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 40: play_rest(8);
            break;
        case 41: play_note('F', 0, 4, 8);
            break;
        case 42: play_note('E', 0, 4, 8);
    121a:	28 e0       	ldi	r18, 0x08	; 8
    121c:	44 e0       	ldi	r20, 0x04	; 4
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	85 e4       	ldi	r24, 0x45	; 69
    1222:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;//phrase
        case 59: play_note('D', 0, 4, 16);
            break;
        case 60: play_note('D', 0, 5, 16);
            break;
        case 61: play_note('A', 0, 4, 16);
    1226:	20 e1       	ldi	r18, 0x10	; 16
    1228:	44 e0       	ldi	r20, 0x04	; 4
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	81 e4       	ldi	r24, 0x41	; 65
    122e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 62: play_note('C', 0, 5, 16);
            break;
        case 63: play_note('B', 1, 4, 8);
            break;
        case 64: play_note('C', 0, 5, 4);
    1232:	24 e0       	ldi	r18, 0x04	; 4
    1234:	45 e0       	ldi	r20, 0x05	; 5
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	83 e4       	ldi	r24, 0x43	; 67
    123a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 65: play_note('D', 0, 5, 4);
    123e:	24 e0       	ldi	r18, 0x04	; 4
    1240:	45 e0       	ldi	r20, 0x05	; 5
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	84 e4       	ldi	r24, 0x44	; 68
    1246:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    124a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    124c:	10 92 d7 01 	sts	0x01D7, r1
    1250:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1254:	88 e0       	ldi	r24, 0x08	; 8
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	90 93 d4 01 	sts	0x01D4, r25
    125c:	80 93 d3 01 	sts	0x01D3, r24
    1260:	08 95       	ret
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1262:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1264:	10 92 d7 01 	sts	0x01D7, r1
    1268:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	90 93 d4 01 	sts	0x01D4, r25
    1274:	80 93 d3 01 	sts	0x01D3, r24
    1278:	08 95       	ret
            break;
        case 56: play_note('B', 1, 4, 6);
            break;
        case 57: play_note('A', 0, 4, 2);
            break;
        case 58: play_note('B', 1, 4, 16);
    127a:	20 e1       	ldi	r18, 0x10	; 16
    127c:	44 e0       	ldi	r20, 0x04	; 4
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	82 e4       	ldi	r24, 0x42	; 66
    1282:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 61: play_note('A', 0, 4, 16);
            break;
        case 62: play_note('C', 0, 5, 16);
            break;
        case 63: play_note('B', 1, 4, 8);
    1286:	28 e0       	ldi	r18, 0x08	; 8
    1288:	44 e0       	ldi	r20, 0x04	; 4
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	82 e4       	ldi	r24, 0x42	; 66
    128e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 37: play_note('G', 0, 4, 8);
            break;
        case 38: play_note('A', 0, 4, 8);
            break;
        case 39: play_note('G', 0, 4, 24);
    1292:	28 e1       	ldi	r18, 0x18	; 24
    1294:	44 e0       	ldi	r20, 0x04	; 4
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	87 e4       	ldi	r24, 0x47	; 71
    129a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 58: play_note('B', 1, 4, 16);
            break;//phrase
        case 59: play_note('D', 0, 4, 16);
            break;
        case 60: play_note('D', 0, 5, 16);
    129e:	20 e1       	ldi	r18, 0x10	; 16
    12a0:	45 e0       	ldi	r20, 0x05	; 5
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	84 e4       	ldi	r24, 0x44	; 68
    12a6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    12aa:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    12ac:	10 92 d7 01 	sts	0x01D7, r1
    12b0:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	90 93 d4 01 	sts	0x01D4, r25
    12bc:	80 93 d3 01 	sts	0x01D3, r24
    12c0:	08 95       	ret
            break;
        case 34: play_note('D', 0, 5, 4);
            break;
        case 35: play_note('B', 0, 4, 8);
            break;
        case 36: play_note('A', 0, 4, 4);
    12c2:	24 e0       	ldi	r18, 0x04	; 4
    12c4:	44 e0       	ldi	r20, 0x04	; 4
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	81 e4       	ldi	r24, 0x41	; 65
    12ca:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 21: play_rest(1); //rest
            break;
        case 22: play_note('G', 1, 4, 4);
            break;
        case 23: play_note('G', 0, 4, 6);
    12ce:	26 e0       	ldi	r18, 0x06	; 6
    12d0:	44 e0       	ldi	r20, 0x04	; 4
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	87 e4       	ldi	r24, 0x47	; 71
    12d6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 20: play_note('G', 0, 4, 7);
            break;
        case 21: play_rest(1); //rest
            break;
        case 22: play_note('G', 1, 4, 4);
    12da:	24 e0       	ldi	r18, 0x04	; 4
    12dc:	44 e0       	ldi	r20, 0x04	; 4
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	87 e4       	ldi	r24, 0x47	; 71
    12e2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 49: play_note('A', 0, 4, 16);
            break;
        case 50: play_note('F', 0, 4, 8);
            break;
        case 51: play_note('G', 1, 4, 8);
    12e6:	28 e0       	ldi	r18, 0x08	; 8
    12e8:	44 e0       	ldi	r20, 0x04	; 4
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	87 e4       	ldi	r24, 0x47	; 71
    12ee:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 16: play_note('A', 0, 4, 2);
            break;
        case 17: play_note('B', 1, 4, 16);
            break;
        case 18: play_note('G', 0, 4, 3);
    12f2:	23 e0       	ldi	r18, 0x03	; 3
    12f4:	44 e0       	ldi	r20, 0x04	; 4
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	87 e4       	ldi	r24, 0x47	; 71
    12fa:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 57: play_note('A', 0, 4, 2);
            break;
        case 58: play_note('B', 1, 4, 16);
            break;//phrase
        case 59: play_note('D', 0, 4, 16);
    12fe:	20 e1       	ldi	r18, 0x10	; 16
    1300:	44 e0       	ldi	r20, 0x04	; 4
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	84 e4       	ldi	r24, 0x44	; 68
    1306:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 60: play_note('D', 0, 5, 16);
            break;
        case 61: play_note('A', 0, 4, 16);
            break;
        case 62: play_note('C', 0, 5, 16);
    130a:	20 e1       	ldi	r18, 0x10	; 16
    130c:	45 e0       	ldi	r20, 0x05	; 5
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	83 e4       	ldi	r24, 0x43	; 67
    1312:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 29: play_note('A', 1, 4, 4);
            break;
        case 30: play_note('A', 0, 4, 6);
            break;
        case 31: play_note('B', 1, 4, 2);
    1316:	22 e0       	ldi	r18, 0x02	; 2
    1318:	44 e0       	ldi	r20, 0x04	; 4
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	82 e4       	ldi	r24, 0x42	; 66
    131e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 32: play_note('C', 0, 5, 4);
            break;
        case 33: play_note('D', 1, 5, 4);
    1322:	24 e0       	ldi	r18, 0x04	; 4
    1324:	45 e0       	ldi	r20, 0x05	; 5
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	84 e4       	ldi	r24, 0x44	; 68
    132a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 27: play_rest(2);
            break;
        case 28: play_note('A', 0, 4, 8);
            break;
        case 29: play_note('A', 1, 4, 4);
    132e:	24 e0       	ldi	r18, 0x04	; 4
    1330:	44 e0       	ldi	r20, 0x04	; 4
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	81 e4       	ldi	r24, 0x41	; 65
    1336:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 33: play_note('D', 1, 5, 4);
            break;
        case 34: play_note('D', 0, 5, 4);
            break;
        case 35: play_note('B', 0, 4, 8);
    133a:	28 e0       	ldi	r18, 0x08	; 8
    133c:	44 e0       	ldi	r20, 0x04	; 4
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	82 e4       	ldi	r24, 0x42	; 66
    1342:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 66: play_note('A', 0, 4, 8);
            break;
        case 67: play_note('G', 0, 4, 8);
            break;
        case 68: play_note('F', 0, 4, 24);
    1346:	28 e1       	ldi	r18, 0x18	; 24
    1348:	44 e0       	ldi	r20, 0x04	; 4
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	86 e4       	ldi	r24, 0x46	; 70
    134e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 18: play_note('G', 0, 4, 3);
            break;
        case 19: play_rest(1); //rest
            break;
        case 20: play_note('G', 0, 4, 7);
    1352:	27 e0       	ldi	r18, 0x07	; 7
    1354:	44 e0       	ldi	r20, 0x04	; 4
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	87 e4       	ldi	r24, 0x47	; 71
    135a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>

0000135e <song1>:
        default: notes=-1;
    }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
    switch (note) {
    135e:	8f 33       	cpi	r24, 0x3F	; 63
    1360:	91 05       	cpc	r25, r1
    1362:	20 f0       	brcs	.+8      	; 0x136c <song1+0xe>
            break;//bar
        case 61: play_note('A', 1, 3, 16);
            break;
        case 62: play_rest(16);
            break;//bar phrase
        default: notes=-1;
    1364:	8f ef       	ldi	r24, 0xFF	; 255
    1366:	80 93 cc 01 	sts	0x01CC, r24
    136a:	08 95       	ret
        default: notes=-1;
    }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
    switch (note) {
    136c:	fc 01       	movw	r30, r24
    136e:	ec 52       	subi	r30, 0x2C	; 44
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            break;
        case 35: play_rest(1);
            break;
        case 36: play_note('B', 0, 3, 4);
            break;
        case 37: play_note('C', 0, 4, 4);
    1376:	24 e0       	ldi	r18, 0x04	; 4
    1378:	44 e0       	ldi	r20, 0x04	; 4
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	83 e4       	ldi	r24, 0x43	; 67
    137e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 38: play_note('D', 0, 4, 8);
            break;
        case 39: play_note('E', 0, 4, 8);
    1382:	28 e0       	ldi	r18, 0x08	; 8
    1384:	44 e0       	ldi	r20, 0x04	; 4
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	85 e4       	ldi	r24, 0x45	; 69
    138a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    138e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1390:	10 92 d7 01 	sts	0x01D7, r1
    1394:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	90 93 d4 01 	sts	0x01D4, r25
    13a0:	80 93 d3 01 	sts	0x01D3, r24
    13a4:	08 95       	ret
            break;
        case 36: play_note('B', 0, 3, 4);
            break;
        case 37: play_note('C', 0, 4, 4);
            break;
        case 38: play_note('D', 0, 4, 8);
    13a6:	28 e0       	ldi	r18, 0x08	; 8
    13a8:	44 e0       	ldi	r20, 0x04	; 4
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	84 e4       	ldi	r24, 0x44	; 68
    13ae:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 53: play_rest(8);
            break;//bar phrase
        case 54: play_note('E', 0, 3, 16);
            break;
        case 55: play_note('C', 0, 3, 16);
    13b2:	20 e1       	ldi	r18, 0x10	; 16
    13b4:	43 e0       	ldi	r20, 0x03	; 3
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	83 e4       	ldi	r24, 0x43	; 67
    13ba:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 30: play_note('C', 0, 4, 4);
            break;
        case 31: play_note('E', 0, 4, 8);
            break;
        case 32: play_note('D', 0, 4, 4);
    13be:	24 e0       	ldi	r18, 0x04	; 4
    13c0:	44 e0       	ldi	r20, 0x04	; 4
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	84 e4       	ldi	r24, 0x44	; 68
    13c6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;//bar
        case 34: play_note('B', 0, 3, 7);
            break;
        case 35: play_rest(1);
            break;
        case 36: play_note('B', 0, 3, 4);
    13ca:	24 e0       	ldi	r18, 0x04	; 4
    13cc:	43 e0       	ldi	r20, 0x03	; 3
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	82 e4       	ldi	r24, 0x42	; 66
    13d2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 39: play_note('E', 0, 4, 8);
            break;
        case 40: play_note('C', 0, 4, 8);
            break;
        case 41: play_note('A', 0, 3, 7);
    13d6:	27 e0       	ldi	r18, 0x07	; 7
    13d8:	43 e0       	ldi	r20, 0x03	; 3
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	81 e4       	ldi	r24, 0x41	; 65
    13de:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 26: play_note('A', 0, 4, 8);
            break;
        case 27: play_note('G', 0, 4, 4);
            break;
        case 28: play_note('F', 0, 4, 4);
    13e2:	24 e0       	ldi	r18, 0x04	; 4
    13e4:	44 e0       	ldi	r20, 0x04	; 4
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	86 e4       	ldi	r24, 0x46	; 70
    13ea:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 55: play_note('C', 0, 3, 16);
            break;//bar
        case 56: play_note('D', 0, 3, 16);
            break;
        case 57: play_note('B', 0, 2, 16);
    13ee:	20 e1       	ldi	r18, 0x10	; 16
    13f0:	42 e0       	ldi	r20, 0x02	; 2
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	82 e4       	ldi	r24, 0x42	; 66
    13f6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;//bar
        case 58: play_note('C', 0, 3, 8);
            break;
        case 59: play_note('E', 0, 3, 8);
            break;
        case 60: play_note('A', 0, 3, 16);
    13fa:	20 e1       	ldi	r18, 0x10	; 16
    13fc:	43 e0       	ldi	r20, 0x03	; 3
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	81 e4       	ldi	r24, 0x41	; 65
    1402:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 38: play_note('D', 0, 4, 8);
            break;
        case 39: play_note('E', 0, 4, 8);
            break;
        case 40: play_note('C', 0, 4, 8);
    1406:	28 e0       	ldi	r18, 0x08	; 8
    1408:	44 e0       	ldi	r20, 0x04	; 4
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	83 e4       	ldi	r24, 0x43	; 67
    140e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;//bar phrase
        case 54: play_note('E', 0, 3, 16);
            break;
        case 55: play_note('C', 0, 3, 16);
            break;//bar
        case 56: play_note('D', 0, 3, 16);
    1412:	20 e1       	ldi	r18, 0x10	; 16
    1414:	43 e0       	ldi	r20, 0x03	; 3
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	84 e4       	ldi	r24, 0x44	; 68
    141a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 52: play_note('B', 0, 2, 8);
            break;
        case 53: play_rest(8);
            break;//bar phrase
        case 54: play_note('E', 0, 3, 16);
    141e:	20 e1       	ldi	r18, 0x10	; 16
    1420:	43 e0       	ldi	r20, 0x03	; 3
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	85 e4       	ldi	r24, 0x45	; 69
    1426:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    142a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    142c:	10 92 d7 01 	sts	0x01D7, r1
    1430:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1434:	88 e0       	ldi	r24, 0x08	; 8
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	90 93 d4 01 	sts	0x01D4, r25
    143c:	80 93 d3 01 	sts	0x01D3, r24
    1440:	08 95       	ret
            break;
        case 32: play_note('D', 0, 4, 4);
            break;
        case 33: play_note('C', 0, 4, 4);
            break;//bar
        case 34: play_note('B', 0, 3, 7);
    1442:	27 e0       	ldi	r18, 0x07	; 7
    1444:	43 e0       	ldi	r20, 0x03	; 3
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	82 e4       	ldi	r24, 0x42	; 66
    144a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 13: play_note('D', 0, 4, 4);
            break;
        case 14: play_note('C', 0, 4, 4);
            break;//bar
        case 15: play_note('B', 0, 3, 12);
    144e:	2c e0       	ldi	r18, 0x0C	; 12
    1450:	43 e0       	ldi	r20, 0x03	; 3
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	82 e4       	ldi	r24, 0x42	; 66
    1456:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 59: play_note('E', 0, 3, 8);
            break;
        case 60: play_note('A', 0, 3, 16);
            break;//bar
        case 61: play_note('A', 1, 3, 16);
    145a:	20 e1       	ldi	r18, 0x10	; 16
    145c:	43 e0       	ldi	r20, 0x03	; 3
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	81 e4       	ldi	r24, 0x41	; 65
    1462:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1466:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1468:	10 92 d7 01 	sts	0x01D7, r1
    146c:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1470:	80 e1       	ldi	r24, 0x10	; 16
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	90 93 d4 01 	sts	0x01D4, r25
    1478:	80 93 d3 01 	sts	0x01D3, r24
    147c:	08 95       	ret
            break;
        case 25: play_note('F', 0, 4, 4);
            break;
        case 26: play_note('A', 0, 4, 8);
            break;
        case 27: play_note('G', 0, 4, 4);
    147e:	24 e0       	ldi	r18, 0x04	; 4
    1480:	44 e0       	ldi	r20, 0x04	; 4
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	87 e4       	ldi	r24, 0x47	; 71
    1486:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 50: play_note('A', 0, 2, 16);
            break;//bar
        case 51: play_note('A', 1, 2, 16);
            break;
        case 52: play_note('B', 0, 2, 8);
    148a:	28 e0       	ldi	r18, 0x08	; 8
    148c:	42 e0       	ldi	r20, 0x02	; 2
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	82 e4       	ldi	r24, 0x42	; 66
    1492:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 48: play_note('B', 0, 2, 16);
            break;//bar
        case 49: play_note('C', 0, 3, 16);
            break;
        case 50: play_note('A', 0, 2, 16);
    1496:	20 e1       	ldi	r18, 0x10	; 16
    1498:	42 e0       	ldi	r20, 0x02	; 2
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	81 e4       	ldi	r24, 0x41	; 65
    149e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;//bar
        case 51: play_note('A', 1, 2, 16);
    14a2:	20 e1       	ldi	r18, 0x10	; 16
    14a4:	42 e0       	ldi	r20, 0x02	; 2
    14a6:	61 e0       	ldi	r22, 0x01	; 1
    14a8:	81 e4       	ldi	r24, 0x41	; 65
    14aa:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 27: play_note('G', 0, 4, 4);
            break;
        case 28: play_note('F', 0, 4, 4);
            break;//bar
        case 29: play_note('E', 0, 4, 12);
    14ae:	2c e0       	ldi	r18, 0x0C	; 12
    14b0:	44 e0       	ldi	r20, 0x04	; 4
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	85 e4       	ldi	r24, 0x45	; 69
    14b6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 3: play_note('D', 0, 4, 4);
            break;
        case 4: play_note('E', 0, 4, 2);
            break;
        case 5: play_note('D', 0, 4, 2);
    14ba:	22 e0       	ldi	r18, 0x02	; 2
    14bc:	44 e0       	ldi	r20, 0x04	; 4
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	84 e4       	ldi	r24, 0x44	; 68
    14c2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 2: play_note('C', 0, 4, 4);
            break;
        case 3: play_note('D', 0, 4, 4);
            break;
        case 4: play_note('E', 0, 4, 2);
    14c6:	22 e0       	ldi	r18, 0x02	; 2
    14c8:	44 e0       	ldi	r20, 0x04	; 4
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	85 e4       	ldi	r24, 0x45	; 69
    14ce:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;//bar
        case 56: play_note('D', 0, 3, 16);
            break;
        case 57: play_note('B', 0, 2, 16);
            break;//bar
        case 58: play_note('C', 0, 3, 8);
    14d2:	28 e0       	ldi	r18, 0x08	; 8
    14d4:	43 e0       	ldi	r20, 0x03	; 3
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	83 e4       	ldi	r24, 0x43	; 67
    14da:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;//bar
        case 8: play_note('A', 0, 3, 7);
            break;
        case 9: play_rest(1);
            break;
        case 10: play_note('A', 0, 3, 4);
    14de:	24 e0       	ldi	r18, 0x04	; 4
    14e0:	43 e0       	ldi	r20, 0x03	; 3
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	81 e4       	ldi	r24, 0x41	; 65
    14e6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 57: play_note('B', 0, 2, 16);
            break;//bar
        case 58: play_note('C', 0, 3, 8);
            break;
        case 59: play_note('E', 0, 3, 8);
    14ea:	28 e0       	ldi	r18, 0x08	; 8
    14ec:	43 e0       	ldi	r20, 0x03	; 3
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	85 e4       	ldi	r24, 0x45	; 69
    14f2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 41: play_note('A', 0, 3, 7);
            break;
        case 42: play_rest(1);
            break;
        case 43: play_note('A', 0, 3, 8);
    14f6:	28 e0       	ldi	r18, 0x08	; 8
    14f8:	43 e0       	ldi	r20, 0x03	; 3
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	81 e4       	ldi	r24, 0x41	; 65
    14fe:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1502:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1504:	10 92 d7 01 	sts	0x01D7, r1
    1508:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	90 93 d4 01 	sts	0x01D4, r25
    1514:	80 93 d3 01 	sts	0x01D3, r24
    1518:	08 95       	ret
            break;
        case 24: play_note('D', 0, 4, 8);
            break;
        case 25: play_note('F', 0, 4, 4);
            break;
        case 26: play_note('A', 0, 4, 8);
    151a:	28 e0       	ldi	r18, 0x08	; 8
    151c:	44 e0       	ldi	r20, 0x04	; 4
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	81 e4       	ldi	r24, 0x41	; 65
    1522:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>

00001526 <song2>:
            
    }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
    switch (note) {
    1526:	85 39       	cpi	r24, 0x95	; 149
    1528:	91 05       	cpc	r25, r1
    152a:	20 f0       	brcs	.+8      	; 0x1534 <song2+0xe>
            break;
        case 147: play_note('G', 0, 3, 4);
            break;
        case 148: play_rest(8);
            break;
        default: notes=-1;
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	80 93 cc 01 	sts	0x01CC, r24
    1532:	08 95       	ret
            
    }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
    switch (note) {
    1534:	fc 01       	movw	r30, r24
    1536:	ed 5e       	subi	r30, 0xED	; 237
    1538:	fe 4f       	sbci	r31, 0xFE	; 254
    153a:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            break;
        case 145: play_rest(2);
            break;
        case 146: play_note('A', 0, 3, 2);
            break;
        case 147: play_note('G', 0, 3, 4);
    153e:	24 e0       	ldi	r18, 0x04	; 4
    1540:	43 e0       	ldi	r20, 0x03	; 3
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	87 e4       	ldi	r24, 0x47	; 71
    1546:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 144: play_note('C', 0, 4, 2);
            break;
        case 145: play_rest(2);
            break;
        case 146: play_note('A', 0, 3, 2);
    154a:	22 e0       	ldi	r18, 0x02	; 2
    154c:	43 e0       	ldi	r20, 0x03	; 3
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	81 e4       	ldi	r24, 0x41	; 65
    1552:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1556:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1558:	10 92 d7 01 	sts	0x01D7, r1
    155c:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	90 93 d4 01 	sts	0x01D4, r25
    1568:	80 93 d3 01 	sts	0x01D3, r24
    156c:	08 95       	ret
            break;
        case 142: play_note('D', 0, 4, 4);
            break;
        case 143: play_note('E', 0, 4, 2);
            break;
        case 144: play_note('C', 0, 4, 2);
    156e:	22 e0       	ldi	r18, 0x02	; 2
    1570:	44 e0       	ldi	r20, 0x04	; 4
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	83 e4       	ldi	r24, 0x43	; 67
    1576:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 141: play_note('C', 0, 4, 2);
            break;
        case 142: play_note('D', 0, 4, 4);
            break;
        case 143: play_note('E', 0, 4, 2);
    157a:	22 e0       	ldi	r18, 0x02	; 2
    157c:	44 e0       	ldi	r20, 0x04	; 4
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	85 e4       	ldi	r24, 0x45	; 69
    1582:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 140: play_rest(2);
            break;
        case 141: play_note('C', 0, 4, 2);
            break;
        case 142: play_note('D', 0, 4, 4);
    1586:	24 e0       	ldi	r18, 0x04	; 4
    1588:	44 e0       	ldi	r20, 0x04	; 4
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	84 e4       	ldi	r24, 0x44	; 68
    158e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 139: play_note('C', 0, 4, 2);
            break;
        case 140: play_rest(2);
            break;
        case 141: play_note('C', 0, 4, 2);
    1592:	22 e0       	ldi	r18, 0x02	; 2
    1594:	44 e0       	ldi	r20, 0x04	; 4
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	83 e4       	ldi	r24, 0x43	; 67
    159a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    159e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    15a0:	10 92 d7 01 	sts	0x01D7, r1
    15a4:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	90 93 d4 01 	sts	0x01D4, r25
    15b0:	80 93 d3 01 	sts	0x01D3, r24
    15b4:	08 95       	ret
            break;
        case 137: play_note('C', 0, 4, 2);
            break;
        case 138: play_rest(2);
            break;
        case 139: play_note('C', 0, 4, 2);
    15b6:	22 e0       	ldi	r18, 0x02	; 2
    15b8:	44 e0       	ldi	r20, 0x04	; 4
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	83 e4       	ldi	r24, 0x43	; 67
    15be:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    15c2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    15c4:	10 92 d7 01 	sts	0x01D7, r1
    15c8:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	90 93 d4 01 	sts	0x01D4, r25
    15d4:	80 93 d3 01 	sts	0x01D3, r24
    15d8:	08 95       	ret
            break;
        case 135: play_note('C', 0, 4, 2);
            break;
        case 136: play_rest(1);
            break;
        case 137: play_note('C', 0, 4, 2);
    15da:	22 e0       	ldi	r18, 0x02	; 2
    15dc:	44 e0       	ldi	r20, 0x04	; 4
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	83 e4       	ldi	r24, 0x43	; 67
    15e2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    15e6:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    15e8:	10 92 d7 01 	sts	0x01D7, r1
    15ec:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	90 93 d4 01 	sts	0x01D4, r25
    15f8:	80 93 d3 01 	sts	0x01D3, r24
    15fc:	08 95       	ret
            break;
        case 133: play_note('E', 0, 4, 2);
            break;
        case 134: play_rest(16);
            break;
        case 135: play_note('C', 0, 4, 2);
    15fe:	22 e0       	ldi	r18, 0x02	; 2
    1600:	44 e0       	ldi	r20, 0x04	; 4
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	83 e4       	ldi	r24, 0x43	; 67
    1606:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    160a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    160c:	10 92 d7 01 	sts	0x01D7, r1
    1610:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1614:	80 e1       	ldi	r24, 0x10	; 16
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	90 93 d4 01 	sts	0x01D4, r25
    161c:	80 93 d3 01 	sts	0x01D3, r24
    1620:	08 95       	ret
            break;
        case 131: play_note('C', 0, 4, 2);
            break;
        case 132: play_note('D', 0, 4, 2);
            break;
        case 133: play_note('E', 0, 4, 2);
    1622:	22 e0       	ldi	r18, 0x02	; 2
    1624:	44 e0       	ldi	r20, 0x04	; 4
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	85 e4       	ldi	r24, 0x45	; 69
    162a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 130: play_rest(2);
            break;
        case 131: play_note('C', 0, 4, 2);
            break;
        case 132: play_note('D', 0, 4, 2);
    162e:	22 e0       	ldi	r18, 0x02	; 2
    1630:	44 e0       	ldi	r20, 0x04	; 4
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	84 e4       	ldi	r24, 0x44	; 68
    1636:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 129: play_note('C', 0, 4, 2);
            break;
        case 130: play_rest(2);
            break;
        case 131: play_note('C', 0, 4, 2);
    163a:	22 e0       	ldi	r18, 0x02	; 2
    163c:	44 e0       	ldi	r20, 0x04	; 4
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	83 e4       	ldi	r24, 0x43	; 67
    1642:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1646:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1648:	10 92 d7 01 	sts	0x01D7, r1
    164c:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	90 93 d4 01 	sts	0x01D4, r25
    1658:	80 93 d3 01 	sts	0x01D3, r24
    165c:	08 95       	ret
            break;
        case 127: play_note('C', 0, 4, 2);
            break;
        case 128: play_rest(2);
            break;
        case 129: play_note('C', 0, 4, 2);
    165e:	22 e0       	ldi	r18, 0x02	; 2
    1660:	44 e0       	ldi	r20, 0x04	; 4
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	83 e4       	ldi	r24, 0x43	; 67
    1666:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    166a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    166c:	10 92 d7 01 	sts	0x01D7, r1
    1670:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	90 93 d4 01 	sts	0x01D4, r25
    167c:	80 93 d3 01 	sts	0x01D3, r24
    1680:	08 95       	ret
            break;
        case 125: play_note('C', 0, 4, 2);
            break;
        case 126: play_rest(1);
            break;
        case 127: play_note('C', 0, 4, 2);
    1682:	22 e0       	ldi	r18, 0x02	; 2
    1684:	44 e0       	ldi	r20, 0x04	; 4
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	83 e4       	ldi	r24, 0x43	; 67
    168a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    168e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1690:	10 92 d7 01 	sts	0x01D7, r1
    1694:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	90 93 d4 01 	sts	0x01D4, r25
    16a0:	80 93 d3 01 	sts	0x01D3, r24
    16a4:	08 95       	ret
            break;
        case 123: play_note('G', 0, 3, 4);
            break;
        case 124: play_rest(4);
            break;
        case 125: play_note('C', 0, 4, 2);
    16a6:	22 e0       	ldi	r18, 0x02	; 2
    16a8:	44 e0       	ldi	r20, 0x04	; 4
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	83 e4       	ldi	r24, 0x43	; 67
    16ae:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    16b2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    16b4:	10 92 d7 01 	sts	0x01D7, r1
    16b8:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    16bc:	84 e0       	ldi	r24, 0x04	; 4
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	90 93 d4 01 	sts	0x01D4, r25
    16c4:	80 93 d3 01 	sts	0x01D3, r24
    16c8:	08 95       	ret
            break;
        case 121: play_rest(2);
            break;
        case 122: play_note('A', 0, 3, 2);
            break;
        case 123: play_note('G', 0, 3, 4);
    16ca:	24 e0       	ldi	r18, 0x04	; 4
    16cc:	43 e0       	ldi	r20, 0x03	; 3
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	87 e4       	ldi	r24, 0x47	; 71
    16d2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 120: play_note('C', 0, 4, 2);
            break;
        case 121: play_rest(2);
            break;
        case 122: play_note('A', 0, 3, 2);
    16d6:	22 e0       	ldi	r18, 0x02	; 2
    16d8:	43 e0       	ldi	r20, 0x03	; 3
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	81 e4       	ldi	r24, 0x41	; 65
    16de:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    16e2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    16e4:	10 92 d7 01 	sts	0x01D7, r1
    16e8:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	90 93 d4 01 	sts	0x01D4, r25
    16f4:	80 93 d3 01 	sts	0x01D3, r24
    16f8:	08 95       	ret
            break;
        case 118: play_note('D', 0, 4, 4);
            break;
        case 119: play_note('E', 0, 4, 2);
            break;
        case 120: play_note('C', 0, 4, 2);
    16fa:	22 e0       	ldi	r18, 0x02	; 2
    16fc:	44 e0       	ldi	r20, 0x04	; 4
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	83 e4       	ldi	r24, 0x43	; 67
    1702:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 117: play_note('C', 0, 4, 2);
            break;
        case 118: play_note('D', 0, 4, 4);
            break;
        case 119: play_note('E', 0, 4, 2);
    1706:	22 e0       	ldi	r18, 0x02	; 2
    1708:	44 e0       	ldi	r20, 0x04	; 4
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	85 e4       	ldi	r24, 0x45	; 69
    170e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 116: play_rest(2);
            break;
        case 117: play_note('C', 0, 4, 2);
            break;
        case 118: play_note('D', 0, 4, 4);
    1712:	24 e0       	ldi	r18, 0x04	; 4
    1714:	44 e0       	ldi	r20, 0x04	; 4
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	84 e4       	ldi	r24, 0x44	; 68
    171a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 115: play_note('C', 0, 4, 2);
            break;
        case 116: play_rest(2);
            break;
        case 117: play_note('C', 0, 4, 2);
    171e:	22 e0       	ldi	r18, 0x02	; 2
    1720:	44 e0       	ldi	r20, 0x04	; 4
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	83 e4       	ldi	r24, 0x43	; 67
    1726:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    172a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    172c:	10 92 d7 01 	sts	0x01D7, r1
    1730:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	90 93 d4 01 	sts	0x01D4, r25
    173c:	80 93 d3 01 	sts	0x01D3, r24
    1740:	08 95       	ret
            break;
        case 113: play_note('C', 0, 4, 2);
            break;
        case 114: play_rest(2);
            break;
        case 115: play_note('C', 0, 4, 2);
    1742:	22 e0       	ldi	r18, 0x02	; 2
    1744:	44 e0       	ldi	r20, 0x04	; 4
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	83 e4       	ldi	r24, 0x43	; 67
    174a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    174e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1750:	10 92 d7 01 	sts	0x01D7, r1
    1754:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	90 93 d4 01 	sts	0x01D4, r25
    1760:	80 93 d3 01 	sts	0x01D3, r24
    1764:	08 95       	ret
            break;
        case 111: play_note('C', 0, 4, 2);
            break;
        case 112: play_rest(1);
            break;
        case 113: play_note('C', 0, 4, 2);
    1766:	22 e0       	ldi	r18, 0x02	; 2
    1768:	44 e0       	ldi	r20, 0x04	; 4
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	83 e4       	ldi	r24, 0x43	; 67
    176e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1772:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1774:	10 92 d7 01 	sts	0x01D7, r1
    1778:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	90 93 d4 01 	sts	0x01D4, r25
    1784:	80 93 d3 01 	sts	0x01D3, r24
    1788:	08 95       	ret
            break;
        case 109: play_note('C', 0, 4, 4);
            break;
        case 110: play_rest(10);
            break;
        case 111: play_note('C', 0, 4, 2);
    178a:	22 e0       	ldi	r18, 0x02	; 2
    178c:	44 e0       	ldi	r20, 0x04	; 4
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	83 e4       	ldi	r24, 0x43	; 67
    1792:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1796:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1798:	10 92 d7 01 	sts	0x01D7, r1
    179c:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    17a0:	8a e0       	ldi	r24, 0x0A	; 10
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	90 93 d4 01 	sts	0x01D4, r25
    17a8:	80 93 d3 01 	sts	0x01D3, r24
    17ac:	08 95       	ret
            break;
        case 107: play_note('D', 0, 4, 2);
            break;
        case 108: play_rest(4);
            break;
        case 109: play_note('C', 0, 4, 4);
    17ae:	24 e0       	ldi	r18, 0x04	; 4
    17b0:	44 e0       	ldi	r20, 0x04	; 4
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	83 e4       	ldi	r24, 0x43	; 67
    17b6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    17ba:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    17bc:	10 92 d7 01 	sts	0x01D7, r1
    17c0:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    17c4:	84 e0       	ldi	r24, 0x04	; 4
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	90 93 d4 01 	sts	0x01D4, r25
    17cc:	80 93 d3 01 	sts	0x01D3, r24
    17d0:	08 95       	ret
            break;
        case 105: play_note('E', 1, 4, 4);
            break;
        case 106: play_rest(2);
            break;
        case 107: play_note('D', 0, 4, 2);
    17d2:	22 e0       	ldi	r18, 0x02	; 2
    17d4:	44 e0       	ldi	r20, 0x04	; 4
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	84 e4       	ldi	r24, 0x44	; 68
    17da:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    17de:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    17e0:	10 92 d7 01 	sts	0x01D7, r1
    17e4:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	90 93 d4 01 	sts	0x01D4, r25
    17f0:	80 93 d3 01 	sts	0x01D3, r24
    17f4:	08 95       	ret
            break;
        case 103: play_note('D', 0, 4, 2);
            break;
        case 104: play_rest(4);
            break;
        case 105: play_note('E', 1, 4, 4);
    17f6:	24 e0       	ldi	r18, 0x04	; 4
    17f8:	44 e0       	ldi	r20, 0x04	; 4
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	85 e4       	ldi	r24, 0x45	; 69
    17fe:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1802:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1804:	10 92 d7 01 	sts	0x01D7, r1
    1808:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    180c:	84 e0       	ldi	r24, 0x04	; 4
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	90 93 d4 01 	sts	0x01D4, r25
    1814:	80 93 d3 01 	sts	0x01D3, r24
    1818:	08 95       	ret
            break;
        case 101: play_note('A', 0, 3, 2);
            break;
        case 102: play_note('C', 0, 4, 2);
            break;
        case 103: play_note('D', 0, 4, 2);
    181a:	22 e0       	ldi	r18, 0x02	; 2
    181c:	44 e0       	ldi	r20, 0x04	; 4
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	84 e4       	ldi	r24, 0x44	; 68
    1822:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 100: play_rest(2);
            break;
        case 101: play_note('A', 0, 3, 2);
            break;
        case 102: play_note('C', 0, 4, 2);
    1826:	22 e0       	ldi	r18, 0x02	; 2
    1828:	44 e0       	ldi	r20, 0x04	; 4
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	83 e4       	ldi	r24, 0x43	; 67
    182e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 99: play_note('C', 0, 4, 2);
            break;
        case 100: play_rest(2);
            break;
        case 101: play_note('A', 0, 3, 2);
    1832:	22 e0       	ldi	r18, 0x02	; 2
    1834:	43 e0       	ldi	r20, 0x03	; 3
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	81 e4       	ldi	r24, 0x41	; 65
    183a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    183e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1840:	10 92 d7 01 	sts	0x01D7, r1
    1844:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1848:	82 e0       	ldi	r24, 0x02	; 2
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	90 93 d4 01 	sts	0x01D4, r25
    1850:	80 93 d3 01 	sts	0x01D3, r24
    1854:	08 95       	ret
            break;
        case 97: play_note('A', 1, 3, 2);
            break;
        case 98: play_note('A', 0, 3, 2);
            break;
        case 99: play_note('C', 0, 4, 2);
    1856:	22 e0       	ldi	r18, 0x02	; 2
    1858:	44 e0       	ldi	r20, 0x04	; 4
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	83 e4       	ldi	r24, 0x43	; 67
    185e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 96: play_rest(2);
            break;
        case 97: play_note('A', 1, 3, 2);
            break;
        case 98: play_note('A', 0, 3, 2);
    1862:	22 e0       	ldi	r18, 0x02	; 2
    1864:	43 e0       	ldi	r20, 0x03	; 3
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	81 e4       	ldi	r24, 0x41	; 65
    186a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 95: play_note('E', 0, 4, 2);
            break;
        case 96: play_rest(2);
            break;
        case 97: play_note('A', 1, 3, 2);
    186e:	22 e0       	ldi	r18, 0x02	; 2
    1870:	43 e0       	ldi	r20, 0x03	; 3
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	81 e4       	ldi	r24, 0x41	; 65
    1876:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    187a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    187c:	10 92 d7 01 	sts	0x01D7, r1
    1880:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	90 93 d4 01 	sts	0x01D4, r25
    188c:	80 93 d3 01 	sts	0x01D3, r24
    1890:	08 95       	ret
            break;
        case 93: play_note('E', 1, 4, 2);
            break;
        case 94: play_rest(2);
            break;
        case 95: play_note('E', 0, 4, 2);
    1892:	22 e0       	ldi	r18, 0x02	; 2
    1894:	44 e0       	ldi	r20, 0x04	; 4
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	85 e4       	ldi	r24, 0x45	; 69
    189a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    189e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    18a0:	10 92 d7 01 	sts	0x01D7, r1
    18a4:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	90 93 d4 01 	sts	0x01D4, r25
    18b0:	80 93 d3 01 	sts	0x01D3, r24
    18b4:	08 95       	ret
            break;
        case 91: play_note('G', 1, 4, 2);
            break;
        case 92: play_note('F', 0, 4, 2);
            break;
        case 93: play_note('E', 1, 4, 2);
    18b6:	22 e0       	ldi	r18, 0x02	; 2
    18b8:	44 e0       	ldi	r20, 0x04	; 4
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	85 e4       	ldi	r24, 0x45	; 69
    18be:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 90: play_note('G', 0, 4, 2);
            break;
        case 91: play_note('G', 1, 4, 2);
            break;
        case 92: play_note('F', 0, 4, 2);
    18c2:	22 e0       	ldi	r18, 0x02	; 2
    18c4:	44 e0       	ldi	r20, 0x04	; 4
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	86 e4       	ldi	r24, 0x46	; 70
    18ca:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 89: play_rest(8);
            break;
        case 90: play_note('G', 0, 4, 2);
            break;
        case 91: play_note('G', 1, 4, 2);
    18ce:	22 e0       	ldi	r18, 0x02	; 2
    18d0:	44 e0       	ldi	r20, 0x04	; 4
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	87 e4       	ldi	r24, 0x47	; 71
    18d6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 88: play_note('G', 0, 4, 4);
            break;
        case 89: play_rest(8);
            break;
        case 90: play_note('G', 0, 4, 2);
    18da:	22 e0       	ldi	r18, 0x02	; 2
    18dc:	44 e0       	ldi	r20, 0x04	; 4
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	87 e4       	ldi	r24, 0x47	; 71
    18e2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    18e6:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    18e8:	10 92 d7 01 	sts	0x01D7, r1
    18ec:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    18f0:	88 e0       	ldi	r24, 0x08	; 8
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	90 93 d4 01 	sts	0x01D4, r25
    18f8:	80 93 d3 01 	sts	0x01D3, r24
    18fc:	08 95       	ret
            break;
        case 86: play_note('G', 0, 4, 1);
            break;
        case 87: play_rest(1);
            break;
        case 88: play_note('G', 0, 4, 4);
    18fe:	24 e0       	ldi	r18, 0x04	; 4
    1900:	44 e0       	ldi	r20, 0x04	; 4
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	87 e4       	ldi	r24, 0x47	; 71
    1906:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    190a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    190c:	10 92 d7 01 	sts	0x01D7, r1
    1910:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	90 93 d4 01 	sts	0x01D4, r25
    191c:	80 93 d3 01 	sts	0x01D3, r24
    1920:	08 95       	ret
            break;
        case 84: play_note('G', 0, 4, 2);
            break;
        case 85: play_rest(2);
            break;
        case 86: play_note('G', 0, 4, 1);
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	44 e0       	ldi	r20, 0x04	; 4
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	87 e4       	ldi	r24, 0x47	; 71
    192a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    192e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1930:	10 92 d7 01 	sts	0x01D7, r1
    1934:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	90 93 d4 01 	sts	0x01D4, r25
    1940:	80 93 d3 01 	sts	0x01D3, r24
    1944:	08 95       	ret
            break;
        case 82: play_note('E', 0, 3, 2);
            break;
        case 83: play_rest(2);
            break;
        case 84: play_note('G', 0, 4, 2);
    1946:	22 e0       	ldi	r18, 0x02	; 2
    1948:	44 e0       	ldi	r20, 0x04	; 4
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	87 e4       	ldi	r24, 0x47	; 71
    194e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1952:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1954:	10 92 d7 01 	sts	0x01D7, r1
    1958:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	90 93 d4 01 	sts	0x01D4, r25
    1964:	80 93 d3 01 	sts	0x01D3, r24
    1968:	08 95       	ret
            break;
        case 80: play_note('E', 1, 3, 2);
            break;
        case 81: play_rest(2);
            break;
        case 82: play_note('E', 0, 3, 2);
    196a:	22 e0       	ldi	r18, 0x02	; 2
    196c:	43 e0       	ldi	r20, 0x03	; 3
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	85 e4       	ldi	r24, 0x45	; 69
    1972:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1976:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1978:	10 92 d7 01 	sts	0x01D7, r1
    197c:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	90 93 d4 01 	sts	0x01D4, r25
    1988:	80 93 d3 01 	sts	0x01D3, r24
    198c:	08 95       	ret
            break;
        case 78: play_note('G', 1, 3, 2);
            break;
        case 79: play_note('F', 0, 3, 2);
            break;
        case 80: play_note('E', 1, 3, 2);
    198e:	22 e0       	ldi	r18, 0x02	; 2
    1990:	43 e0       	ldi	r20, 0x03	; 3
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	85 e4       	ldi	r24, 0x45	; 69
    1996:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 77: play_note('G', 0, 3, 2);
            break;
        case 78: play_note('G', 1, 3, 2);
            break;
        case 79: play_note('F', 0, 3, 2);
    199a:	22 e0       	ldi	r18, 0x02	; 2
    199c:	43 e0       	ldi	r20, 0x03	; 3
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	86 e4       	ldi	r24, 0x46	; 70
    19a2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 76: play_rest(4);
            break;
        case 77: play_note('G', 0, 3, 2);
            break;
        case 78: play_note('G', 1, 3, 2);
    19a6:	22 e0       	ldi	r18, 0x02	; 2
    19a8:	43 e0       	ldi	r20, 0x03	; 3
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	87 e4       	ldi	r24, 0x47	; 71
    19ae:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 75: play_note('D', 0, 4, 2);
            break;
        case 76: play_rest(4);
            break;
        case 77: play_note('G', 0, 3, 2);
    19b2:	22 e0       	ldi	r18, 0x02	; 2
    19b4:	43 e0       	ldi	r20, 0x03	; 3
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	87 e4       	ldi	r24, 0x47	; 71
    19ba:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    19be:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    19c0:	10 92 d7 01 	sts	0x01D7, r1
    19c4:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    19c8:	84 e0       	ldi	r24, 0x04	; 4
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	90 93 d4 01 	sts	0x01D4, r25
    19d0:	80 93 d3 01 	sts	0x01D3, r24
    19d4:	08 95       	ret
            break;
        case 73: play_note('A', 0, 3, 2);
            break;
        case 74: play_note('C', 0, 4, 2);
            break;
        case 75: play_note('D', 0, 4, 2);
    19d6:	22 e0       	ldi	r18, 0x02	; 2
    19d8:	44 e0       	ldi	r20, 0x04	; 4
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	84 e4       	ldi	r24, 0x44	; 68
    19de:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 72: play_rest(2);
            break;
        case 73: play_note('A', 0, 3, 2);
            break;
        case 74: play_note('C', 0, 4, 2);
    19e2:	22 e0       	ldi	r18, 0x02	; 2
    19e4:	44 e0       	ldi	r20, 0x04	; 4
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	83 e4       	ldi	r24, 0x43	; 67
    19ea:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 71: play_note('C', 0, 4, 2);
            break;
        case 72: play_rest(2);
            break;
        case 73: play_note('A', 0, 3, 2);
    19ee:	22 e0       	ldi	r18, 0x02	; 2
    19f0:	43 e0       	ldi	r20, 0x03	; 3
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	81 e4       	ldi	r24, 0x41	; 65
    19f6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    19fa:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    19fc:	10 92 d7 01 	sts	0x01D7, r1
    1a00:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	90 93 d4 01 	sts	0x01D4, r25
    1a0c:	80 93 d3 01 	sts	0x01D3, r24
    1a10:	08 95       	ret
            break;
        case 69: play_note('A', 1, 3, 2);
            break;
        case 70: play_note('A', 0, 3, 2);
            break;
        case 71: play_note('C', 0, 4, 2);
    1a12:	22 e0       	ldi	r18, 0x02	; 2
    1a14:	44 e0       	ldi	r20, 0x04	; 4
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	83 e4       	ldi	r24, 0x43	; 67
    1a1a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 68: play_rest(2);
            break;
        case 69: play_note('A', 1, 3, 2);
            break;
        case 70: play_note('A', 0, 3, 2);
    1a1e:	22 e0       	ldi	r18, 0x02	; 2
    1a20:	43 e0       	ldi	r20, 0x03	; 3
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	81 e4       	ldi	r24, 0x41	; 65
    1a26:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 67: play_note('E', 0, 4, 2);
            break;
        case 68: play_rest(2);
            break;
        case 69: play_note('A', 1, 3, 2);
    1a2a:	22 e0       	ldi	r18, 0x02	; 2
    1a2c:	43 e0       	ldi	r20, 0x03	; 3
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	81 e4       	ldi	r24, 0x41	; 65
    1a32:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1a36:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1a38:	10 92 d7 01 	sts	0x01D7, r1
    1a3c:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	90 93 d4 01 	sts	0x01D4, r25
    1a48:	80 93 d3 01 	sts	0x01D3, r24
    1a4c:	08 95       	ret
            break;
        case 65: play_note('E', 1, 4, 2);
            break;
        case 66: play_rest(2);
            break;
        case 67: play_note('E', 0, 4, 2);
    1a4e:	22 e0       	ldi	r18, 0x02	; 2
    1a50:	44 e0       	ldi	r20, 0x04	; 4
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	85 e4       	ldi	r24, 0x45	; 69
    1a56:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1a5a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1a5c:	10 92 d7 01 	sts	0x01D7, r1
    1a60:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	90 93 d4 01 	sts	0x01D4, r25
    1a6c:	80 93 d3 01 	sts	0x01D3, r24
    1a70:	08 95       	ret
            break;
        case 63: play_note('G', 1, 4, 2);
            break;
        case 64: play_note('F', 0, 4, 2);
            break;
        case 65: play_note('E', 1, 4, 2);
    1a72:	22 e0       	ldi	r18, 0x02	; 2
    1a74:	44 e0       	ldi	r20, 0x04	; 4
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	85 e4       	ldi	r24, 0x45	; 69
    1a7a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 62: play_note('G', 0, 4, 2);
            break;
        case 63: play_note('G', 1, 4, 2);
            break;
        case 64: play_note('F', 0, 4, 2);
    1a7e:	22 e0       	ldi	r18, 0x02	; 2
    1a80:	44 e0       	ldi	r20, 0x04	; 4
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	86 e4       	ldi	r24, 0x46	; 70
    1a86:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 61: play_rest(8);
            break;
        case 62: play_note('G', 0, 4, 2);
            break;
        case 63: play_note('G', 1, 4, 2);
    1a8a:	22 e0       	ldi	r18, 0x02	; 2
    1a8c:	44 e0       	ldi	r20, 0x04	; 4
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	87 e4       	ldi	r24, 0x47	; 71
    1a92:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 60: play_note('B', 0, 3, 2);
            break;
        case 61: play_rest(8);
            break;
        case 62: play_note('G', 0, 4, 2);
    1a96:	22 e0       	ldi	r18, 0x02	; 2
    1a98:	44 e0       	ldi	r20, 0x04	; 4
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	87 e4       	ldi	r24, 0x47	; 71
    1a9e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1aa2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1aa4:	10 92 d7 01 	sts	0x01D7, r1
    1aa8:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1aac:	88 e0       	ldi	r24, 0x08	; 8
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	90 93 d4 01 	sts	0x01D4, r25
    1ab4:	80 93 d3 01 	sts	0x01D3, r24
    1ab8:	08 95       	ret
            break;
        case 58: play_note('C', 0, 4, 2);
            break;
        case 59: play_note('D', 0, 4, 2);
            break;
        case 60: play_note('B', 0, 3, 2);
    1aba:	22 e0       	ldi	r18, 0x02	; 2
    1abc:	43 e0       	ldi	r20, 0x03	; 3
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	82 e4       	ldi	r24, 0x42	; 66
    1ac2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 57: play_rest(2);
            break;
        case 58: play_note('C', 0, 4, 2);
            break;
        case 59: play_note('D', 0, 4, 2);
    1ac6:	22 e0       	ldi	r18, 0x02	; 2
    1ac8:	44 e0       	ldi	r20, 0x04	; 4
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	84 e4       	ldi	r24, 0x44	; 68
    1ace:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 56: play_note('E', 0, 4, 2);
            break;
        case 57: play_rest(2);
            break;
        case 58: play_note('C', 0, 4, 2);
    1ad2:	22 e0       	ldi	r18, 0x02	; 2
    1ad4:	44 e0       	ldi	r20, 0x04	; 4
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	83 e4       	ldi	r24, 0x43	; 67
    1ada:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1ade:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1ae0:	10 92 d7 01 	sts	0x01D7, r1
    1ae4:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1ae8:	82 e0       	ldi	r24, 0x02	; 2
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	90 93 d4 01 	sts	0x01D4, r25
    1af0:	80 93 d3 01 	sts	0x01D3, r24
    1af4:	08 95       	ret
            break;
        case 54: play_note('G', 0, 4, 2);
            break;
        case 55: play_rest(2);
            break;
        case 56: play_note('E', 0, 4, 2);
    1af6:	22 e0       	ldi	r18, 0x02	; 2
    1af8:	44 e0       	ldi	r20, 0x04	; 4
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	85 e4       	ldi	r24, 0x45	; 69
    1afe:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1b02:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1b04:	10 92 d7 01 	sts	0x01D7, r1
    1b08:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	90 93 d4 01 	sts	0x01D4, r25
    1b14:	80 93 d3 01 	sts	0x01D3, r24
    1b18:	08 95       	ret
            break;
        case 52: play_note('A', 0, 4, 4);
            break;
        case 53: play_note('F', 0, 4, 2);
            break;
        case 54: play_note('G', 0, 4, 2);
    1b1a:	22 e0       	ldi	r18, 0x02	; 2
    1b1c:	44 e0       	ldi	r20, 0x04	; 4
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	87 e4       	ldi	r24, 0x47	; 71
    1b22:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 51: play_note('G', 0, 4, 2);
            break;
        case 52: play_note('A', 0, 4, 4);
            break;
        case 53: play_note('F', 0, 4, 2);
    1b26:	22 e0       	ldi	r18, 0x02	; 2
    1b28:	44 e0       	ldi	r20, 0x04	; 4
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	86 e4       	ldi	r24, 0x46	; 70
    1b2e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 50: play_rest(1);
            break;
        case 51: play_note('G', 0, 4, 2);
            break;
        case 52: play_note('A', 0, 4, 4);
    1b32:	24 e0       	ldi	r18, 0x04	; 4
    1b34:	44 e0       	ldi	r20, 0x04	; 4
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	81 e4       	ldi	r24, 0x41	; 65
    1b3a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 49: play_note('E', 0, 4, 2);
            break;
        case 50: play_rest(1);
            break;
        case 51: play_note('G', 0, 4, 2);
    1b3e:	22 e0       	ldi	r18, 0x02	; 2
    1b40:	44 e0       	ldi	r20, 0x04	; 4
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	87 e4       	ldi	r24, 0x47	; 71
    1b46:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1b4a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1b4c:	10 92 d7 01 	sts	0x01D7, r1
    1b50:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	90 93 d4 01 	sts	0x01D4, r25
    1b5c:	80 93 d3 01 	sts	0x01D3, r24
    1b60:	08 95       	ret
            break;
        case 47: play_note('A', 0, 3, 4); //phrase
            break;
        case 48: play_note('G' , 0, 3, 3);
            break;
        case 49: play_note('E', 0, 4, 2);
    1b62:	22 e0       	ldi	r18, 0x02	; 2
    1b64:	44 e0       	ldi	r20, 0x04	; 4
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	85 e4       	ldi	r24, 0x45	; 69
    1b6a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 46: play_note('B', 1, 3, 2);
            break;
        case 47: play_note('A', 0, 3, 4); //phrase
            break;
        case 48: play_note('G' , 0, 3, 3);
    1b6e:	23 e0       	ldi	r18, 0x03	; 3
    1b70:	43 e0       	ldi	r20, 0x03	; 3
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	87 e4       	ldi	r24, 0x47	; 71
    1b76:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 45: play_rest(2);
            break;
        case 46: play_note('B', 1, 3, 2);
            break;
        case 47: play_note('A', 0, 3, 4); //phrase
    1b7a:	24 e0       	ldi	r18, 0x04	; 4
    1b7c:	43 e0       	ldi	r20, 0x03	; 3
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	81 e4       	ldi	r24, 0x41	; 65
    1b82:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 44: play_note('B', 0, 3, 2);
            break;
        case 45: play_rest(2);
            break;
        case 46: play_note('B', 1, 3, 2);
    1b86:	22 e0       	ldi	r18, 0x02	; 2
    1b88:	43 e0       	ldi	r20, 0x03	; 3
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	82 e4       	ldi	r24, 0x42	; 66
    1b8e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1b92:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1b94:	10 92 d7 01 	sts	0x01D7, r1
    1b98:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	90 93 d4 01 	sts	0x01D4, r25
    1ba4:	80 93 d3 01 	sts	0x01D3, r24
    1ba8:	08 95       	ret
            break;
        case 42: play_note('A', 0, 3, 2);
            break;
        case 43: play_rest(2);
            break;
        case 44: play_note('B', 0, 3, 2);
    1baa:	22 e0       	ldi	r18, 0x02	; 2
    1bac:	43 e0       	ldi	r20, 0x03	; 3
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	82 e4       	ldi	r24, 0x42	; 66
    1bb2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1bb6:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1bb8:	10 92 d7 01 	sts	0x01D7, r1
    1bbc:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	90 93 d4 01 	sts	0x01D4, r25
    1bc8:	80 93 d3 01 	sts	0x01D3, r24
    1bcc:	08 95       	ret
            break;
        case 40: play_note('E', 0, 3, 4);
            break;
        case 41: play_rest(2);
            break;
        case 42: play_note('A', 0, 3, 2);
    1bce:	22 e0       	ldi	r18, 0x02	; 2
    1bd0:	43 e0       	ldi	r20, 0x03	; 3
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	81 e4       	ldi	r24, 0x41	; 65
    1bd6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1bda:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1bdc:	10 92 d7 01 	sts	0x01D7, r1
    1be0:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	90 93 d4 01 	sts	0x01D4, r25
    1bec:	80 93 d3 01 	sts	0x01D3, r24
    1bf0:	08 95       	ret
            break;
        case 38: play_note('G', 0, 3, 2);
            break;
        case 39: play_rest(3);
            break;
        case 40: play_note('E', 0, 3, 4);
    1bf2:	24 e0       	ldi	r18, 0x04	; 4
    1bf4:	43 e0       	ldi	r20, 0x03	; 3
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	85 e4       	ldi	r24, 0x45	; 69
    1bfa:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1bfe:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1c00:	10 92 d7 01 	sts	0x01D7, r1
    1c04:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1c08:	83 e0       	ldi	r24, 0x03	; 3
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	90 93 d4 01 	sts	0x01D4, r25
    1c10:	80 93 d3 01 	sts	0x01D3, r24
    1c14:	08 95       	ret
            break;
        case 36: play_note('C', 0, 4, 5);
            break;
        case 37: play_rest(2);
            break;
        case 38: play_note('G', 0, 3, 2);
    1c16:	22 e0       	ldi	r18, 0x02	; 2
    1c18:	43 e0       	ldi	r20, 0x03	; 3
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	87 e4       	ldi	r24, 0x47	; 71
    1c1e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1c22:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1c24:	10 92 d7 01 	sts	0x01D7, r1
    1c28:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	90 93 d4 01 	sts	0x01D4, r25
    1c34:	80 93 d3 01 	sts	0x01D3, r24
    1c38:	08 95       	ret
            break;
        case 34: play_note('B', 0, 3, 2);
            break;
        case 35: play_rest(4);
            break;
        case 36: play_note('C', 0, 4, 5);
    1c3a:	25 e0       	ldi	r18, 0x05	; 5
    1c3c:	44 e0       	ldi	r20, 0x04	; 4
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	83 e4       	ldi	r24, 0x43	; 67
    1c42:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1c46:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1c48:	10 92 d7 01 	sts	0x01D7, r1
    1c4c:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	90 93 d4 01 	sts	0x01D4, r25
    1c58:	80 93 d3 01 	sts	0x01D3, r24
    1c5c:	08 95       	ret
            break;
        case 32: play_note('C', 0, 4, 2);
            break;
        case 33: play_note('D', 0, 4, 2);
            break;
        case 34: play_note('B', 0, 3, 2);
    1c5e:	22 e0       	ldi	r18, 0x02	; 2
    1c60:	43 e0       	ldi	r20, 0x03	; 3
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	82 e4       	ldi	r24, 0x42	; 66
    1c66:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 31: play_rest(2);
            break;
        case 32: play_note('C', 0, 4, 2);
            break;
        case 33: play_note('D', 0, 4, 2);
    1c6a:	22 e0       	ldi	r18, 0x02	; 2
    1c6c:	44 e0       	ldi	r20, 0x04	; 4
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	84 e4       	ldi	r24, 0x44	; 68
    1c72:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 30: play_note('E', 0, 4, 2);
            break;
        case 31: play_rest(2);
            break;
        case 32: play_note('C', 0, 4, 2);
    1c76:	22 e0       	ldi	r18, 0x02	; 2
    1c78:	44 e0       	ldi	r20, 0x04	; 4
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	83 e4       	ldi	r24, 0x43	; 67
    1c7e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1c82:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1c84:	10 92 d7 01 	sts	0x01D7, r1
    1c88:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	90 93 d4 01 	sts	0x01D4, r25
    1c94:	80 93 d3 01 	sts	0x01D3, r24
    1c98:	08 95       	ret
            break;
        case 28: play_note('G', 0, 4, 2);
            break;
        case 29: play_rest(2);
            break;
        case 30: play_note('E', 0, 4, 2);
    1c9a:	22 e0       	ldi	r18, 0x02	; 2
    1c9c:	44 e0       	ldi	r20, 0x04	; 4
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	85 e4       	ldi	r24, 0x45	; 69
    1ca2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1ca6:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1ca8:	10 92 d7 01 	sts	0x01D7, r1
    1cac:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	90 93 d4 01 	sts	0x01D4, r25
    1cb8:	80 93 d3 01 	sts	0x01D3, r24
    1cbc:	08 95       	ret
            break;
        case 26: play_note('A', 0, 4, 4);
            break;
        case 27: play_note('F', 0, 4, 2);
            break;
        case 28: play_note('G', 0, 4, 2);
    1cbe:	22 e0       	ldi	r18, 0x02	; 2
    1cc0:	44 e0       	ldi	r20, 0x04	; 4
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	87 e4       	ldi	r24, 0x47	; 71
    1cc6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 25: play_note('G', 0, 4, 2);
            break;
        case 26: play_note('A', 0, 4, 4);
            break;
        case 27: play_note('F', 0, 4, 2);
    1cca:	22 e0       	ldi	r18, 0x02	; 2
    1ccc:	44 e0       	ldi	r20, 0x04	; 4
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	86 e4       	ldi	r24, 0x46	; 70
    1cd2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 24: play_rest(1);
            break;
        case 25: play_note('G', 0, 4, 2);
            break;
        case 26: play_note('A', 0, 4, 4);
    1cd6:	24 e0       	ldi	r18, 0x04	; 4
    1cd8:	44 e0       	ldi	r20, 0x04	; 4
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	81 e4       	ldi	r24, 0x41	; 65
    1cde:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 23: play_note('E', 0, 4, 2);
            break;
        case 24: play_rest(1);
            break;
        case 25: play_note('G', 0, 4, 2);
    1ce2:	22 e0       	ldi	r18, 0x02	; 2
    1ce4:	44 e0       	ldi	r20, 0x04	; 4
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	87 e4       	ldi	r24, 0x47	; 71
    1cea:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1cee:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1cf0:	10 92 d7 01 	sts	0x01D7, r1
    1cf4:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	90 93 d4 01 	sts	0x01D4, r25
    1d00:	80 93 d3 01 	sts	0x01D3, r24
    1d04:	08 95       	ret
            break;
        case 21: play_note('A', 0, 3, 4);
            break;
        case 22: play_note('G' , 0, 3, 3);
            break;
        case 23: play_note('E', 0, 4, 2);
    1d06:	22 e0       	ldi	r18, 0x02	; 2
    1d08:	44 e0       	ldi	r20, 0x04	; 4
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	85 e4       	ldi	r24, 0x45	; 69
    1d0e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 20: play_note('B', 1, 3, 2);
            break;
        case 21: play_note('A', 0, 3, 4);
            break;
        case 22: play_note('G' , 0, 3, 3);
    1d12:	23 e0       	ldi	r18, 0x03	; 3
    1d14:	43 e0       	ldi	r20, 0x03	; 3
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	87 e4       	ldi	r24, 0x47	; 71
    1d1a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 19: play_rest(2);
            break;
        case 20: play_note('B', 1, 3, 2);
            break;
        case 21: play_note('A', 0, 3, 4);
    1d1e:	24 e0       	ldi	r18, 0x04	; 4
    1d20:	43 e0       	ldi	r20, 0x03	; 3
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	81 e4       	ldi	r24, 0x41	; 65
    1d26:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 18: play_note('B', 0, 3, 2);
            break;
        case 19: play_rest(2);
            break;
        case 20: play_note('B', 1, 3, 2);
    1d2a:	22 e0       	ldi	r18, 0x02	; 2
    1d2c:	43 e0       	ldi	r20, 0x03	; 3
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	82 e4       	ldi	r24, 0x42	; 66
    1d32:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1d36:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1d38:	10 92 d7 01 	sts	0x01D7, r1
    1d3c:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	90 93 d4 01 	sts	0x01D4, r25
    1d48:	80 93 d3 01 	sts	0x01D3, r24
    1d4c:	08 95       	ret
            break;
        case 16: play_note('A', 0, 3, 2);
            break;
        case 17: play_rest(2);
            break;
        case 18: play_note('B', 0, 3, 2);
    1d4e:	22 e0       	ldi	r18, 0x02	; 2
    1d50:	43 e0       	ldi	r20, 0x03	; 3
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	82 e4       	ldi	r24, 0x42	; 66
    1d56:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1d5a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1d5c:	10 92 d7 01 	sts	0x01D7, r1
    1d60:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	90 93 d4 01 	sts	0x01D4, r25
    1d6c:	80 93 d3 01 	sts	0x01D3, r24
    1d70:	08 95       	ret
            break;
        case 14: play_note('E', 0, 3, 4);
            break;
        case 15: play_rest(2);
            break;
        case 16: play_note('A', 0, 3, 2);
    1d72:	22 e0       	ldi	r18, 0x02	; 2
    1d74:	43 e0       	ldi	r20, 0x03	; 3
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	81 e4       	ldi	r24, 0x41	; 65
    1d7a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1d7e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1d80:	10 92 d7 01 	sts	0x01D7, r1
    1d84:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	90 93 d4 01 	sts	0x01D4, r25
    1d90:	80 93 d3 01 	sts	0x01D3, r24
    1d94:	08 95       	ret
            break;
        case 12: play_note('G', 0, 3, 2);
            break;
        case 13: play_rest(4);
            break;
        case 14: play_note('E', 0, 3, 4);
    1d96:	24 e0       	ldi	r18, 0x04	; 4
    1d98:	43 e0       	ldi	r20, 0x03	; 3
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	85 e4       	ldi	r24, 0x45	; 69
    1d9e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1da2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1da4:	10 92 d7 01 	sts	0x01D7, r1
    1da8:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1dac:	84 e0       	ldi	r24, 0x04	; 4
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	90 93 d4 01 	sts	0x01D4, r25
    1db4:	80 93 d3 01 	sts	0x01D3, r24
    1db8:	08 95       	ret
            break;
        case 10: play_rest(8);
            break;
        case 11: play_note('C', 0, 4, 5);
            break;
        case 12: play_note('G', 0, 3, 2);
    1dba:	22 e0       	ldi	r18, 0x02	; 2
    1dbc:	43 e0       	ldi	r20, 0x03	; 3
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	87 e4       	ldi	r24, 0x47	; 71
    1dc2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 9: play_note('G', 0, 2, 8);
            break;
        case 10: play_rest(8);
            break;
        case 11: play_note('C', 0, 4, 5);
    1dc6:	25 e0       	ldi	r18, 0x05	; 5
    1dc8:	44 e0       	ldi	r20, 0x04	; 4
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	83 e4       	ldi	r24, 0x43	; 67
    1dce:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1dd2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1dd4:	10 92 d7 01 	sts	0x01D7, r1
    1dd8:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1ddc:	88 e0       	ldi	r24, 0x08	; 8
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	90 93 d4 01 	sts	0x01D4, r25
    1de4:	80 93 d3 01 	sts	0x01D3, r24
    1de8:	08 95       	ret
            break;
        case 7: play_note('E', 0, 4, 4);
            break;
        case 8: play_note('G', 0, 4, 8);
            break;
        case 9: play_note('G', 0, 2, 8);
    1dea:	28 e0       	ldi	r18, 0x08	; 8
    1dec:	42 e0       	ldi	r20, 0x02	; 2
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	87 e4       	ldi	r24, 0x47	; 71
    1df2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 6: play_note('C', 0, 4, 2);
            break;
        case 7: play_note('E', 0, 4, 4);
            break;
        case 8: play_note('G', 0, 4, 8);
    1df6:	28 e0       	ldi	r18, 0x08	; 8
    1df8:	44 e0       	ldi	r20, 0x04	; 4
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	87 e4       	ldi	r24, 0x47	; 71
    1dfe:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 5: play_rest(2);
            break;
        case 6: play_note('C', 0, 4, 2);
            break;
        case 7: play_note('E', 0, 4, 4);
    1e02:	24 e0       	ldi	r18, 0x04	; 4
    1e04:	44 e0       	ldi	r20, 0x04	; 4
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	85 e4       	ldi	r24, 0x45	; 69
    1e0a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 4: play_note('E', 0, 4, 2);
            break;
        case 5: play_rest(2);
            break;
        case 6: play_note('C', 0, 4, 2);
    1e0e:	22 e0       	ldi	r18, 0x02	; 2
    1e10:	44 e0       	ldi	r20, 0x04	; 4
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	83 e4       	ldi	r24, 0x43	; 67
    1e16:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1e1a:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1e1c:	10 92 d7 01 	sts	0x01D7, r1
    1e20:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	90 93 d4 01 	sts	0x01D4, r25
    1e2c:	80 93 d3 01 	sts	0x01D3, r24
    1e30:	08 95       	ret
            break;
        case 2: play_note('E', 0, 4, 3);
            break;
        case 3: play_rest(1);
            break;
        case 4: play_note('E', 0, 4, 2);
    1e32:	22 e0       	ldi	r18, 0x02	; 2
    1e34:	44 e0       	ldi	r20, 0x04	; 4
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	85 e4       	ldi	r24, 0x45	; 69
    1e3a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1e3e:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1e40:	10 92 d7 01 	sts	0x01D7, r1
    1e44:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	90 93 d4 01 	sts	0x01D4, r25
    1e50:	80 93 d3 01 	sts	0x01D3, r24
    1e54:	08 95       	ret
    switch (note) {
        case 0: play_note('E', 0, 4, 1);
            break;
        case 1: play_rest(1);
            break;
        case 2: play_note('E', 0, 4, 3);
    1e56:	23 e0       	ldi	r18, 0x03	; 3
    1e58:	44 e0       	ldi	r20, 0x04	; 4
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	85 e4       	ldi	r24, 0x45	; 69
    1e5e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1e62:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1e64:	10 92 d7 01 	sts	0x01D7, r1
    1e68:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	90 93 d4 01 	sts	0x01D4, r25
    1e74:	80 93 d3 01 	sts	0x01D3, r24
    1e78:	08 95       	ret
    }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
    switch (note) {
        case 0: play_note('E', 0, 4, 1);
    1e7a:	21 e0       	ldi	r18, 0x01	; 1
    1e7c:	44 e0       	ldi	r20, 0x04	; 4
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	85 e4       	ldi	r24, 0x45	; 69
    1e82:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1e86:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1e88:	10 92 d7 01 	sts	0x01D7, r1
    1e8c:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1e90:	88 e0       	ldi	r24, 0x08	; 8
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	90 93 d4 01 	sts	0x01D4, r25
    1e98:	80 93 d3 01 	sts	0x01D3, r24
    1e9c:	08 95       	ret

00001e9e <song3>:
            
    }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
    switch (note) {
    1e9e:	8f 31       	cpi	r24, 0x1F	; 31
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	20 f0       	brcs	.+8      	; 0x1eac <song3+0xe>
            break;
        case 29: play_note('G', 1, 5, 8);
            break;
        case 30: play_note('E', 0, 5, 8);
            break;
        default: notes=-1;
    1ea4:	8f ef       	ldi	r24, 0xFF	; 255
    1ea6:	80 93 cc 01 	sts	0x01CC, r24
    1eaa:	08 95       	ret
            
    }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
    switch (note) {
    1eac:	fc 01       	movw	r30, r24
    1eae:	e8 55       	subi	r30, 0x58	; 88
    1eb0:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb2:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1eb6:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1eb8:	10 92 d7 01 	sts	0x01D7, r1
    1ebc:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	90 93 d4 01 	sts	0x01D4, r25
    1ec8:	80 93 d3 01 	sts	0x01D3, r24
    1ecc:	08 95       	ret
            break;
        case 26: play_note('E', 0, 5, 3);
            break;
        case 27: play_rest(1); //rest 1
            break;
        case 28: play_note('E', 0, 5, 4);
    1ece:	24 e0       	ldi	r18, 0x04	; 4
    1ed0:	45 e0       	ldi	r20, 0x05	; 5
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	85 e4       	ldi	r24, 0x45	; 69
    1ed6:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 2: play_note('E', 0, 4, 7);
            break;
        case 3: play_rest(1);
            break;
        case 4: play_note('E', 0, 4, 7);
    1eda:	27 e0       	ldi	r18, 0x07	; 7
    1edc:	44 e0       	ldi	r20, 0x04	; 4
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	85 e4       	ldi	r24, 0x45	; 69
    1ee2:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 17: play_note('E', 1, 4, 7);
            break;
        case 18: play_rest(1);
            break;
        case 19: play_note('E', 1, 4, 7);
    1ee6:	27 e0       	ldi	r18, 0x07	; 7
    1ee8:	44 e0       	ldi	r20, 0x04	; 4
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	85 e4       	ldi	r24, 0x45	; 69
    1eee:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
}

void play_rest(uint8_t duration) {
    //mute for duration
    //duration is in 64th notes at 120bpm
    PORTD |= mute;
    1ef2:	92 9a       	sbi	0x12, 2	; 18
    beat=0;
    1ef4:	10 92 d7 01 	sts	0x01D7, r1
    1ef8:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = duration;
    1efc:	85 e0       	ldi	r24, 0x05	; 5
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	90 93 d4 01 	sts	0x01D4, r25
    1f04:	80 93 d3 01 	sts	0x01D3, r24
    1f08:	08 95       	ret
            break;
        case 28: play_note('E', 0, 5, 4);
            break;
        case 29: play_note('G', 1, 5, 8);
            break;
        case 30: play_note('E', 0, 5, 8);
    1f0a:	28 e0       	ldi	r18, 0x08	; 8
    1f0c:	45 e0       	ldi	r20, 0x05	; 5
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	85 e4       	ldi	r24, 0x45	; 69
    1f12:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 21: play_note('E', 1, 4, 3);
            break;
        case 22: play_rest(1);
            break;
        case 23: play_note('E', 1, 4, 3);
    1f16:	23 e0       	ldi	r18, 0x03	; 3
    1f18:	44 e0       	ldi	r20, 0x04	; 4
    1f1a:	61 e0       	ldi	r22, 0x01	; 1
    1f1c:	85 e4       	ldi	r24, 0x45	; 69
    1f1e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 6: play_note('E', 0, 4, 3);
            break;
        case 7: play_rest(1);
            break;
        case 8: play_note('E', 0, 4, 3);
    1f22:	23 e0       	ldi	r18, 0x03	; 3
    1f24:	44 e0       	ldi	r20, 0x04	; 4
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	85 e4       	ldi	r24, 0x45	; 69
    1f2a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 11: play_note('G', 1, 5, 4);
            break;
        case 12: play_note('E', 0, 5, 4);
            break;
        case 13: play_note('G', 0, 5, 8);
    1f2e:	28 e0       	ldi	r18, 0x08	; 8
    1f30:	45 e0       	ldi	r20, 0x05	; 5
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	87 e4       	ldi	r24, 0x47	; 71
    1f36:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 23: play_note('E', 1, 4, 3);
            break;
        case 24: play_rest(5);
            break;
        case 25: play_note('E', 1, 5, 4);
    1f3a:	24 e0       	ldi	r18, 0x04	; 4
    1f3c:	45 e0       	ldi	r20, 0x05	; 5
    1f3e:	61 e0       	ldi	r22, 0x01	; 1
    1f40:	85 e4       	ldi	r24, 0x45	; 69
    1f42:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 26: play_note('E', 0, 5, 3);
    1f46:	23 e0       	ldi	r18, 0x03	; 3
    1f48:	45 e0       	ldi	r20, 0x05	; 5
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	85 e4       	ldi	r24, 0x45	; 69
    1f4e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 9: play_rest(5);
            break;
        case 10: play_note('E', 0, 5, 4);
            break;
        case 11: play_note('G', 1, 5, 4);
    1f52:	24 e0       	ldi	r18, 0x04	; 4
    1f54:	45 e0       	ldi	r20, 0x05	; 5
    1f56:	61 e0       	ldi	r22, 0x01	; 1
    1f58:	87 e4       	ldi	r24, 0x47	; 71
    1f5a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>
            break;
        case 27: play_rest(1); //rest 1
            break;
        case 28: play_note('E', 0, 5, 4);
            break;
        case 29: play_note('G', 1, 5, 8);
    1f5e:	28 e0       	ldi	r18, 0x08	; 8
    1f60:	45 e0       	ldi	r20, 0x05	; 5
    1f62:	61 e0       	ldi	r22, 0x01	; 1
    1f64:	87 e4       	ldi	r24, 0x47	; 71
    1f66:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <play_note>

00001f6a <play_song>:
}//song3

void play_song(uint8_t song, uint8_t note) {
    //if you add a song, you'll have to add it to this
    //switch statement.
    switch (song) {
    1f6a:	81 30       	cpi	r24, 0x01	; 1
    1f6c:	89 f0       	breq	.+34     	; 0x1f90 <play_song+0x26>
    1f6e:	60 f0       	brcs	.+24     	; 0x1f88 <play_song+0x1e>
    1f70:	82 30       	cpi	r24, 0x02	; 2
    1f72:	31 f0       	breq	.+12     	; 0x1f80 <play_song+0x16>
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	41 f4       	brne	.+16     	; 0x1f88 <play_song+0x1e>
            break;
        case 1: song1(note); //tetris theme
            break;
        case 2: song2(note); //super mario bros
            break;
        case 3: song3(note);
    1f78:	86 2f       	mov	r24, r22
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <song3>
    switch (song) {
        case 0: song0(note); //beaver fight song
            break;
        case 1: song1(note); //tetris theme
            break;
        case 2: song2(note); //super mario bros
    1f80:	86 2f       	mov	r24, r22
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <song2>
            break;
        case 3: song3(note);
            break;
        default: song0(note); //defaults to beaver fight song
    1f88:	86 2f       	mov	r24, r22
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <song0>
    //if you add a song, you'll have to add it to this
    //switch statement.
    switch (song) {
        case 0: song0(note); //beaver fight song
            break;
        case 1: song1(note); //tetris theme
    1f90:	86 2f       	mov	r24, r22
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0c 94 af 09 	jmp	0x135e	; 0x135e <song1>

00001f98 <music_off>:
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    1f98:	10 92 cc 01 	sts	0x01CC, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    1f9c:	8e b5       	in	r24, 0x2e	; 46
    1f9e:	8c 7f       	andi	r24, 0xFC	; 252
    1fa0:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    1fa2:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	80 93 c5 01 	sts	0x01C5, r24
    1faa:	08 95       	ret

00001fac <music_on>:
}

void music_on(void) {
    //this starts the alarm timer running
    notes=0;
    1fac:	10 92 cc 01 	sts	0x01CC, r1
    TCCR1B |= (1<<CS11)|(1<<CS10);
    1fb0:	8e b5       	in	r24, 0x2e	; 46
    1fb2:	83 60       	ori	r24, 0x03	; 3
    1fb4:	8e bd       	out	0x2e, r24	; 46
    //unmutes the output
    PORTD &= unmute;
    1fb6:	92 98       	cbi	0x12, 2	; 18
    //and starts the selected song
    play_song(song, notes);
    1fb8:	60 91 cc 01 	lds	r22, 0x01CC
    1fbc:	80 91 d0 01 	lds	r24, 0x01D0
    1fc0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <play_song>
    music_off_flag = 0;
    1fc4:	10 92 c5 01 	sts	0x01C5, r1
    1fc8:	08 95       	ret

00001fca <music_init>:
}

// this can be considered a tcnt1_init, so if you run kellen_music, dont init tcnt1 in main file
void music_init(void) {
    //initially turned off (use music_on() to turn on)
    TIMSK |= (1<<OCIE1A);  //enable timer interrupt 1 on compare
    1fca:	87 b7       	in	r24, 0x37	; 55
    1fcc:	80 61       	ori	r24, 0x10	; 16
    1fce:	87 bf       	out	0x37, r24	; 55
    TCCR1A = 0x00;         //TCNT1, normal port operation
    1fd0:	1f bc       	out	0x2f, r1	; 47
    TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
    1fd2:	8e b5       	in	r24, 0x2e	; 46
    1fd4:	88 60       	ori	r24, 0x08	; 8
    1fd6:	8e bd       	out	0x2e, r24	; 46
    TCCR1C = 0x00;         //no forced compare
    1fd8:	10 92 7a 00 	sts	0x007A, r1
    OCR1A = 0x0031;        //(use to vary alarm frequency)
    1fdc:	81 e3       	ldi	r24, 0x31	; 49
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9b bd       	out	0x2b, r25	; 43
    1fe2:	8a bd       	out	0x2a, r24	; 42
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    1fe4:	10 92 cc 01 	sts	0x01CC, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    1fe8:	8e b5       	in	r24, 0x2e	; 46
    1fea:	8c 7f       	andi	r24, 0xFC	; 252
    1fec:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    1fee:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	80 93 c5 01 	sts	0x01C5, r24
    TCCR1A = 0x00;         //TCNT1, normal port operation
    TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
    TCCR1C = 0x00;         //no forced compare
    OCR1A = 0x0031;        //(use to vary alarm frequency)
    music_off();
    beat = 0;
    1ff6:	10 92 d7 01 	sts	0x01D7, r1
    1ffa:	10 92 d6 01 	sts	0x01D6, r1
    max_beat = 0;
    1ffe:	10 92 d4 01 	sts	0x01D4, r1
    2002:	10 92 d3 01 	sts	0x01D3, r1
    notes = 0;
    2006:	10 92 cc 01 	sts	0x01CC, r1
    song = 2;              //beaver fight song (or w/e song you want)
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	80 93 d0 01 	sts	0x01D0, r24
    2010:	08 95       	ret

00002012 <__vector_12>:
/*********************************************************************/
/*                             TIMER1_COMPA                          */
/*Oscillates pin7, PORTD for alarm tone output                       */
/*********************************************************************/

ISR(TIMER1_COMPA_vect) {
    2012:	1f 92       	push	r1
    2014:	0f 92       	push	r0
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	0f 92       	push	r0
    201a:	11 24       	eor	r1, r1
    201c:	0b b6       	in	r0, 0x3b	; 59
    201e:	0f 92       	push	r0
    2020:	2f 93       	push	r18
    2022:	3f 93       	push	r19
    2024:	4f 93       	push	r20
    2026:	5f 93       	push	r21
    2028:	6f 93       	push	r22
    202a:	7f 93       	push	r23
    202c:	8f 93       	push	r24
    202e:	9f 93       	push	r25
    2030:	af 93       	push	r26
    2032:	bf 93       	push	r27
    2034:	ef 93       	push	r30
    2036:	ff 93       	push	r31
    PORTD ^= ALARM_PIN;      //flips the bit, creating a tone
    2038:	82 b3       	in	r24, 0x12	; 18
    203a:	80 58       	subi	r24, 0x80	; 128
    203c:	82 bb       	out	0x12, r24	; 18
    if(beat >= max_beat) {   //if we've played the note long enough
    203e:	20 91 d6 01 	lds	r18, 0x01D6
    2042:	30 91 d7 01 	lds	r19, 0x01D7
    2046:	80 91 d3 01 	lds	r24, 0x01D3
    204a:	90 91 d4 01 	lds	r25, 0x01D4
    204e:	28 17       	cp	r18, r24
    2050:	39 07       	cpc	r19, r25
    2052:	58 f0       	brcs	.+22     	; 0x206a <__vector_12+0x58>
        notes++;               //move on to the next note
    2054:	80 91 cc 01 	lds	r24, 0x01CC
    2058:	8f 5f       	subi	r24, 0xFF	; 255
    205a:	80 93 cc 01 	sts	0x01CC, r24
        play_song(song, notes);//and play it
    205e:	60 91 cc 01 	lds	r22, 0x01CC
    2062:	80 91 d0 01 	lds	r24, 0x01D0
    2066:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <play_song>
    }
    206a:	ff 91       	pop	r31
    206c:	ef 91       	pop	r30
    206e:	bf 91       	pop	r27
    2070:	af 91       	pop	r26
    2072:	9f 91       	pop	r25
    2074:	8f 91       	pop	r24
    2076:	7f 91       	pop	r23
    2078:	6f 91       	pop	r22
    207a:	5f 91       	pop	r21
    207c:	4f 91       	pop	r20
    207e:	3f 91       	pop	r19
    2080:	2f 91       	pop	r18
    2082:	0f 90       	pop	r0
    2084:	0b be       	out	0x3b, r0	; 59
    2086:	0f 90       	pop	r0
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	0f 90       	pop	r0
    208c:	1f 90       	pop	r1
    208e:	18 95       	reti

00002090 <chk_buttons>:
//  the method will return a 1. Otherwise it returns a 0.
//*********************************************************************************
int16_t chk_buttons(uint8_t button) {  //check which button is pushed
    static uint16_t state[8] = {0x0000}; //holds present state
    if (!(PINA & 0x01)){
        state[button] = (state[button] << 1) | (!(PINA&0x01)) | 0xE000;
    2090:	e8 2f       	mov	r30, r24
    2092:	f0 e0       	ldi	r31, 0x00	; 0
//  be left shifted into the state variable. Once twelve true passes (0s) have been detected
//  the method will return a 1. Otherwise it returns a 0.
//*********************************************************************************
int16_t chk_buttons(uint8_t button) {  //check which button is pushed
    static uint16_t state[8] = {0x0000}; //holds present state
    if (!(PINA & 0x01)){
    2094:	c8 99       	sbic	0x19, 0	; 25
    2096:	1d c0       	rjmp	.+58     	; 0x20d2 <chk_buttons+0x42>
        state[button] = (state[button] << 1) | (!(PINA&0x01)) | 0xE000;
    2098:	89 b3       	in	r24, 0x19	; 25
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	ed 54       	subi	r30, 0x4D	; 77
    20a0:	fe 4f       	sbci	r31, 0xFE	; 254
    20a2:	80 95       	com	r24
    20a4:	28 2f       	mov	r18, r24
    20a6:	21 70       	andi	r18, 0x01	; 1
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	30 6e       	ori	r19, 0xE0	; 224
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	28 2b       	or	r18, r24
    20b6:	39 2b       	or	r19, r25
    20b8:	31 83       	std	Z+1, r19	; 0x01
    20ba:	20 83       	st	Z, r18
        if (state[0] == 0xF000) return 1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	20 91 b3 01 	lds	r18, 0x01B3
    20c4:	30 91 b4 01 	lds	r19, 0x01B4
    20c8:	21 15       	cp	r18, r1
    20ca:	30 4f       	sbci	r19, 0xF0	; 240
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <chk_buttons+0x40>
        return 0;
    }
    else {
        state[button] = (state[button] << 1) | (!bit_is_clear(PINA,button)) | 0xE000;
        if (state[button] == 0xF000)
    20ce:	80 e0       	ldi	r24, 0x00	; 0
            return 1;
        return 0;
    }
}
    20d0:	08 95       	ret
        state[button] = (state[button] << 1) | (!(PINA&0x01)) | 0xE000;
        if (state[0] == 0xF000) return 1;
        return 0;
    }
    else {
        state[button] = (state[button] << 1) | (!bit_is_clear(PINA,button)) | 0xE000;
    20d2:	49 b3       	in	r20, 0x19	; 25
    20d4:	ee 0f       	add	r30, r30
    20d6:	ff 1f       	adc	r31, r31
    20d8:	ed 54       	subi	r30, 0x4D	; 77
    20da:	fe 4f       	sbci	r31, 0xFE	; 254
    20dc:	20 81       	ld	r18, Z
    20de:	31 81       	ldd	r19, Z+1	; 0x01
    20e0:	22 0f       	add	r18, r18
    20e2:	33 1f       	adc	r19, r19
    20e4:	30 6e       	ori	r19, 0xE0	; 224
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <chk_buttons+0x5e>
    20ea:	55 95       	asr	r21
    20ec:	47 95       	ror	r20
    20ee:	8a 95       	dec	r24
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <chk_buttons+0x5a>
    20f2:	41 70       	andi	r20, 0x01	; 1
    20f4:	55 27       	eor	r21, r21
    20f6:	24 2b       	or	r18, r20
    20f8:	35 2b       	or	r19, r21
    20fa:	31 83       	std	Z+1, r19	; 0x01
    20fc:	20 83       	st	Z, r18
        if (state[button] == 0xF000)
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	21 15       	cp	r18, r1
    2104:	30 4f       	sbci	r19, 0xF0	; 240
    2106:	21 f3       	breq	.-56     	; 0x20d0 <chk_buttons+0x40>
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	e2 cf       	rjmp	.-60     	; 0x20d0 <chk_buttons+0x40>

0000210c <segment_value>:
//**********************************************************************************
//                                   segment_value
//  Determines the number value and colon_state blink/blank out of the digit_data segment_data,
//  which would later be displayed by the segment_display method.
//**********************************************************************************
void segment_value() {
    210c:	af 92       	push	r10
    210e:	bf 92       	push	r11
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	e7 ec       	ldi	r30, 0xC7	; 199
    2122:	ae 2e       	mov	r10, r30
    2124:	e1 e0       	ldi	r30, 0x01	; 1
    2126:	be 2e       	mov	r11, r30
    2128:	c8 ea       	ldi	r28, 0xA8	; 168
    212a:	d1 e0       	ldi	r29, 0x01	; 1
            case 7: segment_data[index] = 0xF8; break;  //7
            case 8: segment_data[index] = 0x80; break;  //8
            case 9: segment_data[index] = 0x90; break;  //9
            case 10: segment_data[index] = 0xFF; break; //blank out
            case 11: segment_data[index] = 0x04; break; //colon
            default: segment_data[index] = 0xFF;
    212c:	2f ef       	ldi	r18, 0xFF	; 255
            case 6: segment_data[index] = 0x82; break;  //6
            case 7: segment_data[index] = 0xF8; break;  //7
            case 8: segment_data[index] = 0x80; break;  //8
            case 9: segment_data[index] = 0x90; break;  //9
            case 10: segment_data[index] = 0xFF; break; //blank out
            case 11: segment_data[index] = 0x04; break; //colon
    212e:	f4 e0       	ldi	r31, 0x04	; 4
    2130:	cf 2e       	mov	r12, r31
            case 4: segment_data[index] = 0x99; break;  //4
            case 5: segment_data[index] = 0x92; break;  //5
            case 6: segment_data[index] = 0x82; break;  //6
            case 7: segment_data[index] = 0xF8; break;  //7
            case 8: segment_data[index] = 0x80; break;  //8
            case 9: segment_data[index] = 0x90; break;  //9
    2132:	a0 e9       	ldi	r26, 0x90	; 144
    2134:	da 2e       	mov	r13, r26
            case 3: segment_data[index] = 0xB0; break;  //3
            case 4: segment_data[index] = 0x99; break;  //4
            case 5: segment_data[index] = 0x92; break;  //5
            case 6: segment_data[index] = 0x82; break;  //6
            case 7: segment_data[index] = 0xF8; break;  //7
            case 8: segment_data[index] = 0x80; break;  //8
    2136:	b0 e8       	ldi	r27, 0x80	; 128
    2138:	eb 2e       	mov	r14, r27
            case 2: segment_data[index] = 0xA4; break;  //2
            case 3: segment_data[index] = 0xB0; break;  //3
            case 4: segment_data[index] = 0x99; break;  //4
            case 5: segment_data[index] = 0x92; break;  //5
            case 6: segment_data[index] = 0x82; break;  //6
            case 7: segment_data[index] = 0xF8; break;  //7
    213a:	18 ef       	ldi	r17, 0xF8	; 248
    213c:	f1 2e       	mov	r15, r17
            case 1: segment_data[index] = 0xF9; break;  //1
            case 2: segment_data[index] = 0xA4; break;  //2
            case 3: segment_data[index] = 0xB0; break;  //3
            case 4: segment_data[index] = 0x99; break;  //4
            case 5: segment_data[index] = 0x92; break;  //5
            case 6: segment_data[index] = 0x82; break;  //6
    213e:	02 e8       	ldi	r16, 0x82	; 130
            case 0: segment_data[index] = 0xC0; break;  //0
            case 1: segment_data[index] = 0xF9; break;  //1
            case 2: segment_data[index] = 0xA4; break;  //2
            case 3: segment_data[index] = 0xB0; break;  //3
            case 4: segment_data[index] = 0x99; break;  //4
            case 5: segment_data[index] = 0x92; break;  //5
    2140:	12 e9       	ldi	r17, 0x92	; 146
        switch (digit_data[index]){
            case 0: segment_data[index] = 0xC0; break;  //0
            case 1: segment_data[index] = 0xF9; break;  //1
            case 2: segment_data[index] = 0xA4; break;  //2
            case 3: segment_data[index] = 0xB0; break;  //3
            case 4: segment_data[index] = 0x99; break;  //4
    2142:	79 e9       	ldi	r23, 0x99	; 153
    for (index = 0; index < 5; index++) {
        switch (digit_data[index]){
            case 0: segment_data[index] = 0xC0; break;  //0
            case 1: segment_data[index] = 0xF9; break;  //1
            case 2: segment_data[index] = 0xA4; break;  //2
            case 3: segment_data[index] = 0xB0; break;  //3
    2144:	60 eb       	ldi	r22, 0xB0	; 176
    
    for (index = 0; index < 5; index++) {
        switch (digit_data[index]){
            case 0: segment_data[index] = 0xC0; break;  //0
            case 1: segment_data[index] = 0xF9; break;  //1
            case 2: segment_data[index] = 0xA4; break;  //2
    2146:	54 ea       	ldi	r21, 0xA4	; 164
    int index;
    
    for (index = 0; index < 5; index++) {
        switch (digit_data[index]){
            case 0: segment_data[index] = 0xC0; break;  //0
            case 1: segment_data[index] = 0xF9; break;  //1
    2148:	49 ef       	ldi	r20, 0xF9	; 249
void segment_value() {
    int index;
    
    for (index = 0; index < 5; index++) {
        switch (digit_data[index]){
            case 0: segment_data[index] = 0xC0; break;  //0
    214a:	30 ec       	ldi	r19, 0xC0	; 192
//**********************************************************************************
void segment_value() {
    int index;
    
    for (index = 0; index < 5; index++) {
        switch (digit_data[index]){
    214c:	f5 01       	movw	r30, r10
    214e:	81 91       	ld	r24, Z+
    2150:	5f 01       	movw	r10, r30
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	8c 30       	cpi	r24, 0x0C	; 12
    2156:	91 05       	cpc	r25, r1
    2158:	90 f0       	brcs	.+36     	; 0x217e <segment_value+0x72>
            case 7: segment_data[index] = 0xF8; break;  //7
            case 8: segment_data[index] = 0x80; break;  //8
            case 9: segment_data[index] = 0x90; break;  //9
            case 10: segment_data[index] = 0xFF; break; //blank out
            case 11: segment_data[index] = 0x04; break; //colon
            default: segment_data[index] = 0xFF;
    215a:	28 83       	st	Y, r18
    215c:	21 96       	adiw	r28, 0x01	; 1
//  which would later be displayed by the segment_display method.
//**********************************************************************************
void segment_value() {
    int index;
    
    for (index = 0; index < 5; index++) {
    215e:	fc ec       	ldi	r31, 0xCC	; 204
    2160:	af 16       	cp	r10, r31
    2162:	f1 e0       	ldi	r31, 0x01	; 1
    2164:	bf 06       	cpc	r11, r31
    2166:	91 f7       	brne	.-28     	; 0x214c <segment_value+0x40>
            case 10: segment_data[index] = 0xFF; break; //blank out
            case 11: segment_data[index] = 0x04; break; //colon
            default: segment_data[index] = 0xFF;
        }//switch
    }//for
}
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	1f 91       	pop	r17
    216e:	0f 91       	pop	r16
    2170:	ff 90       	pop	r15
    2172:	ef 90       	pop	r14
    2174:	df 90       	pop	r13
    2176:	cf 90       	pop	r12
    2178:	bf 90       	pop	r11
    217a:	af 90       	pop	r10
    217c:	08 95       	ret
//**********************************************************************************
void segment_value() {
    int index;
    
    for (index = 0; index < 5; index++) {
        switch (digit_data[index]){
    217e:	89 53       	subi	r24, 0x39	; 57
    2180:	9e 4f       	sbci	r25, 0xFE	; 254
    2182:	fc 01       	movw	r30, r24
    2184:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__tablejump2__>
            case 4: segment_data[index] = 0x99; break;  //4
            case 5: segment_data[index] = 0x92; break;  //5
            case 6: segment_data[index] = 0x82; break;  //6
            case 7: segment_data[index] = 0xF8; break;  //7
            case 8: segment_data[index] = 0x80; break;  //8
            case 9: segment_data[index] = 0x90; break;  //9
    2188:	d8 82       	st	Y, r13
    218a:	e8 cf       	rjmp	.-48     	; 0x215c <segment_value+0x50>
            case 3: segment_data[index] = 0xB0; break;  //3
            case 4: segment_data[index] = 0x99; break;  //4
            case 5: segment_data[index] = 0x92; break;  //5
            case 6: segment_data[index] = 0x82; break;  //6
            case 7: segment_data[index] = 0xF8; break;  //7
            case 8: segment_data[index] = 0x80; break;  //8
    218c:	e8 82       	st	Y, r14
    218e:	e6 cf       	rjmp	.-52     	; 0x215c <segment_value+0x50>
            case 2: segment_data[index] = 0xA4; break;  //2
            case 3: segment_data[index] = 0xB0; break;  //3
            case 4: segment_data[index] = 0x99; break;  //4
            case 5: segment_data[index] = 0x92; break;  //5
            case 6: segment_data[index] = 0x82; break;  //6
            case 7: segment_data[index] = 0xF8; break;  //7
    2190:	f8 82       	st	Y, r15
    2192:	e4 cf       	rjmp	.-56     	; 0x215c <segment_value+0x50>
            case 1: segment_data[index] = 0xF9; break;  //1
            case 2: segment_data[index] = 0xA4; break;  //2
            case 3: segment_data[index] = 0xB0; break;  //3
            case 4: segment_data[index] = 0x99; break;  //4
            case 5: segment_data[index] = 0x92; break;  //5
            case 6: segment_data[index] = 0x82; break;  //6
    2194:	08 83       	st	Y, r16
    2196:	e2 cf       	rjmp	.-60     	; 0x215c <segment_value+0x50>
            case 0: segment_data[index] = 0xC0; break;  //0
            case 1: segment_data[index] = 0xF9; break;  //1
            case 2: segment_data[index] = 0xA4; break;  //2
            case 3: segment_data[index] = 0xB0; break;  //3
            case 4: segment_data[index] = 0x99; break;  //4
            case 5: segment_data[index] = 0x92; break;  //5
    2198:	18 83       	st	Y, r17
    219a:	e0 cf       	rjmp	.-64     	; 0x215c <segment_value+0x50>
        switch (digit_data[index]){
            case 0: segment_data[index] = 0xC0; break;  //0
            case 1: segment_data[index] = 0xF9; break;  //1
            case 2: segment_data[index] = 0xA4; break;  //2
            case 3: segment_data[index] = 0xB0; break;  //3
            case 4: segment_data[index] = 0x99; break;  //4
    219c:	78 83       	st	Y, r23
    219e:	de cf       	rjmp	.-68     	; 0x215c <segment_value+0x50>
    for (index = 0; index < 5; index++) {
        switch (digit_data[index]){
            case 0: segment_data[index] = 0xC0; break;  //0
            case 1: segment_data[index] = 0xF9; break;  //1
            case 2: segment_data[index] = 0xA4; break;  //2
            case 3: segment_data[index] = 0xB0; break;  //3
    21a0:	68 83       	st	Y, r22
    21a2:	dc cf       	rjmp	.-72     	; 0x215c <segment_value+0x50>
    
    for (index = 0; index < 5; index++) {
        switch (digit_data[index]){
            case 0: segment_data[index] = 0xC0; break;  //0
            case 1: segment_data[index] = 0xF9; break;  //1
            case 2: segment_data[index] = 0xA4; break;  //2
    21a4:	58 83       	st	Y, r21
    21a6:	da cf       	rjmp	.-76     	; 0x215c <segment_value+0x50>
    int index;
    
    for (index = 0; index < 5; index++) {
        switch (digit_data[index]){
            case 0: segment_data[index] = 0xC0; break;  //0
            case 1: segment_data[index] = 0xF9; break;  //1
    21a8:	48 83       	st	Y, r20
    21aa:	d8 cf       	rjmp	.-80     	; 0x215c <segment_value+0x50>
void segment_value() {
    int index;
    
    for (index = 0; index < 5; index++) {
        switch (digit_data[index]){
            case 0: segment_data[index] = 0xC0; break;  //0
    21ac:	38 83       	st	Y, r19
    21ae:	d6 cf       	rjmp	.-84     	; 0x215c <segment_value+0x50>
            case 6: segment_data[index] = 0x82; break;  //6
            case 7: segment_data[index] = 0xF8; break;  //7
            case 8: segment_data[index] = 0x80; break;  //8
            case 9: segment_data[index] = 0x90; break;  //9
            case 10: segment_data[index] = 0xFF; break; //blank out
            case 11: segment_data[index] = 0x04; break; //colon
    21b0:	c8 82       	st	Y, r12
    21b2:	d4 cf       	rjmp	.-88     	; 0x215c <segment_value+0x50>

000021b4 <segment_display>:
// Otherwise seven segment is blanked out. Doing it this quickly gives the illusion
// of dimming the seven segment.

// All 7-segment LEDS are active low
//**********************************************************************************
void segment_display() {
    21b4:	21 e0       	ldi	r18, 0x01	; 1
    21b6:	30 e0       	ldi	r19, 0x00	; 0
                        _delay_ms(2);
                    break;
                    
                case 2: //colon_state
                   
                        PORTB = 0x20;
    21b8:	60 e2       	ldi	r22, 0x20	; 32
                        _delay_ms(2);
                    break;
                    
                case 3: //hundreds digit
                    
                        PORTB = 0x30;
    21ba:	50 e3       	ldi	r21, 0x30	; 48
                        PORTA = segment_data[0];
                        _delay_ms(2);
                    break;
                    
                case 1: //tens digit
                        PORTB = 0x10;
    21bc:	40 e1       	ldi	r20, 0x10	; 16
    21be:	c9 01       	movw	r24, r18
    21c0:	01 97       	sbiw	r24, 0x01	; 1
//**********************************************************************************
void segment_display() {
    int digits; //for looping through the digits digit_data
    
    for (digits = 0; digits < 5; digits++) {
            switch (digits) {
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	91 05       	cpc	r25, r1
    21c6:	39 f1       	breq	.+78     	; 0x2216 <segment_display+0x62>
    21c8:	83 30       	cpi	r24, 0x03	; 3
    21ca:	91 05       	cpc	r25, r1
    21cc:	8c f0       	brlt	.+34     	; 0x21f0 <segment_display+0x3c>
    21ce:	83 30       	cpi	r24, 0x03	; 3
    21d0:	91 05       	cpc	r25, r1
    21d2:	d1 f1       	breq	.+116    	; 0x2248 <segment_display+0x94>
    21d4:	04 97       	sbiw	r24, 0x04	; 4
    21d6:	51 f5       	brne	.+84     	; 0x222c <segment_display+0x78>
                        PORTA = segment_data[3];
                        _delay_ms(2);
                    break;
                    
                case 4: //thousands digit
                        PORTB = 0x40;
    21d8:	80 e4       	ldi	r24, 0x40	; 64
    21da:	88 bb       	out	0x18, r24	; 24
                        PORTA = segment_data[4];
    21dc:	80 91 ac 01 	lds	r24, 0x01AC
    21e0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21e2:	8f e3       	ldi	r24, 0x3F	; 63
    21e4:	9f e1       	ldi	r25, 0x1F	; 31
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <segment_display+0x32>
    21ea:	00 c0       	rjmp	.+0      	; 0x21ec <segment_display+0x38>
    21ec:	00 00       	nop
    21ee:	08 95       	ret
//**********************************************************************************
void segment_display() {
    int digits; //for looping through the digits digit_data
    
    for (digits = 0; digits < 5; digits++) {
            switch (digits) {
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	e1 f4       	brne	.+56     	; 0x222c <segment_display+0x78>
                        PORTA = segment_data[0];
                        _delay_ms(2);
                    break;
                    
                case 1: //tens digit
                        PORTB = 0x10;
    21f4:	48 bb       	out	0x18, r20	; 24
                        PORTA = segment_data[1];
    21f6:	80 91 a9 01 	lds	r24, 0x01A9
    21fa:	8b bb       	out	0x1b, r24	; 27
    21fc:	8f e3       	ldi	r24, 0x3F	; 63
    21fe:	9f e1       	ldi	r25, 0x1F	; 31
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <segment_display+0x4c>
    2204:	00 c0       	rjmp	.+0      	; 0x2206 <segment_display+0x52>
    2206:	00 00       	nop
    2208:	2f 5f       	subi	r18, 0xFF	; 255
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	c9 01       	movw	r24, r18
    220e:	01 97       	sbiw	r24, 0x01	; 1
//**********************************************************************************
void segment_display() {
    int digits; //for looping through the digits digit_data
    
    for (digits = 0; digits < 5; digits++) {
            switch (digits) {
    2210:	82 30       	cpi	r24, 0x02	; 2
    2212:	91 05       	cpc	r25, r1
    2214:	c9 f6       	brne	.-78     	; 0x21c8 <segment_display+0x14>
                        _delay_ms(2);
                    break;
                    
                case 2: //colon_state
                   
                        PORTB = 0x20;
    2216:	68 bb       	out	0x18, r22	; 24
                        PORTA = segment_data[2];
    2218:	80 91 aa 01 	lds	r24, 0x01AA
    221c:	8b bb       	out	0x1b, r24	; 27
    221e:	8f e3       	ldi	r24, 0x3F	; 63
    2220:	9f e1       	ldi	r25, 0x1F	; 31
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <segment_display+0x6e>
    2226:	00 c0       	rjmp	.+0      	; 0x2228 <segment_display+0x74>
    2228:	00 00       	nop
    222a:	ee cf       	rjmp	.-36     	; 0x2208 <segment_display+0x54>
    int digits; //for looping through the digits digit_data
    
    for (digits = 0; digits < 5; digits++) {
            switch (digits) {
                case 0: //ones digit
                        PORTB = 0x00;
    222c:	18 ba       	out	0x18, r1	; 24
                        PORTA = segment_data[0];
    222e:	80 91 a8 01 	lds	r24, 0x01A8
    2232:	8b bb       	out	0x1b, r24	; 27
    2234:	8f e3       	ldi	r24, 0x3F	; 63
    2236:	9f e1       	ldi	r25, 0x1F	; 31
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <segment_display+0x84>
    223c:	00 c0       	rjmp	.+0      	; 0x223e <segment_display+0x8a>
    223e:	00 00       	nop
// All 7-segment LEDS are active low
//**********************************************************************************
void segment_display() {
    int digits; //for looping through the digits digit_data
    
    for (digits = 0; digits < 5; digits++) {
    2240:	25 30       	cpi	r18, 0x05	; 5
    2242:	31 05       	cpc	r19, r1
    2244:	09 f7       	brne	.-62     	; 0x2208 <segment_display+0x54>
    2246:	08 95       	ret
                        _delay_ms(2);
                    break;
                    
                case 3: //hundreds digit
                    
                        PORTB = 0x30;
    2248:	58 bb       	out	0x18, r21	; 24
                        PORTA = segment_data[3];
    224a:	80 91 ab 01 	lds	r24, 0x01AB
    224e:	8b bb       	out	0x1b, r24	; 27
    2250:	8f e3       	ldi	r24, 0x3F	; 63
    2252:	9f e1       	ldi	r25, 0x1F	; 31
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <segment_display+0xa0>
    2258:	00 c0       	rjmp	.+0      	; 0x225a <segment_display+0xa6>
    225a:	00 00       	nop
    225c:	d5 cf       	rjmp	.-86     	; 0x2208 <segment_display+0x54>

0000225e <spi_init>:
// parameters are set up: master mode, clock=clk/2, half phase cycle,
// low polarity, MSB first interrupts disabled, poll SPIF bit in SPSR to
// check transmit completion.
/***********************************************************************/
void spi_init(void){
    SPCR |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
    225e:	8d b1       	in	r24, 0x0d	; 13
    2260:	80 65       	ori	r24, 0x50	; 80
    2262:	8d b9       	out	0x0d, r24	; 13
    SPSR |= (1<<SPI2X);   // double speed operation
    2264:	70 9a       	sbi	0x0e, 0	; 14
    2266:	08 95       	ret

00002268 <tcnt0_init>:
// Initializes timer/counter0. TCNT0 allows running
// in async mode with an external 32khz crystal. If running in normal mode,
// there is no prescaling. Overflow interrupt occurs at 0xFF.
/***********************************************************************/
void tcnt0_init(void){
    ASSR  |= (1<<AS0);  //ext osc TOSC
    2268:	80 b7       	in	r24, 0x30	; 48
    226a:	88 60       	ori	r24, 0x08	; 8
    226c:	80 bf       	out	0x30, r24	; 48
    TIMSK |= (1<<TOIE0);  //enable timer/counter0 overflow interrupt
    226e:	87 b7       	in	r24, 0x37	; 55
    2270:	81 60       	ori	r24, 0x01	; 1
    2272:	87 bf       	out	0x37, r24	; 55
    TCCR0 |= (1<<CS00);  //normal mode, no prescale
    2274:	83 b7       	in	r24, 0x33	; 51
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	83 bf       	out	0x33, r24	; 51
    227a:	08 95       	ret

0000227c <tcnt2_init>:
//***********************************************************************/
//                          tcnt2_init
// Initialize timer counter 2 to allow LED dimming through PWM
//***********************************************************************/
void tcnt2_init(void){
    DDRB  |= (1<<PB7);
    227c:	bf 9a       	sbi	0x17, 7	; 23
    TCCR2 &= (0<<FOC2); //no forced compare. fast pwm mode. Set OC2 on compare match
    227e:	85 b5       	in	r24, 0x25	; 37
    2280:	15 bc       	out	0x25, r1	; 37
    TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20);
    2282:	85 b5       	in	r24, 0x25	; 37
    2284:	88 67       	ori	r24, 0x78	; 120
    2286:	85 bd       	out	0x25, r24	; 37
    TCCR2 |= (1<<CS20); //normal mode, no prescaler
    2288:	85 b5       	in	r24, 0x25	; 37
    228a:	81 60       	ori	r24, 0x01	; 1
    228c:	85 bd       	out	0x25, r24	; 37
    OCR2  = 0x00; //initialize OCR register for PWM
    228e:	13 bc       	out	0x23, r1	; 35
    2290:	08 95       	ret

00002292 <tcnt3_init>:
// cleared at BOTTOM. Function is for automatically changing volume of
// alarm on the audio amplifier board.
//
//***********************************************************************/
void tcnt3_init(void){
    DDRE  |= (1<<PE3);
    2292:	13 9a       	sbi	0x02, 3	; 2
    PORTE |= (1<<PE3); //enable pullups
    2294:	1b 9a       	sbi	0x03, 3	; 3
    TCCR3A |= ( 1<<COM3A1 ) | ( 1<<COM3A0 ) | ( 1<<WGM31 ); // fast pwm, set on match.
    2296:	eb e8       	ldi	r30, 0x8B	; 139
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	82 6c       	ori	r24, 0xC2	; 194
    229e:	80 83       	st	Z, r24
    TCCR3B |= ( 1<<WGM33 ) | ( 1<<WGM32 ) | ( 1<<CS30 );  // ICR3 for TOP, clk/1, no prescale
    22a0:	ea e8       	ldi	r30, 0x8A	; 138
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	89 61       	ori	r24, 0x19	; 25
    22a8:	80 83       	st	Z, r24
    TCCR3C  = 0x00; //no forced compare
    22aa:	10 92 8c 00 	sts	0x008C, r1
    ICR3 = 0x0FFF; //Input capture register
    22ae:	8f ef       	ldi	r24, 0xFF	; 255
    22b0:	9f e0       	ldi	r25, 0x0F	; 15
    22b2:	90 93 81 00 	sts	0x0081, r25
    22b6:	80 93 80 00 	sts	0x0080, r24
    22ba:	08 95       	ret

000022bc <adc_init>:
// The ADC module contains a prescaler that generates a acceptable ADC clock
// frequency from CPU. This prescaler is decided by the ADPSn registers.
//***********************************************************************/
void adc_init(void)
{
    DDRF &= 0xFE;
    22bc:	e1 e6       	ldi	r30, 0x61	; 97
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	8e 7f       	andi	r24, 0xFE	; 254
    22c4:	80 83       	st	Z, r24
    PORTF &= 0xFE;
    22c6:	e2 e6       	ldi	r30, 0x62	; 98
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	8e 7f       	andi	r24, 0xFE	; 254
    22ce:	80 83       	st	Z, r24
    ADMUX |= (1<<REFS0) | (1<<ADLAR); //AVCC with external capacitor at AREF pin.
    22d0:	87 b1       	in	r24, 0x07	; 7
    22d2:	80 66       	ori	r24, 0x60	; 96
    22d4:	87 b9       	out	0x07, r24	; 7
    //left adjusted, just read ADCH, otherwise,
    //need to read ADCL at first, then read ADCH
    //set ADC enable, start conversion, free running mode, enable adc interrupt
    ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADFR) | (1<<ADIE);
    22d6:	86 b1       	in	r24, 0x06	; 6
    22d8:	88 6e       	ori	r24, 0xE8	; 232
    22da:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // set clk/128 prescaler
    22dc:	86 b1       	in	r24, 0x06	; 6
    22de:	87 60       	ori	r24, 0x07	; 7
    22e0:	86 b9       	out	0x06, r24	; 6
    22e2:	08 95       	ret

000022e4 <encoders>:
    uint8_t tempRight, prevRight;
    uint8_t tempLeft, prevLeft;
    
    uint8_t encoder_mode; //determines left or right rotation
    uint8_t left_encoder;
    PORTE = 0x00;         // SH/LD = 0 CLK_INH = 0
    22e4:	13 b8       	out	0x03, r1	; 3
    PORTE |= 0x80;        // SH/LD = 1 CLK_INH = 0
    22e6:	1f 9a       	sbi	0x03, 7	; 3
    
    //make a copy of the left and right encoder data
    tempLeft = spi_out & 0x03;
    tempRight = spi_out & 0x0C;
    22e8:	98 2f       	mov	r25, r24
    22ea:	9c 70       	andi	r25, 0x0C	; 12
    
    if (tempLeft == prevLeft) encoder_mode = 1;       //keep left state and switch right state
    if (tempRight == prevRight) encoder_mode = 0;     //keep right state and switch left state
    22ec:	29 f1       	breq	.+74     	; 0x2338 <encoders+0x54>
        if ((left_encoder == 0xC0) & (clock_mode == 0)) displayBits |= 0x80;
        //show that left encoder can work underlying this state of right one
    }
    
    if(encoder_mode == 1) {  //switch right
        spi_out = (spi_out & 0x0C) >> 2;
    22ee:	89 2f       	mov	r24, r25
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	95 95       	asr	r25
    22f4:	87 95       	ror	r24
    22f6:	95 95       	asr	r25
    22f8:	87 95       	ror	r24
    22fa:	38 2f       	mov	r19, r24
        switch (rightState){
    22fc:	20 91 eb 01 	lds	r18, 0x01EB
    2300:	21 30       	cpi	r18, 0x01	; 1
    2302:	d1 f1       	breq	.+116    	; 0x2378 <encoders+0x94>
    2304:	08 f4       	brcc	.+2      	; 0x2308 <encoders+0x24>
    2306:	b2 c0       	rjmp	.+356    	; 0x246c <encoders+0x188>
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	09 f4       	brne	.+2      	; 0x230e <encoders+0x2a>
    230c:	95 c0       	rjmp	.+298    	; 0x2438 <encoders+0x154>
    230e:	23 30       	cpi	r18, 0x03	; 3
    2310:	09 f0       	breq	.+2      	; 0x2314 <encoders+0x30>
    2312:	46 c0       	rjmp	.+140    	; 0x23a0 <encoders+0xbc>
                if (spi_out == 2) rightState = 2;
                if (spi_out == 3) rightState = 3;
                break;
                
            case 3:
                if (prevRightState == 1) {
    2314:	20 91 ec 01 	lds	r18, 0x01EC
    2318:	21 30       	cpi	r18, 0x01	; 1
    231a:	09 f4       	brne	.+2      	; 0x231e <encoders+0x3a>
    231c:	fb c0       	rjmp	.+502    	; 0x2514 <encoders+0x230>
                    count = 1;
                    count_sign = 1;
                }//clockwise
                
                if (prevRightState == 2) {
    231e:	22 30       	cpi	r18, 0x02	; 2
    2320:	09 f4       	brne	.+2      	; 0x2324 <encoders+0x40>
    2322:	ce c0       	rjmp	.+412    	; 0x24c0 <encoders+0x1dc>
                    count = 1;
                    count_sign = -1;
                }//counterclockwise
                
                prevRightState = rightState;
    2324:	23 e0       	ldi	r18, 0x03	; 3
    2326:	20 93 ec 01 	sts	0x01EC, r18
                
                if (spi_out == 0) rightState = 0;
    232a:	33 23       	and	r19, r19
    232c:	b1 f1       	breq	.+108    	; 0x239a <encoders+0xb6>
                if (spi_out == 1) rightState = 1;
    232e:	31 30       	cpi	r19, 0x01	; 1
    2330:	c1 f1       	breq	.+112    	; 0x23a2 <encoders+0xbe>
                if (spi_out == 2) rightState = 2;
    2332:	32 30       	cpi	r19, 0x02	; 2
    2334:	b1 f1       	breq	.+108    	; 0x23a2 <encoders+0xbe>
    2336:	08 95       	ret
    
    if (tempLeft == prevLeft) encoder_mode = 1;       //keep left state and switch right state
    if (tempRight == prevRight) encoder_mode = 0;     //keep right state and switch left state
    
    if(encoder_mode == 0) {  //switch left
        spi_out &= 0x03;
    2338:	83 70       	andi	r24, 0x03	; 3
        switch (leftState){
    233a:	90 91 e9 01 	lds	r25, 0x01E9
    233e:	91 30       	cpi	r25, 0x01	; 1
    2340:	09 f4       	brne	.+2      	; 0x2344 <encoders+0x60>
    2342:	51 c0       	rjmp	.+162    	; 0x23e6 <encoders+0x102>
    2344:	88 f1       	brcs	.+98     	; 0x23a8 <encoders+0xc4>
    2346:	92 30       	cpi	r25, 0x02	; 2
    2348:	09 f4       	brne	.+2      	; 0x234c <encoders+0x68>
    234a:	61 c0       	rjmp	.+194    	; 0x240e <encoders+0x12a>
    234c:	93 30       	cpi	r25, 0x03	; 3
    234e:	09 f0       	breq	.+2      	; 0x2352 <encoders+0x6e>
    2350:	5a c0       	rjmp	.+180    	; 0x2406 <encoders+0x122>
                if (spi_out == 2) leftState = 2;
                if (spi_out == 3) leftState = 3;
                break;
                
            case 3:
                if (prevLeftState == 1) {
    2352:	90 91 ed 01 	lds	r25, 0x01ED
    2356:	91 30       	cpi	r25, 0x01	; 1
    2358:	09 f4       	brne	.+2      	; 0x235c <encoders+0x78>
    235a:	c5 c0       	rjmp	.+394    	; 0x24e6 <encoders+0x202>
                    count = 1;
                    count_sign = 1;
                }//clockwise
                
                if (prevLeftState == 2) {
    235c:	92 30       	cpi	r25, 0x02	; 2
    235e:	09 f4       	brne	.+2      	; 0x2362 <encoders+0x7e>
    2360:	a8 c0       	rjmp	.+336    	; 0x24b2 <encoders+0x1ce>
                    count = 1;
                    count_sign = -1;
                }//counterclockwise
                
                prevLeftState = leftState;
    2362:	93 e0       	ldi	r25, 0x03	; 3
    2364:	90 93 ed 01 	sts	0x01ED, r25
                if (spi_out == 0) leftState = 0;
    2368:	88 23       	and	r24, r24
    236a:	09 f4       	brne	.+2      	; 0x236e <encoders+0x8a>
    236c:	49 c0       	rjmp	.+146    	; 0x2400 <encoders+0x11c>
                if (spi_out == 1) leftState = 1;
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	59 f1       	breq	.+86     	; 0x23c8 <encoders+0xe4>
                if (spi_out == 2) leftState = 2;
    2372:	82 30       	cpi	r24, 0x02	; 2
    2374:	49 f1       	breq	.+82     	; 0x23c8 <encoders+0xe4>
    2376:	2a c0       	rjmp	.+84     	; 0x23cc <encoders+0xe8>
                if (spi_out == 2) rightState = 2;
                if (spi_out == 3) rightState = 3;
                break;
                
            case 1:
                if (prevRightState == 0) {
    2378:	40 91 ec 01 	lds	r20, 0x01EC
    237c:	44 23       	and	r20, r20
    237e:	09 f4       	brne	.+2      	; 0x2382 <encoders+0x9e>
    2380:	8d c0       	rjmp	.+282    	; 0x249c <encoders+0x1b8>
                    count = 1;
                    count_sign = 1;
                }//counterclockwise
                
                if (prevRightState == 3) {
    2382:	43 30       	cpi	r20, 0x03	; 3
    2384:	29 f4       	brne	.+10     	; 0x2390 <encoders+0xac>
                    count = 1;
    2386:	20 93 02 01 	sts	0x0102, r18
                    count_sign = -1;
    238a:	2f ef       	ldi	r18, 0xFF	; 255
    238c:	20 93 c6 01 	sts	0x01C6, r18
                }//clockwise
                
                prevRightState = rightState;
    2390:	21 e0       	ldi	r18, 0x01	; 1
    2392:	20 93 ec 01 	sts	0x01EC, r18
                if (spi_out == 0) rightState = 0;
    2396:	31 11       	cpse	r19, r1
    2398:	75 c0       	rjmp	.+234    	; 0x2484 <encoders+0x1a0>
                    count_sign = -1;
                }//counterclockwise
                
                prevRightState = rightState;
                
                if (spi_out == 0) rightState = 0;
    239a:	10 92 eb 01 	sts	0x01EB, r1
    239e:	08 95       	ret
                if (spi_out == 1) rightState = 1;
                if (spi_out == 2) rightState = 2;
                break;
                
            default: rightState = 3;
    23a0:	83 e0       	ldi	r24, 0x03	; 3
    23a2:	80 93 eb 01 	sts	0x01EB, r24
    23a6:	08 95       	ret
                if (spi_out == 1) leftState = 1;
                if (spi_out == 3) leftState = 3;
                break;
                
            case 0:
                if (prevLeftState == 2) {
    23a8:	90 91 ed 01 	lds	r25, 0x01ED
    23ac:	92 30       	cpi	r25, 0x02	; 2
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <encoders+0xce>
    23b0:	94 c0       	rjmp	.+296    	; 0x24da <encoders+0x1f6>
                    count = 1;
                    count_sign = 1;
                }//clockwise
                
                if (prevLeftState == 1) {
    23b2:	91 30       	cpi	r25, 0x01	; 1
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <encoders+0xd4>
    23b6:	77 c0       	rjmp	.+238    	; 0x24a6 <encoders+0x1c2>
                    count = 1;
                    count_sign = -1;
                }//counterclockwise
                
                prevLeftState = leftState;
    23b8:	10 92 ed 01 	sts	0x01ED, r1
                if (spi_out == 1) leftState = 1;
    23bc:	81 30       	cpi	r24, 0x01	; 1
    23be:	21 f0       	breq	.+8      	; 0x23c8 <encoders+0xe4>
                    count_sign = -1;
                }//counterclockwise
                
                prevLeftState = leftState;
                if (spi_out == 0) leftState = 0;
                if (spi_out == 2) leftState = 2;
    23c0:	82 30       	cpi	r24, 0x02	; 2
    23c2:	11 f0       	breq	.+4      	; 0x23c8 <encoders+0xe4>
                if (spi_out == 3) leftState = 3;
    23c4:	83 30       	cpi	r24, 0x03	; 3
    23c6:	11 f4       	brne	.+4      	; 0x23cc <encoders+0xe8>
                }//counterclockwise
                
                prevLeftState = leftState;
                if (spi_out == 0) leftState = 0;
                if (spi_out == 1) leftState = 1;
                if (spi_out == 2) leftState = 2;
    23c8:	80 93 e9 01 	sts	0x01E9, r24
                default: leftState = 3;
        }//switch
        
        left_encoder &= 0xC0;
        left_encoder |= (spi_out << 6);
        if ((left_encoder == 0xC0) & (clock_mode == 0)) displayBits |= 0x80;
    23cc:	83 30       	cpi	r24, 0x03	; 3
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <encoders+0xee>
    23d0:	b2 cf       	rjmp	.-156    	; 0x2336 <encoders+0x52>
    23d2:	80 91 a0 01 	lds	r24, 0x01A0
    23d6:	81 11       	cpse	r24, r1
    23d8:	ae cf       	rjmp	.-164    	; 0x2336 <encoders+0x52>
    23da:	80 91 a7 01 	lds	r24, 0x01A7
    23de:	80 68       	ori	r24, 0x80	; 128
    23e0:	80 93 a7 01 	sts	0x01A7, r24
    23e4:	08 95       	ret
                if (spi_out == 2) leftState = 2;
                if (spi_out == 3) leftState = 3;
                break;
                
            case 1:
                if (prevLeftState == 0) {
    23e6:	20 91 ed 01 	lds	r18, 0x01ED
    23ea:	21 11       	cpse	r18, r1
    23ec:	4e c0       	rjmp	.+156    	; 0x248a <encoders+0x1a6>
                    count = 1;
    23ee:	90 93 02 01 	sts	0x0102, r25
                    count_sign = 1;
    23f2:	90 93 c6 01 	sts	0x01C6, r25
                if (prevLeftState == 3) {
                    count = 1;
                    count_sign = -1;
                }//counterclockwise
                
                prevLeftState = leftState;
    23f6:	91 e0       	ldi	r25, 0x01	; 1
    23f8:	90 93 ed 01 	sts	0x01ED, r25
                if (spi_out == 0) leftState = 0;
    23fc:	81 11       	cpse	r24, r1
    23fe:	e0 cf       	rjmp	.-64     	; 0x23c0 <encoders+0xdc>
                    count = 1;
                    count_sign = -1;
                }//counterclockwise
                
                prevLeftState = leftState;
                if (spi_out == 0) leftState = 0;
    2400:	10 92 e9 01 	sts	0x01E9, r1
    2404:	e3 cf       	rjmp	.-58     	; 0x23cc <encoders+0xe8>
                if (spi_out == 1) leftState = 1;
                if (spi_out == 2) leftState = 2;
                break;
                
                default: leftState = 3;
    2406:	93 e0       	ldi	r25, 0x03	; 3
    2408:	90 93 e9 01 	sts	0x01E9, r25
    240c:	df cf       	rjmp	.-66     	; 0x23cc <encoders+0xe8>
    
    if(encoder_mode == 0) {  //switch left
        spi_out &= 0x03;
        switch (leftState){
            case 2:
                if (prevLeftState == 3) {
    240e:	90 91 ed 01 	lds	r25, 0x01ED
    2412:	93 30       	cpi	r25, 0x03	; 3
    2414:	09 f4       	brne	.+2      	; 0x2418 <encoders+0x134>
    2416:	6c c0       	rjmp	.+216    	; 0x24f0 <encoders+0x20c>
                    count = 1;
                    count_sign = 1;
                }//turn clockwise, the sum is incremented
                if (prevLeftState == 0) {
    2418:	91 11       	cpse	r25, r1
    241a:	06 c0       	rjmp	.+12     	; 0x2428 <encoders+0x144>
                    count = 1;
    241c:	91 e0       	ldi	r25, 0x01	; 1
    241e:	90 93 02 01 	sts	0x0102, r25
                    count_sign = -1;
    2422:	9f ef       	ldi	r25, 0xFF	; 255
    2424:	90 93 c6 01 	sts	0x01C6, r25
                }//turn counterclockwise, the sum is decremented
                
                prevLeftState = leftState; //store current left state as previous state for next case
    2428:	92 e0       	ldi	r25, 0x02	; 2
    242a:	90 93 ed 01 	sts	0x01ED, r25
                if (spi_out == 0) leftState = 0;
    242e:	88 23       	and	r24, r24
    2430:	39 f3       	breq	.-50     	; 0x2400 <encoders+0x11c>
                if (spi_out == 1) leftState = 1;
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	49 f2       	breq	.-110    	; 0x23c8 <encoders+0xe4>
    2436:	c6 cf       	rjmp	.-116    	; 0x23c4 <encoders+0xe0>
    
    if(encoder_mode == 1) {  //switch right
        spi_out = (spi_out & 0x0C) >> 2;
        switch (rightState){
            case 2:
                if (prevRightState == 3) {
    2438:	20 91 ec 01 	lds	r18, 0x01EC
    243c:	23 30       	cpi	r18, 0x03	; 3
    243e:	09 f4       	brne	.+2      	; 0x2442 <encoders+0x15e>
    2440:	5d c0       	rjmp	.+186    	; 0x24fc <encoders+0x218>
                    count = 1;
                    count_sign = 1;
                }//turn clockwise, the sum is incremented
                
                if (prevRightState == 0) {
    2442:	21 11       	cpse	r18, r1
    2444:	06 c0       	rjmp	.+12     	; 0x2452 <encoders+0x16e>
                    count = 1;
    2446:	21 e0       	ldi	r18, 0x01	; 1
    2448:	20 93 02 01 	sts	0x0102, r18
                    count_sign = -1;
    244c:	2f ef       	ldi	r18, 0xFF	; 255
    244e:	20 93 c6 01 	sts	0x01C6, r18
                }//turns counterclockwise, the sum is decremented
                
                prevRightState = rightState; //store current state for next case call
    2452:	22 e0       	ldi	r18, 0x02	; 2
    2454:	20 93 ec 01 	sts	0x01EC, r18
                if (spi_out == 0) rightState = 0;
    2458:	33 23       	and	r19, r19
    245a:	09 f4       	brne	.+2      	; 0x245e <encoders+0x17a>
    245c:	9e cf       	rjmp	.-196    	; 0x239a <encoders+0xb6>
                if (spi_out == 1) rightState = 1;
    245e:	31 30       	cpi	r19, 0x01	; 1
    2460:	09 f4       	brne	.+2      	; 0x2464 <encoders+0x180>
    2462:	9f cf       	rjmp	.-194    	; 0x23a2 <encoders+0xbe>
                }//clockwise
                
                prevRightState = rightState;
                if (spi_out == 0) rightState = 0;
                if (spi_out == 2) rightState = 2;
                if (spi_out == 3) rightState = 3;
    2464:	33 30       	cpi	r19, 0x03	; 3
    2466:	09 f4       	brne	.+2      	; 0x246a <encoders+0x186>
    2468:	9c cf       	rjmp	.-200    	; 0x23a2 <encoders+0xbe>
    246a:	65 cf       	rjmp	.-310    	; 0x2336 <encoders+0x52>
                if (spi_out == 1) rightState = 1;
                if (spi_out == 3) rightState = 3;
                break;
                
            case 0:
                if (prevRightState == 2) {
    246c:	20 91 ec 01 	lds	r18, 0x01EC
    2470:	22 30       	cpi	r18, 0x02	; 2
    2472:	09 f4       	brne	.+2      	; 0x2476 <encoders+0x192>
    2474:	49 c0       	rjmp	.+146    	; 0x2508 <encoders+0x224>
                    count = 1;
                    count_sign = 1;
                }//clockwise
                
                if (prevRightState == 1) {
    2476:	21 30       	cpi	r18, 0x01	; 1
    2478:	51 f1       	breq	.+84     	; 0x24ce <encoders+0x1ea>
                    count = 1;
                    count_sign = -1;
                }//counterclockwise
                
                prevRightState = rightState;
    247a:	10 92 ec 01 	sts	0x01EC, r1
                if (spi_out == 1) rightState = 1;
    247e:	31 30       	cpi	r19, 0x01	; 1
    2480:	09 f4       	brne	.+2      	; 0x2484 <encoders+0x1a0>
    2482:	8f cf       	rjmp	.-226    	; 0x23a2 <encoders+0xbe>
                    count_sign = -1;
                }//clockwise
                
                prevRightState = rightState;
                if (spi_out == 0) rightState = 0;
                if (spi_out == 2) rightState = 2;
    2484:	32 30       	cpi	r19, 0x02	; 2
    2486:	71 f7       	brne	.-36     	; 0x2464 <encoders+0x180>
    2488:	8c cf       	rjmp	.-232    	; 0x23a2 <encoders+0xbe>
                if (prevLeftState == 0) {
                    count = 1;
                    count_sign = 1;
                }//clockwise
                
                if (prevLeftState == 3) {
    248a:	23 30       	cpi	r18, 0x03	; 3
    248c:	09 f0       	breq	.+2      	; 0x2490 <encoders+0x1ac>
    248e:	b3 cf       	rjmp	.-154    	; 0x23f6 <encoders+0x112>
                    count = 1;
    2490:	90 93 02 01 	sts	0x0102, r25
                    count_sign = -1;
    2494:	9f ef       	ldi	r25, 0xFF	; 255
    2496:	90 93 c6 01 	sts	0x01C6, r25
    249a:	ad cf       	rjmp	.-166    	; 0x23f6 <encoders+0x112>
                if (spi_out == 3) rightState = 3;
                break;
                
            case 1:
                if (prevRightState == 0) {
                    count = 1;
    249c:	20 93 02 01 	sts	0x0102, r18
                    count_sign = 1;
    24a0:	20 93 c6 01 	sts	0x01C6, r18
    24a4:	75 cf       	rjmp	.-278    	; 0x2390 <encoders+0xac>
                    count = 1;
                    count_sign = 1;
                }//clockwise
                
                if (prevLeftState == 1) {
                    count = 1;
    24a6:	90 93 02 01 	sts	0x0102, r25
                    count_sign = -1;
    24aa:	9f ef       	ldi	r25, 0xFF	; 255
    24ac:	90 93 c6 01 	sts	0x01C6, r25
    24b0:	83 cf       	rjmp	.-250    	; 0x23b8 <encoders+0xd4>
                    count = 1;
                    count_sign = 1;
                }//clockwise
                
                if (prevLeftState == 2) {
                    count = 1;
    24b2:	91 e0       	ldi	r25, 0x01	; 1
    24b4:	90 93 02 01 	sts	0x0102, r25
                    count_sign = -1;
    24b8:	9f ef       	ldi	r25, 0xFF	; 255
    24ba:	90 93 c6 01 	sts	0x01C6, r25
    24be:	51 cf       	rjmp	.-350    	; 0x2362 <encoders+0x7e>
                    count = 1;
                    count_sign = 1;
                }//clockwise
                
                if (prevRightState == 2) {
                    count = 1;
    24c0:	21 e0       	ldi	r18, 0x01	; 1
    24c2:	20 93 02 01 	sts	0x0102, r18
                    count_sign = -1;
    24c6:	2f ef       	ldi	r18, 0xFF	; 255
    24c8:	20 93 c6 01 	sts	0x01C6, r18
    24cc:	2b cf       	rjmp	.-426    	; 0x2324 <encoders+0x40>
                    count = 1;
                    count_sign = 1;
                }//clockwise
                
                if (prevRightState == 1) {
                    count = 1;
    24ce:	20 93 02 01 	sts	0x0102, r18
                    count_sign = -1;
    24d2:	2f ef       	ldi	r18, 0xFF	; 255
    24d4:	20 93 c6 01 	sts	0x01C6, r18
    24d8:	d0 cf       	rjmp	.-96     	; 0x247a <encoders+0x196>
                if (spi_out == 3) leftState = 3;
                break;
                
            case 0:
                if (prevLeftState == 2) {
                    count = 1;
    24da:	91 e0       	ldi	r25, 0x01	; 1
    24dc:	90 93 02 01 	sts	0x0102, r25
                    count_sign = 1;
    24e0:	90 93 c6 01 	sts	0x01C6, r25
    24e4:	69 cf       	rjmp	.-302    	; 0x23b8 <encoders+0xd4>
                if (spi_out == 3) leftState = 3;
                break;
                
            case 3:
                if (prevLeftState == 1) {
                    count = 1;
    24e6:	90 93 02 01 	sts	0x0102, r25
                    count_sign = 1;
    24ea:	90 93 c6 01 	sts	0x01C6, r25
    24ee:	39 cf       	rjmp	.-398    	; 0x2362 <encoders+0x7e>
    if(encoder_mode == 0) {  //switch left
        spi_out &= 0x03;
        switch (leftState){
            case 2:
                if (prevLeftState == 3) {
                    count = 1;
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	90 93 02 01 	sts	0x0102, r25
                    count_sign = 1;
    24f6:	90 93 c6 01 	sts	0x01C6, r25
    24fa:	96 cf       	rjmp	.-212    	; 0x2428 <encoders+0x144>
    if(encoder_mode == 1) {  //switch right
        spi_out = (spi_out & 0x0C) >> 2;
        switch (rightState){
            case 2:
                if (prevRightState == 3) {
                    count = 1;
    24fc:	21 e0       	ldi	r18, 0x01	; 1
    24fe:	20 93 02 01 	sts	0x0102, r18
                    count_sign = 1;
    2502:	20 93 c6 01 	sts	0x01C6, r18
    2506:	a5 cf       	rjmp	.-182    	; 0x2452 <encoders+0x16e>
                if (spi_out == 3) rightState = 3;
                break;
                
            case 0:
                if (prevRightState == 2) {
                    count = 1;
    2508:	21 e0       	ldi	r18, 0x01	; 1
    250a:	20 93 02 01 	sts	0x0102, r18
                    count_sign = 1;
    250e:	20 93 c6 01 	sts	0x01C6, r18
    2512:	b3 cf       	rjmp	.-154    	; 0x247a <encoders+0x196>
                if (spi_out == 3) rightState = 3;
                break;
                
            case 3:
                if (prevRightState == 1) {
                    count = 1;
    2514:	20 93 02 01 	sts	0x0102, r18
                    count_sign = 1;
    2518:	20 93 c6 01 	sts	0x01C6, r18
    251c:	03 cf       	rjmp	.-506    	; 0x2324 <encoders+0x40>

0000251e <TIMER3_COMP_vect>:
/*********************************************************************
//                              TIMER3_COMP_vect
// TIMER3 vector which runs whenever a volume change service routine is requested.
//
//********************************************************************/
ISR(TIMER3_COMP_vect){
    251e:	1f 92       	push	r1
    2520:	0f 92       	push	r0
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	0f 92       	push	r0
    2526:	11 24       	eor	r1, r1
    2528:	2f 93       	push	r18
    252a:	3f 93       	push	r19
    252c:	8f 93       	push	r24
    252e:	9f 93       	push	r25
    volume = count_sign * 20;
    2530:	20 91 c6 01 	lds	r18, 0x01C6
    2534:	84 e1       	ldi	r24, 0x14	; 20
    2536:	28 02       	muls	r18, r24
    2538:	90 01       	movw	r18, r0
    253a:	11 24       	eor	r1, r1
    253c:	30 93 cf 01 	sts	0x01CF, r19
    2540:	20 93 ce 01 	sts	0x01CE, r18
    OCR3A = 0x0F00 - volume;          //output volume PWM
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	9f e0       	ldi	r25, 0x0F	; 15
    2548:	82 1b       	sub	r24, r18
    254a:	93 0b       	sbc	r25, r19
    254c:	90 93 87 00 	sts	0x0087, r25
    2550:	80 93 86 00 	sts	0x0086, r24

    if (OCR3A < 300) alarm_state = 0; //mute mode
    2554:	80 91 86 00 	lds	r24, 0x0086
    2558:	90 91 87 00 	lds	r25, 0x0087
    255c:	8c 32       	cpi	r24, 0x2C	; 44
    255e:	91 40       	sbci	r25, 0x01	; 1
    2560:	60 f0       	brcs	.+24     	; 0x257a <TIMER3_COMP_vect+0x5c>
    else alarm_state = 1;             //active mode
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	80 93 d1 01 	sts	0x01D1, r24
}
    2568:	9f 91       	pop	r25
    256a:	8f 91       	pop	r24
    256c:	3f 91       	pop	r19
    256e:	2f 91       	pop	r18
    2570:	0f 90       	pop	r0
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	0f 90       	pop	r0
    2576:	1f 90       	pop	r1
    2578:	18 95       	reti
//********************************************************************/
ISR(TIMER3_COMP_vect){
    volume = count_sign * 20;
    OCR3A = 0x0F00 - volume;          //output volume PWM

    if (OCR3A < 300) alarm_state = 0; //mute mode
    257a:	10 92 d1 01 	sts	0x01D1, r1
    257e:	f4 cf       	rjmp	.-24     	; 0x2568 <TIMER3_COMP_vect+0x4a>

00002580 <__vector_21>:
// Everytime the interrupt is called, the ADC reads voltage from the photoresistor
// voltage divider. Then, the ADC integer value is fed into a lookup table, and
// OCR2 will have its value set accordingly. The dimming occurs through comparison
// between OCR2 and TCNT2.
//***********************************************************************/
ISR(ADC_vect){
    2580:	1f 92       	push	r1
    2582:	0f 92       	push	r0
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	0f 92       	push	r0
    2588:	11 24       	eor	r1, r1
    258a:	8f 93       	push	r24
    258c:	9f 93       	push	r25
    
    uint8_t adc_out;
    adc_out = ADCH; //ADCL and ADCH, but only 8 bits needed
    258e:	85 b1       	in	r24, 0x05	; 5
    if(adc_out >= 222 && adc_out <= 237) {OCR2 = 45;}
    if(adc_out >= 238 && adc_out <= 253) {OCR2 = 30;}
     */
    
    
    if(adc_out >= 0 && adc_out <= 15) {OCR2 = 30;}
    2590:	80 31       	cpi	r24, 0x10	; 16
    2592:	10 f4       	brcc	.+4      	; 0x2598 <__vector_21+0x18>
    2594:	9e e1       	ldi	r25, 0x1E	; 30
    2596:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 16 && adc_out <= 31) {OCR2 = 40;}
    2598:	90 ef       	ldi	r25, 0xF0	; 240
    259a:	98 0f       	add	r25, r24
    259c:	90 31       	cpi	r25, 0x10	; 16
    259e:	10 f4       	brcc	.+4      	; 0x25a4 <__vector_21+0x24>
    25a0:	98 e2       	ldi	r25, 0x28	; 40
    25a2:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 31 && adc_out <= 46) {OCR2 = 50;}
    25a4:	91 ee       	ldi	r25, 0xE1	; 225
    25a6:	98 0f       	add	r25, r24
    25a8:	90 31       	cpi	r25, 0x10	; 16
    25aa:	10 f4       	brcc	.+4      	; 0x25b0 <__vector_21+0x30>
    25ac:	92 e3       	ldi	r25, 0x32	; 50
    25ae:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 47 && adc_out <= 62) {OCR2 = 60;}
    25b0:	91 ed       	ldi	r25, 0xD1	; 209
    25b2:	98 0f       	add	r25, r24
    25b4:	90 31       	cpi	r25, 0x10	; 16
    25b6:	10 f4       	brcc	.+4      	; 0x25bc <__vector_21+0x3c>
    25b8:	9c e3       	ldi	r25, 0x3C	; 60
    25ba:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 63 && adc_out <= 78) {OCR2 = 70;}
    25bc:	91 ec       	ldi	r25, 0xC1	; 193
    25be:	98 0f       	add	r25, r24
    25c0:	90 31       	cpi	r25, 0x10	; 16
    25c2:	10 f4       	brcc	.+4      	; 0x25c8 <__vector_21+0x48>
    25c4:	96 e4       	ldi	r25, 0x46	; 70
    25c6:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 79 && adc_out <= 94) {OCR2 = 80;}
    25c8:	91 eb       	ldi	r25, 0xB1	; 177
    25ca:	98 0f       	add	r25, r24
    25cc:	90 31       	cpi	r25, 0x10	; 16
    25ce:	10 f4       	brcc	.+4      	; 0x25d4 <__vector_21+0x54>
    25d0:	90 e5       	ldi	r25, 0x50	; 80
    25d2:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 95 && adc_out <= 110) {OCR2 = 90;}
    25d4:	91 ea       	ldi	r25, 0xA1	; 161
    25d6:	98 0f       	add	r25, r24
    25d8:	90 31       	cpi	r25, 0x10	; 16
    25da:	10 f4       	brcc	.+4      	; 0x25e0 <__vector_21+0x60>
    25dc:	9a e5       	ldi	r25, 0x5A	; 90
    25de:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 110 && adc_out <= 125) {OCR2 = 100;}
    25e0:	92 e9       	ldi	r25, 0x92	; 146
    25e2:	98 0f       	add	r25, r24
    25e4:	90 31       	cpi	r25, 0x10	; 16
    25e6:	10 f4       	brcc	.+4      	; 0x25ec <__vector_21+0x6c>
    25e8:	94 e6       	ldi	r25, 0x64	; 100
    25ea:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 126 && adc_out <= 141) {OCR2 = 110;}
    25ec:	92 e8       	ldi	r25, 0x82	; 130
    25ee:	98 0f       	add	r25, r24
    25f0:	90 31       	cpi	r25, 0x10	; 16
    25f2:	10 f4       	brcc	.+4      	; 0x25f8 <__vector_21+0x78>
    25f4:	9e e6       	ldi	r25, 0x6E	; 110
    25f6:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 142 && adc_out <= 157) {OCR2 = 120;}
    25f8:	92 e7       	ldi	r25, 0x72	; 114
    25fa:	98 0f       	add	r25, r24
    25fc:	90 31       	cpi	r25, 0x10	; 16
    25fe:	10 f4       	brcc	.+4      	; 0x2604 <__vector_21+0x84>
    2600:	98 e7       	ldi	r25, 0x78	; 120
    2602:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 158 && adc_out <= 173) {OCR2 = 130;}
    2604:	92 e6       	ldi	r25, 0x62	; 98
    2606:	98 0f       	add	r25, r24
    2608:	90 31       	cpi	r25, 0x10	; 16
    260a:	10 f4       	brcc	.+4      	; 0x2610 <__vector_21+0x90>
    260c:	92 e8       	ldi	r25, 0x82	; 130
    260e:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 174 && adc_out <= 189) {OCR2 = 140;}
    2610:	92 e5       	ldi	r25, 0x52	; 82
    2612:	98 0f       	add	r25, r24
    2614:	90 31       	cpi	r25, 0x10	; 16
    2616:	10 f4       	brcc	.+4      	; 0x261c <__vector_21+0x9c>
    2618:	9c e8       	ldi	r25, 0x8C	; 140
    261a:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 190 && adc_out <= 205) {OCR2 = 150;}
    261c:	92 e4       	ldi	r25, 0x42	; 66
    261e:	98 0f       	add	r25, r24
    2620:	90 31       	cpi	r25, 0x10	; 16
    2622:	10 f4       	brcc	.+4      	; 0x2628 <__vector_21+0xa8>
    2624:	96 e9       	ldi	r25, 0x96	; 150
    2626:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 206 && adc_out <= 221) {OCR2 = 160;}
    2628:	92 e3       	ldi	r25, 0x32	; 50
    262a:	98 0f       	add	r25, r24
    262c:	90 31       	cpi	r25, 0x10	; 16
    262e:	10 f4       	brcc	.+4      	; 0x2634 <__vector_21+0xb4>
    2630:	90 ea       	ldi	r25, 0xA0	; 160
    2632:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 222 && adc_out <= 237) {OCR2 = 170;}
    2634:	92 e2       	ldi	r25, 0x22	; 34
    2636:	98 0f       	add	r25, r24
    2638:	90 31       	cpi	r25, 0x10	; 16
    263a:	10 f4       	brcc	.+4      	; 0x2640 <__vector_21+0xc0>
    263c:	9a ea       	ldi	r25, 0xAA	; 170
    263e:	93 bd       	out	0x23, r25	; 35
    if(adc_out >= 238 && adc_out <= 253) {OCR2 = 180;}
    2640:	8e 5e       	subi	r24, 0xEE	; 238
    2642:	80 31       	cpi	r24, 0x10	; 16
    2644:	10 f4       	brcc	.+4      	; 0x264a <__vector_21+0xca>
    2646:	84 eb       	ldi	r24, 0xB4	; 180
    2648:	83 bd       	out	0x23, r24	; 35
    
}
    264a:	9f 91       	pop	r25
    264c:	8f 91       	pop	r24
    264e:	0f 90       	pop	r0
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	0f 90       	pop	r0
    2654:	1f 90       	pop	r1
    2656:	18 95       	reti

00002658 <run_alarm>:
//***********************************************************************************
//                                      run_alarm
// when called, runs the alarm, using case statements from kellen_music.c as the audio
//***********************************************************************************
void run_alarm() {
    if (alarm == 0) {
    2658:	80 91 98 01 	lds	r24, 0x0198
    265c:	88 23       	and	r24, r24
    265e:	89 f0       	breq	.+34     	; 0x2682 <run_alarm+0x2a>
        music_on();
        alarm = 1;
        stop = 0;
    }
    else {  // run alarm
        ms++;
    2660:	80 91 d2 01 	lds	r24, 0x01D2
    2664:	8f 5f       	subi	r24, 0xFF	; 255
    2666:	80 93 d2 01 	sts	0x01D2, r24
        if(ms % 8 == 0) beat++;   //play notes (64th notes)
    266a:	87 70       	andi	r24, 0x07	; 7
    266c:	49 f4       	brne	.+18     	; 0x2680 <run_alarm+0x28>
    266e:	80 91 d6 01 	lds	r24, 0x01D6
    2672:	90 91 d7 01 	lds	r25, 0x01D7
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	90 93 d7 01 	sts	0x01D7, r25
    267c:	80 93 d6 01 	sts	0x01D6, r24
    2680:	08 95       	ret
//                                      run_alarm
// when called, runs the alarm, using case statements from kellen_music.c as the audio
//***********************************************************************************
void run_alarm() {
    if (alarm == 0) {
        music_on();
    2682:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <music_on>
        alarm = 1;
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	80 93 98 01 	sts	0x0198, r24
        stop = 0;
    268c:	10 92 97 01 	sts	0x0197, r1
    2690:	08 95       	ret

00002692 <alarm_mode>:
// Runs the alarm again after the snooze method has been called.
//***********************************************************************************
void alarm_mode() {
    
    //24hr mode (24hr mode alarm / 12hr mode alarm at p.m.)
    if ((time_notation_flag == 0) && (am_pm_flag == 0)) {
    2692:	80 91 9a 01 	lds	r24, 0x019A
    2696:	81 11       	cpse	r24, r1
    2698:	1b c0       	rjmp	.+54     	; 0x26d0 <alarm_mode+0x3e>
    269a:	80 91 99 01 	lds	r24, 0x0199
    269e:	81 11       	cpse	r24, r1
    26a0:	19 c0       	rjmp	.+50     	; 0x26d4 <alarm_mode+0x42>
        if ((displayBits & 0x10) != 0x10) {    //24hr mode
    26a2:	80 91 a7 01 	lds	r24, 0x01A7
            if ((minutes == alarm_m) && (hours == (alarm_h))) {
    26a6:	90 91 a3 01 	lds	r25, 0x01A3
//***********************************************************************************
void alarm_mode() {
    
    //24hr mode (24hr mode alarm / 12hr mode alarm at p.m.)
    if ((time_notation_flag == 0) && (am_pm_flag == 0)) {
        if ((displayBits & 0x10) != 0x10) {    //24hr mode
    26aa:	84 fd       	sbrc	r24, 4
    26ac:	3a c0       	rjmp	.+116    	; 0x2722 <alarm_mode+0x90>
            if ((minutes == alarm_m) && (hours == (alarm_h))) {
    26ae:	80 91 9c 01 	lds	r24, 0x019C
    26b2:	98 17       	cp	r25, r24
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <alarm_mode+0x26>
    26b6:	45 c0       	rjmp	.+138    	; 0x2742 <alarm_mode+0xb0>
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    26b8:	10 92 cc 01 	sts	0x01CC, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    26bc:	8e b5       	in	r24, 0x2e	; 46
    26be:	8c 7f       	andi	r24, 0xFC	; 252
    26c0:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    26c2:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	80 93 c5 01 	sts	0x01C5, r24
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm = 0;     // reset alarm
    26ca:	10 92 98 01 	sts	0x0198, r1
    26ce:	08 95       	ret
            if ((minutes == alarm_m) && (hours == (alarm_h - 12)))
                run_alarm();  // run alarm
            else stop_alarm();
        }
    }
    else if ((time_notation_flag == 1) && (am_pm_flag == 0)) { //12hr mode clock and 24hr mode alarm
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	29 f0       	breq	.+10     	; 0x26de <alarm_mode+0x4c>
        else if ((hours == 12) && ((displayBits & 0x10) == 0x10)) {// at noon
            if ((minutes == alarm_m) && (hours == alarm_h)) run_alarm();
            else stop_alarm();
        }
    }
    else if (snooze_flag == 1) { //if S6 is pressed
    26d4:	80 91 96 01 	lds	r24, 0x0196
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	e1 f0       	breq	.+56     	; 0x2714 <alarm_mode+0x82>
    26dc:	08 95       	ret
            if ((minutes == alarm_m) && (hours == (alarm_h - 12)))
                run_alarm();  // run alarm
            else stop_alarm();
        }
    }
    else if ((time_notation_flag == 1) && (am_pm_flag == 0)) { //12hr mode clock and 24hr mode alarm
    26de:	80 91 99 01 	lds	r24, 0x0199
    26e2:	81 11       	cpse	r24, r1
    26e4:	f7 cf       	rjmp	.-18     	; 0x26d4 <alarm_mode+0x42>
        if ((hours == 12) && ((displayBits & 0x20) == 0x20)) { // at midnights
    26e6:	20 91 a4 01 	lds	r18, 0x01A4
    26ea:	80 91 a7 01 	lds	r24, 0x01A7
    26ee:	2c 30       	cpi	r18, 0x0C	; 12
    26f0:	99 f1       	breq	.+102    	; 0x2758 <alarm_mode+0xc6>
            if ((minutes == alarm_m) && (hours == (alarm_h + 12))) run_alarm();
            else stop_alarm();
        }
        else if ((displayBits & 0x20) == 0x20) {  // from 1:00 am to 11:59 am
    26f2:	85 ff       	sbrs	r24, 5
    26f4:	4c c0       	rjmp	.+152    	; 0x278e <alarm_mode+0xfc>
            if ((minutes == alarm_m) && (hours == (alarm_h + 12))) run_alarm();
    26f6:	90 91 a3 01 	lds	r25, 0x01A3
    26fa:	80 91 9c 01 	lds	r24, 0x019C
    26fe:	98 13       	cpse	r25, r24
    2700:	db cf       	rjmp	.-74     	; 0x26b8 <alarm_mode+0x26>
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	80 91 9b 01 	lds	r24, 0x019B
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0c 96       	adiw	r24, 0x0c	; 12
    270c:	28 17       	cp	r18, r24
    270e:	39 07       	cpc	r19, r25
    2710:	99 f6       	brne	.-90     	; 0x26b8 <alarm_mode+0x26>
    2712:	05 c0       	rjmp	.+10     	; 0x271e <alarm_mode+0x8c>
            if ((minutes == alarm_m) && (hours == alarm_h)) run_alarm();
            else stop_alarm();
        }
    }
    else if (snooze_flag == 1) { //if S6 is pressed
        song++;      //switch to next song
    2714:	80 91 d0 01 	lds	r24, 0x01D0
    2718:	8f 5f       	subi	r24, 0xFF	; 255
    271a:	80 93 d0 01 	sts	0x01D0, r24
        run_alarm(); //run alarm again
    271e:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <run_alarm>
                else stop_alarm();  // stop alarm after running for 1 minute
            }
            else stop_alarm();  // stop alarm after running 1 min
        }
        else if ((displayBits & 0x10) == 0x10) {  //from 1:00 pm to 11:59 pm
            if ((minutes == alarm_m) && (hours == (alarm_h - 12)))
    2722:	80 91 9c 01 	lds	r24, 0x019C
    2726:	98 13       	cpse	r25, r24
    2728:	c7 cf       	rjmp	.-114    	; 0x26b8 <alarm_mode+0x26>
    272a:	20 91 a4 01 	lds	r18, 0x01A4
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	80 91 9b 01 	lds	r24, 0x019B
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0c 97       	sbiw	r24, 0x0c	; 12
    2738:	28 17       	cp	r18, r24
    273a:	39 07       	cpc	r19, r25
    273c:	09 f0       	breq	.+2      	; 0x2740 <alarm_mode+0xae>
    273e:	bc cf       	rjmp	.-136    	; 0x26b8 <alarm_mode+0x26>
    2740:	ee cf       	rjmp	.-36     	; 0x271e <alarm_mode+0x8c>
void alarm_mode() {
    
    //24hr mode (24hr mode alarm / 12hr mode alarm at p.m.)
    if ((time_notation_flag == 0) && (am_pm_flag == 0)) {
        if ((displayBits & 0x10) != 0x10) {    //24hr mode
            if ((minutes == alarm_m) && (hours == (alarm_h))) {
    2742:	90 91 a4 01 	lds	r25, 0x01A4
    2746:	80 91 9b 01 	lds	r24, 0x019B
    274a:	98 13       	cpse	r25, r24
    274c:	b5 cf       	rjmp	.-150    	; 0x26b8 <alarm_mode+0x26>
                if (stop == 0)  run_alarm();  // run alarm
    274e:	80 91 97 01 	lds	r24, 0x0197
    2752:	81 11       	cpse	r24, r1
    2754:	b1 cf       	rjmp	.-158    	; 0x26b8 <alarm_mode+0x26>
    2756:	e3 cf       	rjmp	.-58     	; 0x271e <alarm_mode+0x8c>
                run_alarm();  // run alarm
            else stop_alarm();
        }
    }
    else if ((time_notation_flag == 1) && (am_pm_flag == 0)) { //12hr mode clock and 24hr mode alarm
        if ((hours == 12) && ((displayBits & 0x20) == 0x20)) { // at midnights
    2758:	85 ff       	sbrs	r24, 5
    275a:	0b c0       	rjmp	.+22     	; 0x2772 <alarm_mode+0xe0>
            if ((minutes == alarm_m) && (hours == (alarm_h + 12))) run_alarm();
    275c:	90 91 a3 01 	lds	r25, 0x01A3
    2760:	80 91 9c 01 	lds	r24, 0x019C
    2764:	98 13       	cpse	r25, r24
    2766:	a8 cf       	rjmp	.-176    	; 0x26b8 <alarm_mode+0x26>
    2768:	80 91 9b 01 	lds	r24, 0x019B
    276c:	81 11       	cpse	r24, r1
    276e:	a4 cf       	rjmp	.-184    	; 0x26b8 <alarm_mode+0x26>
    2770:	d6 cf       	rjmp	.-84     	; 0x271e <alarm_mode+0x8c>
        }
        else if ((displayBits & 0x20) == 0x20) {  // from 1:00 am to 11:59 am
            if ((minutes == alarm_m) && (hours == (alarm_h + 12))) run_alarm();
            else stop_alarm();
        }
        else if ((hours == 12) && ((displayBits & 0x10) == 0x10)) {// at noon
    2772:	84 ff       	sbrs	r24, 4
    2774:	b3 cf       	rjmp	.-154    	; 0x26dc <alarm_mode+0x4a>
            if ((minutes == alarm_m) && (hours == alarm_h)) run_alarm();
    2776:	90 91 a3 01 	lds	r25, 0x01A3
    277a:	80 91 9c 01 	lds	r24, 0x019C
    277e:	98 13       	cpse	r25, r24
    2780:	9b cf       	rjmp	.-202    	; 0x26b8 <alarm_mode+0x26>
    2782:	80 91 9b 01 	lds	r24, 0x019B
    2786:	8c 30       	cpi	r24, 0x0C	; 12
    2788:	09 f0       	breq	.+2      	; 0x278c <alarm_mode+0xfa>
    278a:	96 cf       	rjmp	.-212    	; 0x26b8 <alarm_mode+0x26>
    278c:	c8 cf       	rjmp	.-112    	; 0x271e <alarm_mode+0x8c>
    278e:	08 95       	ret

00002790 <clk_count>:
//    am_pm_flag = 0 ---- the time changed from 11:59 a.m. to 12:00 p.m.
//    am_pm_flag = 1 ---- the time changed from 12:59 p.m. to 1:00 p.m.
//***********************************************************************/
void clk_count(uint8_t timer1) {
    
    if ((timer1 % 128) == 0) {
    2790:	8f 77       	andi	r24, 0x7F	; 127
    2792:	89 f4       	brne	.+34     	; 0x27b6 <clk_count+0x26>
        colon_state = !colon_state; //blinks or blanks the colon_state every second
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	80 91 d5 01 	lds	r24, 0x01D5
    279a:	81 11       	cpse	r24, r1
    279c:	38 c0       	rjmp	.+112    	; 0x280e <clk_count+0x7e>
    279e:	90 93 d5 01 	sts	0x01D5, r25
        seconds += 1;
    27a2:	80 91 a2 01 	lds	r24, 0x01A2
    27a6:	8f 5f       	subi	r24, 0xFF	; 255
    27a8:	80 93 a2 01 	sts	0x01A2, r24
        if (colon_state == 0) digit_data[2] = 10; //lights up colon_state
    27ac:	91 11       	cpse	r25, r1
    27ae:	2b c0       	rjmp	.+86     	; 0x2806 <clk_count+0x76>
    27b0:	8a e0       	ldi	r24, 0x0A	; 10
    27b2:	80 93 c9 01 	sts	0x01C9, r24
        else digit_data[2] = 11;  //blanks out colon_state
    }
    
    //handles time ticking increments and rollovers
    if (inc_multiple == 0) {
    27b6:	80 91 e8 01 	lds	r24, 0x01E8
    27ba:	81 11       	cpse	r24, r1
    27bc:	15 c0       	rjmp	.+42     	; 0x27e8 <clk_count+0x58>
        if (seconds == 60)
    27be:	80 91 a2 01 	lds	r24, 0x01A2
    27c2:	8c 33       	cpi	r24, 0x3C	; 60
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <clk_count+0x38>
    27c6:	67 c0       	rjmp	.+206    	; 0x2896 <clk_count+0x106>
                minutes = 0;
                if (hours == 24) hours = 0;
            }
        }
        
        alarm_mode();  //compare clock time with alarm time
    27c8:	0e 94 49 13 	call	0x2692	; 0x2692 <alarm_mode>
        
        if (s4_switch == 1) {       //changes from 24hr to 12hr
    27cc:	80 91 9e 01 	lds	r24, 0x019E
    27d0:	81 30       	cpi	r24, 0x01	; 1
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <clk_count+0x46>
    27d4:	4c c0       	rjmp	.+152    	; 0x286e <clk_count+0xde>
            }
            else if ((hours > 0) && (hours <= 11) && ((displayBits & 0x10) != 0x10)) am_or_pm = 0; //morning
                time_notation = 1;
        }
        
        if (s4_switch == 0) {       //changes from 12hr to 24hr
    27d6:	81 11       	cpse	r24, r1
    27d8:	05 c0       	rjmp	.+10     	; 0x27e4 <clk_count+0x54>
            if (time_notation == 1) {
    27da:	80 91 c3 01 	lds	r24, 0x01C3
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <clk_count+0x54>
    27e2:	8c c0       	rjmp	.+280    	; 0x28fc <clk_count+0x16c>
    27e4:	80 91 e8 01 	lds	r24, 0x01E8
                am_or_pm = 2;           //pm
            }
        }
    }
    
    if ((inc_multiple == 1) && (clock_mode == 1)) {  // set minutes
    27e8:	81 30       	cpi	r24, 0x01	; 1
    27ea:	a1 f0       	breq	.+40     	; 0x2814 <clk_count+0x84>
        else if (alarm_h == 24) alarm_h -= 24;
        else alarm_h = 23;
    }
    
    //bar graph showing am or pm
    switch (am_or_pm) {
    27ec:	80 91 00 01 	lds	r24, 0x0100
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	b1 f1       	breq	.+108    	; 0x2860 <clk_count+0xd0>
    27f4:	68 f1       	brcs	.+90     	; 0x2850 <clk_count+0xc0>
    27f6:	82 30       	cpi	r24, 0x02	; 2
    27f8:	61 f4       	brne	.+24     	; 0x2812 <clk_count+0x82>
        case 0: displayBits &= 0x8F; displayBits |= 0x20; break; // am
        case 1: displayBits &= 0x8F; displayBits |= 0x10; break; // pm
        case 2: displayBits &= 0x8F; break;
    27fa:	80 91 a7 01 	lds	r24, 0x01A7
    27fe:	8f 78       	andi	r24, 0x8F	; 143
    2800:	80 93 a7 01 	sts	0x01A7, r24
    2804:	08 95       	ret
    
    if ((timer1 % 128) == 0) {
        colon_state = !colon_state; //blinks or blanks the colon_state every second
        seconds += 1;
        if (colon_state == 0) digit_data[2] = 10; //lights up colon_state
        else digit_data[2] = 11;  //blanks out colon_state
    2806:	8b e0       	ldi	r24, 0x0B	; 11
    2808:	80 93 c9 01 	sts	0x01C9, r24
    280c:	d4 cf       	rjmp	.-88     	; 0x27b6 <clk_count+0x26>
//    am_pm_flag = 1 ---- the time changed from 12:59 p.m. to 1:00 p.m.
//***********************************************************************/
void clk_count(uint8_t timer1) {
    
    if ((timer1 % 128) == 0) {
        colon_state = !colon_state; //blinks or blanks the colon_state every second
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	c6 cf       	rjmp	.-116    	; 0x279e <clk_count+0xe>
    2812:	08 95       	ret
                am_or_pm = 2;           //pm
            }
        }
    }
    
    if ((inc_multiple == 1) && (clock_mode == 1)) {  // set minutes
    2814:	90 91 a0 01 	lds	r25, 0x01A0
    2818:	91 30       	cpi	r25, 0x01	; 1
    281a:	09 f4       	brne	.+2      	; 0x281e <clk_count+0x8e>
    281c:	81 c0       	rjmp	.+258    	; 0x2920 <clk_count+0x190>
        if ((minutes >= 0) && (minutes < 60)) minutes += count * count_sign * inc_multiple;
        else if (minutes == 60) minutes -= 60; //minute rollover
        else minutes -= 196;
    }
    
    if ((inc_multiple == 1) && (clock_mode == 2)) {   // set hours
    281e:	92 30       	cpi	r25, 0x02	; 2
    2820:	09 f4       	brne	.+2      	; 0x2824 <clk_count+0x94>
    2822:	50 c0       	rjmp	.+160    	; 0x28c4 <clk_count+0x134>
        else if (hours == 24) hours -= 24;
        else hours = 23;
    }
    
    // set alarm minutes
    if ((inc_multiple == 1) && (clock_mode == 3)) {
    2824:	93 30       	cpi	r25, 0x03	; 3
    2826:	09 f4       	brne	.+2      	; 0x282a <clk_count+0x9a>
    2828:	5e c0       	rjmp	.+188    	; 0x28e6 <clk_count+0x156>
        else if (alarm_m == 60) alarm_m -= 60;
        else alarm_m -= 196;
    }
    
    // set alarm hours
    if ((inc_multiple == 1) && (clock_mode == 4)) {
    282a:	94 30       	cpi	r25, 0x04	; 4
    282c:	f9 f6       	brne	.-66     	; 0x27ec <clk_count+0x5c>
        if (time_notation == 1) {              // 12hr mode
    282e:	80 91 c3 01 	lds	r24, 0x01C3
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	09 f4       	brne	.+2      	; 0x2838 <clk_count+0xa8>
    2836:	de c0       	rjmp	.+444    	; 0x29f4 <clk_count+0x264>
                    else am_pm_flag = 0;
                }
            }
            else if (alarm_h == 0) alarm_h = 12;   //1pm to noon
        }
        else if ((alarm_h >= 0) && (alarm_h < 24)) alarm_h += count * count_sign * inc_multiple;
    2838:	80 91 9b 01 	lds	r24, 0x019B
    283c:	88 31       	cpi	r24, 0x18	; 24
    283e:	08 f4       	brcc	.+2      	; 0x2842 <clk_count+0xb2>
    2840:	a8 c0       	rjmp	.+336    	; 0x2992 <clk_count+0x202>
        else if (alarm_h == 24) alarm_h -= 24;
    2842:	88 31       	cpi	r24, 0x18	; 24
    2844:	09 f4       	brne	.+2      	; 0x2848 <clk_count+0xb8>
    2846:	32 c1       	rjmp	.+612    	; 0x2aac <clk_count+0x31c>
        else alarm_h = 23;
    2848:	87 e1       	ldi	r24, 0x17	; 23
    284a:	80 93 9b 01 	sts	0x019B, r24
    284e:	ce cf       	rjmp	.-100    	; 0x27ec <clk_count+0x5c>
    2850:	90 91 a7 01 	lds	r25, 0x01A7
    }
    
    //bar graph showing am or pm
    switch (am_or_pm) {
        case 0: displayBits &= 0x8F; displayBits |= 0x20; break; // am
    2854:	89 2f       	mov	r24, r25
    2856:	8f 78       	andi	r24, 0x8F	; 143
    2858:	80 62       	ori	r24, 0x20	; 32
    285a:	80 93 a7 01 	sts	0x01A7, r24
    285e:	08 95       	ret
    2860:	80 91 a7 01 	lds	r24, 0x01A7
        case 1: displayBits &= 0x8F; displayBits |= 0x10; break; // pm
    2864:	8f 78       	andi	r24, 0x8F	; 143
    2866:	80 61       	ori	r24, 0x10	; 16
    2868:	80 93 a7 01 	sts	0x01A7, r24
    286c:	08 95       	ret
        }
        
        alarm_mode();  //compare clock time with alarm time
        
        if (s4_switch == 1) {       //changes from 24hr to 12hr
            if (hours >= 12) {      // 12:00/12:00 p.m. ~ 23:59/11:59 p.m.
    286e:	90 91 a4 01 	lds	r25, 0x01A4
    2872:	9c 30       	cpi	r25, 0x0C	; 12
    2874:	08 f4       	brcc	.+2      	; 0x2878 <clk_count+0xe8>
    2876:	5f c0       	rjmp	.+190    	; 0x2936 <clk_count+0x1a6>
                if (hours > 12) {
    2878:	9c 30       	cpi	r25, 0x0C	; 12
    287a:	09 f0       	breq	.+2      	; 0x287e <clk_count+0xee>
    287c:	81 c0       	rjmp	.+258    	; 0x2980 <clk_count+0x1f0>
                    else {
                        hours -= 12; //  noon
                        am_or_pm = 1;    //pm
                    }
                }
                else if (time_notation_flag != 1) {
    287e:	90 91 9a 01 	lds	r25, 0x019A
    2882:	91 30       	cpi	r25, 0x01	; 1
    2884:	11 f0       	breq	.+4      	; 0x288a <clk_count+0xfa>
                    hours = 12;
                    am_or_pm = 1;        //pm
    2886:	80 93 00 01 	sts	0x0100, r24
                hours += 12;
                time_notation_flag = 1;
                am_or_pm = 0;          //am
            }
            else if ((hours > 0) && (hours <= 11) && ((displayBits & 0x10) != 0x10)) am_or_pm = 0; //morning
                time_notation = 1;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	80 93 c3 01 	sts	0x01C3, r24
    2890:	80 91 e8 01 	lds	r24, 0x01E8
    2894:	a9 cf       	rjmp	.-174    	; 0x27e8 <clk_count+0x58>
    
    //handles time ticking increments and rollovers
    if (inc_multiple == 0) {
        if (seconds == 60)
        {
            minutes += 1;
    2896:	80 91 a3 01 	lds	r24, 0x01A3
    289a:	8f 5f       	subi	r24, 0xFF	; 255
    289c:	80 93 a3 01 	sts	0x01A3, r24
            seconds = 0;
    28a0:	10 92 a2 01 	sts	0x01A2, r1
            if (minutes == 60) {
    28a4:	8c 33       	cpi	r24, 0x3C	; 60
    28a6:	09 f0       	breq	.+2      	; 0x28aa <clk_count+0x11a>
    28a8:	8f cf       	rjmp	.-226    	; 0x27c8 <clk_count+0x38>
                hours++;
    28aa:	80 91 a4 01 	lds	r24, 0x01A4
    28ae:	8f 5f       	subi	r24, 0xFF	; 255
    28b0:	80 93 a4 01 	sts	0x01A4, r24
                minutes = 0;
    28b4:	10 92 a3 01 	sts	0x01A3, r1
                if (hours == 24) hours = 0;
    28b8:	88 31       	cpi	r24, 0x18	; 24
    28ba:	09 f0       	breq	.+2      	; 0x28be <clk_count+0x12e>
    28bc:	85 cf       	rjmp	.-246    	; 0x27c8 <clk_count+0x38>
    28be:	10 92 a4 01 	sts	0x01A4, r1
    28c2:	82 cf       	rjmp	.-252    	; 0x27c8 <clk_count+0x38>
        else if (minutes == 60) minutes -= 60; //minute rollover
        else minutes -= 196;
    }
    
    if ((inc_multiple == 1) && (clock_mode == 2)) {   // set hours
        if (time_notation == 1) {                     // 12hr mode
    28c4:	90 91 c3 01 	lds	r25, 0x01C3
    28c8:	91 30       	cpi	r25, 0x01	; 1
    28ca:	09 f4       	brne	.+2      	; 0x28ce <clk_count+0x13e>
    28cc:	76 c0       	rjmp	.+236    	; 0x29ba <clk_count+0x22a>
                    else am_pm_flag = 0;
                }
            }
            else if (hours == 0) hours = 12;   //1pm to noon
        }
        else if ((hours >= 0) && (hours < 24)) hours += count * count_sign * inc_multiple;
    28ce:	80 91 a4 01 	lds	r24, 0x01A4
    28d2:	88 31       	cpi	r24, 0x18	; 24
    28d4:	08 f4       	brcc	.+2      	; 0x28d8 <clk_count+0x148>
    28d6:	67 c0       	rjmp	.+206    	; 0x29a6 <clk_count+0x216>
        else if (hours == 24) hours -= 24;
    28d8:	88 31       	cpi	r24, 0x18	; 24
    28da:	09 f4       	brne	.+2      	; 0x28de <clk_count+0x14e>
    28dc:	ea c0       	rjmp	.+468    	; 0x2ab2 <clk_count+0x322>
        else hours = 23;
    28de:	87 e1       	ldi	r24, 0x17	; 23
    28e0:	80 93 a4 01 	sts	0x01A4, r24
    28e4:	83 cf       	rjmp	.-250    	; 0x27ec <clk_count+0x5c>
    }
    
    // set alarm minutes
    if ((inc_multiple == 1) && (clock_mode == 3)) {
        if ((alarm_m >= 0) && (alarm_m < 60)) alarm_m +=  count * count_sign * inc_multiple;
    28e6:	80 91 9c 01 	lds	r24, 0x019C
    28ea:	8c 33       	cpi	r24, 0x3C	; 60
    28ec:	b8 f1       	brcs	.+110    	; 0x295c <clk_count+0x1cc>
        else if (alarm_m == 60) alarm_m -= 60;
    28ee:	8c 33       	cpi	r24, 0x3C	; 60
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <clk_count+0x164>
    28f2:	a6 c0       	rjmp	.+332    	; 0x2a40 <clk_count+0x2b0>
        else alarm_m -= 196;
    28f4:	84 5c       	subi	r24, 0xC4	; 196
    28f6:	80 93 9c 01 	sts	0x019C, r24
    28fa:	78 cf       	rjmp	.-272    	; 0x27ec <clk_count+0x5c>
                time_notation = 1;
        }
        
        if (s4_switch == 0) {       //changes from 12hr to 24hr
            if (time_notation == 1) {
                if (hours == 12) {   // midnight
    28fc:	80 91 a4 01 	lds	r24, 0x01A4
    2900:	8c 30       	cpi	r24, 0x0C	; 12
    2902:	09 f4       	brne	.+2      	; 0x2906 <clk_count+0x176>
    2904:	93 c0       	rjmp	.+294    	; 0x2a2c <clk_count+0x29c>
                    if (time_notation_flag == 1) {
                        if (hours == 12) hours = 0;
                        time_notation_flag = 0;
                    }
                }
                else if ((hours != 12) && ((displayBits & 0x10) == 0x10))  hours += 12;
    2906:	90 91 a7 01 	lds	r25, 0x01A7
    290a:	94 ff       	sbrs	r25, 4
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <clk_count+0x184>
    290e:	84 5f       	subi	r24, 0xF4	; 244
    2910:	80 93 a4 01 	sts	0x01A4, r24
                time_notation = 0;
    2914:	10 92 c3 01 	sts	0x01C3, r1
                am_or_pm = 2;           //pm
    2918:	82 e0       	ldi	r24, 0x02	; 2
    291a:	80 93 00 01 	sts	0x0100, r24
    291e:	62 cf       	rjmp	.-316    	; 0x27e4 <clk_count+0x54>
            }
        }
    }
    
    if ((inc_multiple == 1) && (clock_mode == 1)) {  // set minutes
        if ((minutes >= 0) && (minutes < 60)) minutes += count * count_sign * inc_multiple;
    2920:	80 91 a3 01 	lds	r24, 0x01A3
    2924:	8c 33       	cpi	r24, 0x3C	; 60
    2926:	80 f0       	brcs	.+32     	; 0x2948 <clk_count+0x1b8>
        else if (minutes == 60) minutes -= 60; //minute rollover
    2928:	8c 33       	cpi	r24, 0x3C	; 60
    292a:	09 f4       	brne	.+2      	; 0x292e <clk_count+0x19e>
    292c:	b7 c0       	rjmp	.+366    	; 0x2a9c <clk_count+0x30c>
        else minutes -= 196;
    292e:	84 5c       	subi	r24, 0xC4	; 196
    2930:	80 93 a3 01 	sts	0x01A3, r24
    2934:	5b cf       	rjmp	.-330    	; 0x27ec <clk_count+0x5c>
                else if (time_notation_flag != 1) {
                    hours = 12;
                    am_or_pm = 1;        //pm
                }
            }
            else if (hours == 0) {     //00:00 to 12:00 am
    2936:	99 23       	and	r25, r25
    2938:	d9 f0       	breq	.+54     	; 0x2970 <clk_count+0x1e0>
                hours += 12;
                time_notation_flag = 1;
                am_or_pm = 0;          //am
            }
            else if ((hours > 0) && (hours <= 11) && ((displayBits & 0x10) != 0x10)) am_or_pm = 0; //morning
    293a:	90 91 a7 01 	lds	r25, 0x01A7
    293e:	94 fd       	sbrc	r25, 4
    2940:	a4 cf       	rjmp	.-184    	; 0x288a <clk_count+0xfa>
    2942:	10 92 00 01 	sts	0x0100, r1
    2946:	a1 cf       	rjmp	.-190    	; 0x288a <clk_count+0xfa>
            }
        }
    }
    
    if ((inc_multiple == 1) && (clock_mode == 1)) {  // set minutes
        if ((minutes >= 0) && (minutes < 60)) minutes += count * count_sign * inc_multiple;
    2948:	20 91 c6 01 	lds	r18, 0x01C6
    294c:	90 91 02 01 	lds	r25, 0x0102
    2950:	29 9f       	mul	r18, r25
    2952:	80 0d       	add	r24, r0
    2954:	11 24       	eor	r1, r1
    2956:	80 93 a3 01 	sts	0x01A3, r24
    295a:	48 cf       	rjmp	.-368    	; 0x27ec <clk_count+0x5c>
        else hours = 23;
    }
    
    // set alarm minutes
    if ((inc_multiple == 1) && (clock_mode == 3)) {
        if ((alarm_m >= 0) && (alarm_m < 60)) alarm_m +=  count * count_sign * inc_multiple;
    295c:	20 91 c6 01 	lds	r18, 0x01C6
    2960:	90 91 02 01 	lds	r25, 0x0102
    2964:	29 9f       	mul	r18, r25
    2966:	80 0d       	add	r24, r0
    2968:	11 24       	eor	r1, r1
    296a:	80 93 9c 01 	sts	0x019C, r24
    296e:	3e cf       	rjmp	.-388    	; 0x27ec <clk_count+0x5c>
                    hours = 12;
                    am_or_pm = 1;        //pm
                }
            }
            else if (hours == 0) {     //00:00 to 12:00 am
                hours += 12;
    2970:	9c e0       	ldi	r25, 0x0C	; 12
    2972:	90 93 a4 01 	sts	0x01A4, r25
                time_notation_flag = 1;
    2976:	80 93 9a 01 	sts	0x019A, r24
                am_or_pm = 0;          //am
    297a:	10 92 00 01 	sts	0x0100, r1
    297e:	85 cf       	rjmp	.-246    	; 0x288a <clk_count+0xfa>
        
        if (s4_switch == 1) {       //changes from 24hr to 12hr
            if (hours >= 12) {      // 12:00/12:00 p.m. ~ 23:59/11:59 p.m.
                if (hours > 12) {
                    
                    if (hours == 24) {  //midnight
    2980:	98 31       	cpi	r25, 0x18	; 24
    2982:	09 f4       	brne	.+2      	; 0x2986 <clk_count+0x1f6>
    2984:	8e c0       	rjmp	.+284    	; 0x2aa2 <clk_count+0x312>
                        hours = 0;
                        am_or_pm = 0;    //am
                    }
                    else {
                        hours -= 12; //  noon
    2986:	9c 50       	subi	r25, 0x0C	; 12
    2988:	90 93 a4 01 	sts	0x01A4, r25
                        am_or_pm = 1;    //pm
    298c:	80 93 00 01 	sts	0x0100, r24
    2990:	7c cf       	rjmp	.-264    	; 0x288a <clk_count+0xfa>
                    else am_pm_flag = 0;
                }
            }
            else if (alarm_h == 0) alarm_h = 12;   //1pm to noon
        }
        else if ((alarm_h >= 0) && (alarm_h < 24)) alarm_h += count * count_sign * inc_multiple;
    2992:	20 91 c6 01 	lds	r18, 0x01C6
    2996:	90 91 02 01 	lds	r25, 0x0102
    299a:	29 9f       	mul	r18, r25
    299c:	80 0d       	add	r24, r0
    299e:	11 24       	eor	r1, r1
    29a0:	80 93 9b 01 	sts	0x019B, r24
    29a4:	23 cf       	rjmp	.-442    	; 0x27ec <clk_count+0x5c>
                    else am_pm_flag = 0;
                }
            }
            else if (hours == 0) hours = 12;   //1pm to noon
        }
        else if ((hours >= 0) && (hours < 24)) hours += count * count_sign * inc_multiple;
    29a6:	20 91 c6 01 	lds	r18, 0x01C6
    29aa:	90 91 02 01 	lds	r25, 0x0102
    29ae:	29 9f       	mul	r18, r25
    29b0:	80 0d       	add	r24, r0
    29b2:	11 24       	eor	r1, r1
    29b4:	80 93 a4 01 	sts	0x01A4, r24
    29b8:	19 cf       	rjmp	.-462    	; 0x27ec <clk_count+0x5c>
        else minutes -= 196;
    }
    
    if ((inc_multiple == 1) && (clock_mode == 2)) {   // set hours
        if (time_notation == 1) {                     // 12hr mode
            if ((displayBits & 0x20) == 0x20) {    //at am
    29ba:	90 91 a7 01 	lds	r25, 0x01A7
    29be:	95 ff       	sbrs	r25, 5
    29c0:	58 c0       	rjmp	.+176    	; 0x2a72 <clk_count+0x2e2>
                if ((hours >= 1) && (hours <= 12)) {
    29c2:	90 91 a4 01 	lds	r25, 0x01A4
    29c6:	2f ef       	ldi	r18, 0xFF	; 255
    29c8:	29 0f       	add	r18, r25
    29ca:	2c 30       	cpi	r18, 0x0C	; 12
    29cc:	08 f0       	brcs	.+2      	; 0x29d0 <clk_count+0x240>
    29ce:	74 c0       	rjmp	.+232    	; 0x2ab8 <clk_count+0x328>
                    if (hours == 12) {
    29d0:	9c 30       	cpi	r25, 0x0C	; 12
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <clk_count+0x246>
    29d4:	9a c0       	rjmp	.+308    	; 0x2b0a <clk_count+0x37a>
                            if (hours == 13) hours = 1;    // from 12am to 1am
                            else if (hours == 11) am_or_pm = 1;//from 12am to 11pm
                        }
                    }
                    else {
                        hours += count * count_sign * inc_multiple;
    29d6:	20 91 c6 01 	lds	r18, 0x01C6
    29da:	80 91 02 01 	lds	r24, 0x0102
    29de:	28 9f       	mul	r18, r24
    29e0:	90 0d       	add	r25, r0
    29e2:	11 24       	eor	r1, r1
    29e4:	90 93 a4 01 	sts	0x01A4, r25
                        if (hours == 12) am_pm_flag = 0; //11am to 12pm
    29e8:	9c 30       	cpi	r25, 0x0C	; 12
    29ea:	e9 f0       	breq	.+58     	; 0x2a26 <clk_count+0x296>
                        }
                    }
                    else {
                        alarm_h += count * count_sign * inc_multiple;
                        if (alarm_h == 12) am_pm_flag = 0; //11am to noon(pm)
                        else am_pm_flag = 1;  // am
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	80 93 99 01 	sts	0x0199, r24
    29f2:	fc ce       	rjmp	.-520    	; 0x27ec <clk_count+0x5c>
    }
    
    // set alarm hours
    if ((inc_multiple == 1) && (clock_mode == 4)) {
        if (time_notation == 1) {              // 12hr mode
            if ((displayBits & 0x20) == 0x20) {  //am
    29f4:	90 91 a7 01 	lds	r25, 0x01A7
    29f8:	95 ff       	sbrs	r25, 5
    29fa:	25 c0       	rjmp	.+74     	; 0x2a46 <clk_count+0x2b6>
                if ((alarm_h >= 1) && (alarm_h <= 12)) {
    29fc:	20 91 9b 01 	lds	r18, 0x019B
    2a00:	3f ef       	ldi	r19, 0xFF	; 255
    2a02:	32 0f       	add	r19, r18
    2a04:	3c 30       	cpi	r19, 0x0C	; 12
    2a06:	08 f0       	brcs	.+2      	; 0x2a0a <clk_count+0x27a>
    2a08:	5d c0       	rjmp	.+186    	; 0x2ac4 <clk_count+0x334>
                    if (alarm_h == 12) {
    2a0a:	2c 30       	cpi	r18, 0x0C	; 12
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <clk_count+0x280>
    2a0e:	aa c0       	rjmp	.+340    	; 0x2b64 <clk_count+0x3d4>
                            if (alarm_h == 13) alarm_h = 1;    // midnight to 1am
                            else if (alarm_h == 11) am_or_pm = 1; //midnight to 11pm
                        }
                    }
                    else {
                        alarm_h += count * count_sign * inc_multiple;
    2a10:	90 91 c6 01 	lds	r25, 0x01C6
    2a14:	80 91 02 01 	lds	r24, 0x0102
    2a18:	98 9f       	mul	r25, r24
    2a1a:	20 0d       	add	r18, r0
    2a1c:	11 24       	eor	r1, r1
    2a1e:	20 93 9b 01 	sts	0x019B, r18
                        if (alarm_h == 12) am_pm_flag = 0; //11am to noon(pm)
    2a22:	2c 30       	cpi	r18, 0x0C	; 12
    2a24:	19 f7       	brne	.-58     	; 0x29ec <clk_count+0x25c>
    2a26:	10 92 99 01 	sts	0x0199, r1
    2a2a:	e0 ce       	rjmp	.-576    	; 0x27ec <clk_count+0x5c>
        }
        
        if (s4_switch == 0) {       //changes from 12hr to 24hr
            if (time_notation == 1) {
                if (hours == 12) {   // midnight
                    if (time_notation_flag == 1) {
    2a2c:	80 91 9a 01 	lds	r24, 0x019A
    2a30:	81 30       	cpi	r24, 0x01	; 1
    2a32:	09 f0       	breq	.+2      	; 0x2a36 <clk_count+0x2a6>
    2a34:	6f cf       	rjmp	.-290    	; 0x2914 <clk_count+0x184>
                        if (hours == 12) hours = 0;
    2a36:	10 92 a4 01 	sts	0x01A4, r1
                        time_notation_flag = 0;
    2a3a:	10 92 9a 01 	sts	0x019A, r1
    2a3e:	6a cf       	rjmp	.-300    	; 0x2914 <clk_count+0x184>
    }
    
    // set alarm minutes
    if ((inc_multiple == 1) && (clock_mode == 3)) {
        if ((alarm_m >= 0) && (alarm_m < 60)) alarm_m +=  count * count_sign * inc_multiple;
        else if (alarm_m == 60) alarm_m -= 60;
    2a40:	10 92 9c 01 	sts	0x019C, r1
    2a44:	d3 ce       	rjmp	.-602    	; 0x27ec <clk_count+0x5c>
                        else am_pm_flag = 1;  // am
                    }
                }
                else if (alarm_h == 0) alarm_h = 12;    // 1 am to 12 am; 1pm to 12pm
            }
            else if  ((alarm_h >= 1) && (alarm_h <= 12)) { //pm
    2a46:	80 91 9b 01 	lds	r24, 0x019B
    2a4a:	2f ef       	ldi	r18, 0xFF	; 255
    2a4c:	28 0f       	add	r18, r24
    2a4e:	2c 30       	cpi	r18, 0x0C	; 12
    2a50:	08 f0       	brcs	.+2      	; 0x2a54 <clk_count+0x2c4>
    2a52:	3e c0       	rjmp	.+124    	; 0x2ad0 <clk_count+0x340>
                if (alarm_h == 12) {
    2a54:	8c 30       	cpi	r24, 0x0C	; 12
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <clk_count+0x2ca>
    2a58:	41 c0       	rjmp	.+130    	; 0x2adc <clk_count+0x34c>
                        if (alarm_h == 13) alarm_h = 1;  //noon to 1pm
                        else if (alarm_h == 11) am_or_pm = 0;  // noon to 11am
                    }
                }
                else {
                    alarm_h += count * count_sign * inc_multiple;
    2a5a:	20 91 c6 01 	lds	r18, 0x01C6
    2a5e:	90 91 02 01 	lds	r25, 0x0102
    2a62:	29 9f       	mul	r18, r25
    2a64:	80 0d       	add	r24, r0
    2a66:	11 24       	eor	r1, r1
    2a68:	80 93 9b 01 	sts	0x019B, r24
                    if (alarm_h == 12) am_pm_flag = 1;     //noon to 1pm
    2a6c:	8c 30       	cpi	r24, 0x0C	; 12
    2a6e:	d9 f6       	brne	.-74     	; 0x2a26 <clk_count+0x296>
    2a70:	bd cf       	rjmp	.-134    	; 0x29ec <clk_count+0x25c>
                        else am_pm_flag = 1;  //am
                    }
                }
                else if (hours == 0) hours = 12;  //hour decrement
            }
            else if  ((hours >= 1) && (hours <= 12)) { //pm
    2a72:	80 91 a4 01 	lds	r24, 0x01A4
    2a76:	9f ef       	ldi	r25, 0xFF	; 255
    2a78:	98 0f       	add	r25, r24
    2a7a:	9c 30       	cpi	r25, 0x0C	; 12
    2a7c:	60 f5       	brcc	.+88     	; 0x2ad6 <clk_count+0x346>
                if (hours == 12) {
    2a7e:	8c 30       	cpi	r24, 0x0C	; 12
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <clk_count+0x2f4>
    2a82:	5a c0       	rjmp	.+180    	; 0x2b38 <clk_count+0x3a8>
                        if (hours == 13) hours = 1;  //noon to 1pm
                        else if (hours == 11) am_or_pm = 0;//noon to 11am
                    }
                }
                else {
                    hours += count * count_sign * inc_multiple;
    2a84:	20 91 c6 01 	lds	r18, 0x01C6
    2a88:	90 91 02 01 	lds	r25, 0x0102
    2a8c:	29 9f       	mul	r18, r25
    2a8e:	80 0d       	add	r24, r0
    2a90:	11 24       	eor	r1, r1
    2a92:	80 93 a4 01 	sts	0x01A4, r24
                    if (hours == 12) am_pm_flag = 1;//noon to 1pm
    2a96:	8c 30       	cpi	r24, 0x0C	; 12
    2a98:	31 f6       	brne	.-116    	; 0x2a26 <clk_count+0x296>
    2a9a:	a8 cf       	rjmp	.-176    	; 0x29ec <clk_count+0x25c>
        }
    }
    
    if ((inc_multiple == 1) && (clock_mode == 1)) {  // set minutes
        if ((minutes >= 0) && (minutes < 60)) minutes += count * count_sign * inc_multiple;
        else if (minutes == 60) minutes -= 60; //minute rollover
    2a9c:	10 92 a3 01 	sts	0x01A3, r1
    2aa0:	a5 ce       	rjmp	.-694    	; 0x27ec <clk_count+0x5c>
        if (s4_switch == 1) {       //changes from 24hr to 12hr
            if (hours >= 12) {      // 12:00/12:00 p.m. ~ 23:59/11:59 p.m.
                if (hours > 12) {
                    
                    if (hours == 24) {  //midnight
                        hours = 0;
    2aa2:	10 92 a4 01 	sts	0x01A4, r1
                        am_or_pm = 0;    //am
    2aa6:	10 92 00 01 	sts	0x0100, r1
    2aaa:	ef ce       	rjmp	.-546    	; 0x288a <clk_count+0xfa>
                }
            }
            else if (alarm_h == 0) alarm_h = 12;   //1pm to noon
        }
        else if ((alarm_h >= 0) && (alarm_h < 24)) alarm_h += count * count_sign * inc_multiple;
        else if (alarm_h == 24) alarm_h -= 24;
    2aac:	10 92 9b 01 	sts	0x019B, r1
    2ab0:	9d ce       	rjmp	.-710    	; 0x27ec <clk_count+0x5c>
                }
            }
            else if (hours == 0) hours = 12;   //1pm to noon
        }
        else if ((hours >= 0) && (hours < 24)) hours += count * count_sign * inc_multiple;
        else if (hours == 24) hours -= 24;
    2ab2:	10 92 a4 01 	sts	0x01A4, r1
    2ab6:	9a ce       	rjmp	.-716    	; 0x27ec <clk_count+0x5c>
                        hours += count * count_sign * inc_multiple;
                        if (hours == 12) am_pm_flag = 0; //11am to 12pm
                        else am_pm_flag = 1;  //am
                    }
                }
                else if (hours == 0) hours = 12;  //hour decrement
    2ab8:	91 11       	cpse	r25, r1
    2aba:	98 ce       	rjmp	.-720    	; 0x27ec <clk_count+0x5c>
    2abc:	8c e0       	ldi	r24, 0x0C	; 12
    2abe:	80 93 a4 01 	sts	0x01A4, r24
    2ac2:	94 ce       	rjmp	.-728    	; 0x27ec <clk_count+0x5c>
                        alarm_h += count * count_sign * inc_multiple;
                        if (alarm_h == 12) am_pm_flag = 0; //11am to noon(pm)
                        else am_pm_flag = 1;  // am
                    }
                }
                else if (alarm_h == 0) alarm_h = 12;    // 1 am to 12 am; 1pm to 12pm
    2ac4:	21 11       	cpse	r18, r1
    2ac6:	92 ce       	rjmp	.-732    	; 0x27ec <clk_count+0x5c>
    2ac8:	8c e0       	ldi	r24, 0x0C	; 12
    2aca:	80 93 9b 01 	sts	0x019B, r24
    2ace:	8e ce       	rjmp	.-740    	; 0x27ec <clk_count+0x5c>
                    alarm_h += count * count_sign * inc_multiple;
                    if (alarm_h == 12) am_pm_flag = 1;     //noon to 1pm
                    else am_pm_flag = 0;
                }
            }
            else if (alarm_h == 0) alarm_h = 12;   //1pm to noon
    2ad0:	88 23       	and	r24, r24
    2ad2:	d1 f3       	breq	.-12     	; 0x2ac8 <clk_count+0x338>
    2ad4:	8b ce       	rjmp	.-746    	; 0x27ec <clk_count+0x5c>
                    hours += count * count_sign * inc_multiple;
                    if (hours == 12) am_pm_flag = 1;//noon to 1pm
                    else am_pm_flag = 0;
                }
            }
            else if (hours == 0) hours = 12;   //1pm to noon
    2ad6:	88 23       	and	r24, r24
    2ad8:	89 f3       	breq	.-30     	; 0x2abc <clk_count+0x32c>
    2ada:	88 ce       	rjmp	.-752    	; 0x27ec <clk_count+0x5c>
                }
                else if (alarm_h == 0) alarm_h = 12;    // 1 am to 12 am; 1pm to 12pm
            }
            else if  ((alarm_h >= 1) && (alarm_h <= 12)) { //pm
                if (alarm_h == 12) {
                    if (am_pm_flag == 1) am_or_pm = 0;  //am
    2adc:	80 91 99 01 	lds	r24, 0x0199
    2ae0:	81 30       	cpi	r24, 0x01	; 1
    2ae2:	81 f0       	breq	.+32     	; 0x2b04 <clk_count+0x374>
                    else {
                        alarm_h += count * count_sign * inc_multiple;
    2ae4:	20 91 c6 01 	lds	r18, 0x01C6
    2ae8:	80 91 02 01 	lds	r24, 0x0102
    2aec:	28 9f       	mul	r18, r24
    2aee:	80 2d       	mov	r24, r0
    2af0:	11 24       	eor	r1, r1
    2af2:	84 5f       	subi	r24, 0xF4	; 244
    2af4:	80 93 9b 01 	sts	0x019B, r24
                        if (alarm_h == 13) alarm_h = 1;  //noon to 1pm
    2af8:	8d 30       	cpi	r24, 0x0D	; 13
    2afa:	09 f4       	brne	.+2      	; 0x2afe <clk_count+0x36e>
    2afc:	4a c0       	rjmp	.+148    	; 0x2b92 <clk_count+0x402>
                        else if (alarm_h == 11) am_or_pm = 0;  // noon to 11am
    2afe:	8b 30       	cpi	r24, 0x0B	; 11
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <clk_count+0x374>
    2b02:	74 ce       	rjmp	.-792    	; 0x27ec <clk_count+0x5c>
    2b04:	10 92 00 01 	sts	0x0100, r1
    2b08:	a5 ce       	rjmp	.-694    	; 0x2854 <clk_count+0xc4>
    if ((inc_multiple == 1) && (clock_mode == 2)) {   // set hours
        if (time_notation == 1) {                     // 12hr mode
            if ((displayBits & 0x20) == 0x20) {    //at am
                if ((hours >= 1) && (hours <= 12)) {
                    if (hours == 12) {
                        if (am_pm_flag == 0) am_or_pm = 1;  //noon
    2b0a:	90 91 99 01 	lds	r25, 0x0199
    2b0e:	99 23       	and	r25, r25
    2b10:	81 f0       	breq	.+32     	; 0x2b32 <clk_count+0x3a2>
                        else {
                            hours += count * count_sign * inc_multiple;
    2b12:	90 91 c6 01 	lds	r25, 0x01C6
    2b16:	80 91 02 01 	lds	r24, 0x0102
    2b1a:	98 9f       	mul	r25, r24
    2b1c:	80 2d       	mov	r24, r0
    2b1e:	11 24       	eor	r1, r1
    2b20:	84 5f       	subi	r24, 0xF4	; 244
    2b22:	80 93 a4 01 	sts	0x01A4, r24
                            if (hours == 13) hours = 1;    // from 12am to 1am
    2b26:	8d 30       	cpi	r24, 0x0D	; 13
    2b28:	c1 f1       	breq	.+112    	; 0x2b9a <clk_count+0x40a>
                            else if (hours == 11) am_or_pm = 1;//from 12am to 11pm
    2b2a:	8b 30       	cpi	r24, 0x0B	; 11
    2b2c:	09 f0       	breq	.+2      	; 0x2b30 <clk_count+0x3a0>
    2b2e:	5e ce       	rjmp	.-836    	; 0x27ec <clk_count+0x5c>
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	80 93 00 01 	sts	0x0100, r24
    2b36:	5a ce       	rjmp	.-844    	; 0x27ec <clk_count+0x5c>
                }
                else if (hours == 0) hours = 12;  //hour decrement
            }
            else if  ((hours >= 1) && (hours <= 12)) { //pm
                if (hours == 12) {
                    if (am_pm_flag == 1) am_or_pm = 0;  //12am
    2b38:	80 91 99 01 	lds	r24, 0x0199
    2b3c:	81 30       	cpi	r24, 0x01	; 1
    2b3e:	79 f0       	breq	.+30     	; 0x2b5e <clk_count+0x3ce>
                    else {
                        hours += count * count_sign * inc_multiple;
    2b40:	90 91 c6 01 	lds	r25, 0x01C6
    2b44:	80 91 02 01 	lds	r24, 0x0102
    2b48:	98 9f       	mul	r25, r24
    2b4a:	80 2d       	mov	r24, r0
    2b4c:	11 24       	eor	r1, r1
    2b4e:	84 5f       	subi	r24, 0xF4	; 244
    2b50:	80 93 a4 01 	sts	0x01A4, r24
                        if (hours == 13) hours = 1;  //noon to 1pm
    2b54:	8d 30       	cpi	r24, 0x0D	; 13
    2b56:	09 f1       	breq	.+66     	; 0x2b9a <clk_count+0x40a>
                        else if (hours == 11) am_or_pm = 0;//noon to 11am
    2b58:	8b 30       	cpi	r24, 0x0B	; 11
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <clk_count+0x3ce>
    2b5c:	47 ce       	rjmp	.-882    	; 0x27ec <clk_count+0x5c>
    2b5e:	10 92 00 01 	sts	0x0100, r1
    2b62:	44 ce       	rjmp	.-888    	; 0x27ec <clk_count+0x5c>
    if ((inc_multiple == 1) && (clock_mode == 4)) {
        if (time_notation == 1) {              // 12hr mode
            if ((displayBits & 0x20) == 0x20) {  //am
                if ((alarm_h >= 1) && (alarm_h <= 12)) {
                    if (alarm_h == 12) {
                        if (am_pm_flag == 0) am_or_pm = 1;      //noon
    2b64:	20 91 99 01 	lds	r18, 0x0199
    2b68:	22 23       	and	r18, r18
    2b6a:	79 f0       	breq	.+30     	; 0x2b8a <clk_count+0x3fa>
                        else {
                            alarm_h += count * count_sign * inc_multiple;
    2b6c:	30 91 c6 01 	lds	r19, 0x01C6
    2b70:	20 91 02 01 	lds	r18, 0x0102
    2b74:	32 9f       	mul	r19, r18
    2b76:	20 2d       	mov	r18, r0
    2b78:	11 24       	eor	r1, r1
    2b7a:	24 5f       	subi	r18, 0xF4	; 244
    2b7c:	20 93 9b 01 	sts	0x019B, r18
                            if (alarm_h == 13) alarm_h = 1;    // midnight to 1am
    2b80:	2d 30       	cpi	r18, 0x0D	; 13
    2b82:	39 f0       	breq	.+14     	; 0x2b92 <clk_count+0x402>
                            else if (alarm_h == 11) am_or_pm = 1; //midnight to 11pm
    2b84:	2b 30       	cpi	r18, 0x0B	; 11
    2b86:	09 f0       	breq	.+2      	; 0x2b8a <clk_count+0x3fa>
    2b88:	31 ce       	rjmp	.-926    	; 0x27ec <clk_count+0x5c>
    2b8a:	80 93 00 01 	sts	0x0100, r24
    2b8e:	89 2f       	mov	r24, r25
    2b90:	69 ce       	rjmp	.-814    	; 0x2864 <clk_count+0xd4>
                if ((alarm_h >= 1) && (alarm_h <= 12)) {
                    if (alarm_h == 12) {
                        if (am_pm_flag == 0) am_or_pm = 1;      //noon
                        else {
                            alarm_h += count * count_sign * inc_multiple;
                            if (alarm_h == 13) alarm_h = 1;    // midnight to 1am
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	80 93 9b 01 	sts	0x019B, r24
    2b98:	29 ce       	rjmp	.-942    	; 0x27ec <clk_count+0x5c>
                if ((hours >= 1) && (hours <= 12)) {
                    if (hours == 12) {
                        if (am_pm_flag == 0) am_or_pm = 1;  //noon
                        else {
                            hours += count * count_sign * inc_multiple;
                            if (hours == 13) hours = 1;    // from 12am to 1am
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	80 93 a4 01 	sts	0x01A4, r24
    2ba0:	25 ce       	rjmp	.-950    	; 0x27ec <clk_count+0x5c>

00002ba2 <stop_alarm>:
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    2ba2:	10 92 cc 01 	sts	0x01CC, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    2ba6:	8e b5       	in	r24, 0x2e	; 46
    2ba8:	8c 7f       	andi	r24, 0xFC	; 252
    2baa:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    2bac:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	80 93 c5 01 	sts	0x01C5, r24
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm = 0;     // reset alarm
    2bb4:	10 92 98 01 	sts	0x0198, r1
    2bb8:	08 95       	ret

00002bba <snooze>:
// when called, alarm clock enters snooze modes
// alarm music is turned off automatically. No intervention from user needed
//***********************************************************************************
void snooze(uint8_t s7_timer) {
    
    if ((s7_timer % 128) == 0) { //if snooze button is pushed
    2bba:	8f 77       	andi	r24, 0x7F	; 127
    2bbc:	59 f4       	brne	.+22     	; 0x2bd4 <snooze+0x1a>
        alarm_s += 1; //increment snooze count
    2bbe:	80 91 9d 01 	lds	r24, 0x019D
    2bc2:	8f 5f       	subi	r24, 0xFF	; 255
    2bc4:	80 93 9d 01 	sts	0x019D, r24
        if (alarm_s > 10) {    //wait 10s for alarm to buzz again
    2bc8:	8b 30       	cpi	r24, 0x0B	; 11
    2bca:	20 f0       	brcs	.+8      	; 0x2bd4 <snooze+0x1a>
            if (alarm_s == 11) {
    2bcc:	8b 30       	cpi	r24, 0x0B	; 11
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <snooze+0x1c>
                LCD_Init();
                LCD_PutStr("Wake up!");
                LCD_MovCursorLn2();
                LCD_PutStr("Press S6 to snooze.");
            }
            else run_alarm();
    2bd0:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <run_alarm>
    2bd4:	08 95       	ret
    
    if ((s7_timer % 128) == 0) { //if snooze button is pushed
        alarm_s += 1; //increment snooze count
        if (alarm_s > 10) {    //wait 10s for alarm to buzz again
            if (alarm_s == 11) {
                run_alarm();
    2bd6:	0e 94 2c 13 	call	0x2658	; 0x2658 <run_alarm>
                LCD_Init();
    2bda:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_Init>
                LCD_PutStr("Wake up!");
    2bde:	83 e0       	ldi	r24, 0x03	; 3
    2be0:	91 e0       	ldi	r25, 0x01	; 1
    2be2:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
                LCD_MovCursorLn2();
    2be6:	0e 94 33 02 	call	0x466	; 0x466 <LCD_MovCursorLn2>
                LCD_PutStr("Press S6 to snooze.");
    2bea:	8c e0       	ldi	r24, 0x0C	; 12
    2bec:	91 e0       	ldi	r25, 0x01	; 1
    2bee:	0c 94 01 04 	jmp	0x802	; 0x802 <LCD_PutStr>

00002bf2 <mode_switch>:
// In mode 0, 3 and 4, incrementing timer means that clock runs in normal mode.
// In mode 1, 2 and snooze, incrementing s2_timer could blink some digit numbers
//***********************************************************************/
void mode_switch(uint8_t mode_change){
    
    if (mode_change) {
    2bf2:	88 23       	and	r24, r24
    2bf4:	b1 f0       	breq	.+44     	; 0x2c22 <mode_switch+0x30>
        if (clock_mode == 0) {   //push S0
    2bf6:	80 91 a0 01 	lds	r24, 0x01A0
    2bfa:	81 11       	cpse	r24, r1
    2bfc:	a2 c0       	rjmp	.+324    	; 0x2d42 <mode_switch+0x150>
            timer++;             //increment count every 7.8125 ms
    2bfe:	80 91 01 01 	lds	r24, 0x0101
    2c02:	8f 5f       	subi	r24, 0xFF	; 255
    2c04:	80 93 01 01 	sts	0x0101, r24
            inc_multiple = 0;
    2c08:	10 92 e8 01 	sts	0x01E8, r1
            displayBits &= 0x70;
    2c0c:	80 91 a7 01 	lds	r24, 0x01A7
    2c10:	80 77       	andi	r24, 0x70	; 112
            displayBits |= 0x01;
    2c12:	81 60       	ori	r24, 0x01	; 1
    2c14:	80 93 a7 01 	sts	0x01A7, r24
            timer++;
            displayBits &= 0x70;
            displayBits |= 0x04;
        }
        
        if (snooze_flag == 1) { //push S6
    2c18:	80 91 96 01 	lds	r24, 0x0196
    2c1c:	81 30       	cpi	r24, 0x01	; 1
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <mode_switch+0x30>
    2c20:	b1 c0       	rjmp	.+354    	; 0x2d84 <mode_switch+0x192>
            s2_timer++;
            snooze(s2_timer);
        }
    }
    clk_count(timer); //allows user to switch time mode displayed
    2c22:	80 91 01 01 	lds	r24, 0x0101
    2c26:	0e 94 c8 13 	call	0x2790	; 0x2790 <clk_count>
    
    switch (clock_mode) {
    2c2a:	80 91 a0 01 	lds	r24, 0x01A0
    2c2e:	82 30       	cpi	r24, 0x02	; 2
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <mode_switch+0x42>
    2c32:	b0 c0       	rjmp	.+352    	; 0x2d94 <mode_switch+0x1a2>
    2c34:	08 f0       	brcs	.+2      	; 0x2c38 <mode_switch+0x46>
    2c36:	4f c0       	rjmp	.+158    	; 0x2cd6 <mode_switch+0xe4>
    2c38:	88 23       	and	r24, r24
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <mode_switch+0x4c>
    2c3c:	f4 c0       	rjmp	.+488    	; 0x2e26 <mode_switch+0x234>
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <mode_switch+0x52>
    2c42:	9f c0       	rjmp	.+318    	; 0x2d82 <mode_switch+0x190>
            digit_data[3] = hours % 10;  //get the number of hundreds
            digit_data[4] = hours / 10 % 10; //get the number of thousands
            break;
            
        case 1:
            if ((s2_timer % 64) == 0) {    //change mode, set time minutes
    2c44:	80 91 c4 01 	lds	r24, 0x01C4
    2c48:	8f 73       	andi	r24, 0x3F	; 63
    2c4a:	49 f5       	brne	.+82     	; 0x2c9e <mode_switch+0xac>
                changeTimeDisplay = !changeTimeDisplay; //blink/blank minute display
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 91 cd 01 	lds	r25, 0x01CD
    2c52:	91 11       	cpse	r25, r1
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	80 93 cd 01 	sts	0x01CD, r24
                digit_data[0] = 10;
    2c5a:	9a e0       	ldi	r25, 0x0A	; 10
    2c5c:	90 93 c7 01 	sts	0x01C7, r25
                digit_data[1] = 10;
    2c60:	90 93 c8 01 	sts	0x01C8, r25
                if (changeTimeDisplay == 0) { //setting ones and tens digit
    2c64:	81 11       	cpse	r24, r1
    2c66:	1b c0       	rjmp	.+54     	; 0x2c9e <mode_switch+0xac>
                    digit_data[0] = minutes % 10;
    2c68:	20 91 a3 01 	lds	r18, 0x01A3
    2c6c:	9d ec       	ldi	r25, 0xCD	; 205
    2c6e:	29 9f       	mul	r18, r25
    2c70:	81 2d       	mov	r24, r1
    2c72:	11 24       	eor	r1, r1
    2c74:	86 95       	lsr	r24
    2c76:	86 95       	lsr	r24
    2c78:	86 95       	lsr	r24
    2c7a:	3a e0       	ldi	r19, 0x0A	; 10
    2c7c:	83 9f       	mul	r24, r19
    2c7e:	20 19       	sub	r18, r0
    2c80:	11 24       	eor	r1, r1
    2c82:	20 93 c7 01 	sts	0x01C7, r18
                    digit_data[1] = minutes / 10 % 10;
    2c86:	89 9f       	mul	r24, r25
    2c88:	91 2d       	mov	r25, r1
    2c8a:	11 24       	eor	r1, r1
    2c8c:	96 95       	lsr	r25
    2c8e:	96 95       	lsr	r25
    2c90:	96 95       	lsr	r25
    2c92:	2a e0       	ldi	r18, 0x0A	; 10
    2c94:	92 9f       	mul	r25, r18
    2c96:	80 19       	sub	r24, r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	80 93 c8 01 	sts	0x01C8, r24
                }
            }
            digit_data[3] = hours % 10;
    2c9e:	20 91 a4 01 	lds	r18, 0x01A4
                if (changeAlarmDisplay == 0) { //setting ones and tens digit
                    digit_data[0] = alarm_m % 10;
                    digit_data[1] = alarm_m / 10 % 10;
                }
            }
            digit_data[3] = alarm_h % 10;
    2ca2:	9d ec       	ldi	r25, 0xCD	; 205
    2ca4:	29 9f       	mul	r18, r25
    2ca6:	81 2d       	mov	r24, r1
    2ca8:	11 24       	eor	r1, r1
    2caa:	86 95       	lsr	r24
    2cac:	86 95       	lsr	r24
    2cae:	86 95       	lsr	r24
    2cb0:	3a e0       	ldi	r19, 0x0A	; 10
    2cb2:	83 9f       	mul	r24, r19
    2cb4:	20 19       	sub	r18, r0
    2cb6:	11 24       	eor	r1, r1
    2cb8:	20 93 ca 01 	sts	0x01CA, r18
            digit_data[4] = alarm_h / 10 % 10;
    2cbc:	89 9f       	mul	r24, r25
    2cbe:	91 2d       	mov	r25, r1
    2cc0:	11 24       	eor	r1, r1
    2cc2:	96 95       	lsr	r25
    2cc4:	96 95       	lsr	r25
    2cc6:	96 95       	lsr	r25
    2cc8:	2a e0       	ldi	r18, 0x0A	; 10
    2cca:	92 9f       	mul	r25, r18
    2ccc:	80 19       	sub	r24, r0
    2cce:	11 24       	eor	r1, r1
    2cd0:	80 93 cb 01 	sts	0x01CB, r24
            break;
    2cd4:	08 95       	ret
            snooze(s2_timer);
        }
    }
    clk_count(timer); //allows user to switch time mode displayed
    
    switch (clock_mode) {
    2cd6:	83 30       	cpi	r24, 0x03	; 3
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <mode_switch+0xea>
    2cda:	c3 c0       	rjmp	.+390    	; 0x2e62 <mode_switch+0x270>
    2cdc:	84 30       	cpi	r24, 0x04	; 4
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <mode_switch+0xf0>
    2ce0:	4f c0       	rjmp	.+158    	; 0x2d80 <mode_switch+0x18e>
            digit_data[0] = minutes % 10;
            digit_data[1] = minutes / 10 % 10;
            break;
            
        case 4:
            if ((timer % 64) == 0) {    //change mode, set alarm hours
    2ce2:	80 91 01 01 	lds	r24, 0x0101
    2ce6:	8f 73       	andi	r24, 0x3F	; 63
    2ce8:	49 f5       	brne	.+82     	; 0x2d3c <mode_switch+0x14a>
                changeAlarmDisplay = !changeAlarmDisplay; //blink/blank minute display
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 91 ea 01 	lds	r25, 0x01EA
    2cf0:	91 11       	cpse	r25, r1
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	80 93 ea 01 	sts	0x01EA, r24
                digit_data[0] = 10;          //switch off
    2cf8:	9a e0       	ldi	r25, 0x0A	; 10
    2cfa:	90 93 c7 01 	sts	0x01C7, r25
                digit_data[1] = 10;
    2cfe:	90 93 c8 01 	sts	0x01C8, r25
                if (changeAlarmDisplay == 0) { //setting ones and tens digit
    2d02:	81 11       	cpse	r24, r1
    2d04:	1b c0       	rjmp	.+54     	; 0x2d3c <mode_switch+0x14a>
                    digit_data[0] = alarm_m % 10;
    2d06:	20 91 9c 01 	lds	r18, 0x019C
    2d0a:	9d ec       	ldi	r25, 0xCD	; 205
    2d0c:	29 9f       	mul	r18, r25
    2d0e:	81 2d       	mov	r24, r1
    2d10:	11 24       	eor	r1, r1
    2d12:	86 95       	lsr	r24
    2d14:	86 95       	lsr	r24
    2d16:	86 95       	lsr	r24
    2d18:	3a e0       	ldi	r19, 0x0A	; 10
    2d1a:	83 9f       	mul	r24, r19
    2d1c:	20 19       	sub	r18, r0
    2d1e:	11 24       	eor	r1, r1
    2d20:	20 93 c7 01 	sts	0x01C7, r18
                    digit_data[1] = alarm_m / 10 % 10;
    2d24:	89 9f       	mul	r24, r25
    2d26:	91 2d       	mov	r25, r1
    2d28:	11 24       	eor	r1, r1
    2d2a:	96 95       	lsr	r25
    2d2c:	96 95       	lsr	r25
    2d2e:	96 95       	lsr	r25
    2d30:	2a e0       	ldi	r18, 0x0A	; 10
    2d32:	92 9f       	mul	r25, r18
    2d34:	80 19       	sub	r24, r0
    2d36:	11 24       	eor	r1, r1
    2d38:	80 93 c8 01 	sts	0x01C8, r24
                }
            }
            digit_data[3] = alarm_h % 10;
    2d3c:	20 91 9b 01 	lds	r18, 0x019B
    2d40:	b0 cf       	rjmp	.-160    	; 0x2ca2 <mode_switch+0xb0>
            inc_multiple = 0;
            displayBits &= 0x70;
            displayBits |= 0x01;
        }
        
        if ((clock_mode == 1) || (clock_mode == 2)) {   //push S1
    2d42:	9f ef       	ldi	r25, 0xFF	; 255
    2d44:	98 0f       	add	r25, r24
    2d46:	92 30       	cpi	r25, 0x02	; 2
    2d48:	58 f4       	brcc	.+22     	; 0x2d60 <mode_switch+0x16e>
            s2_timer++;
    2d4a:	90 91 c4 01 	lds	r25, 0x01C4
    2d4e:	9f 5f       	subi	r25, 0xFF	; 255
    2d50:	90 93 c4 01 	sts	0x01C4, r25
            displayBits &= 0x70;
    2d54:	90 91 a7 01 	lds	r25, 0x01A7
    2d58:	90 77       	andi	r25, 0x70	; 112
            displayBits |= 0x02;
    2d5a:	92 60       	ori	r25, 0x02	; 2
    2d5c:	90 93 a7 01 	sts	0x01A7, r25
        }
        
        if ((clock_mode == 3) || (clock_mode == 4)) {   //push S2
    2d60:	83 50       	subi	r24, 0x03	; 3
    2d62:	82 30       	cpi	r24, 0x02	; 2
    2d64:	08 f0       	brcs	.+2      	; 0x2d68 <mode_switch+0x176>
    2d66:	58 cf       	rjmp	.-336    	; 0x2c18 <mode_switch+0x26>
            timer++;
    2d68:	80 91 01 01 	lds	r24, 0x0101
    2d6c:	8f 5f       	subi	r24, 0xFF	; 255
    2d6e:	80 93 01 01 	sts	0x0101, r24
            displayBits &= 0x70;
    2d72:	80 91 a7 01 	lds	r24, 0x01A7
    2d76:	80 77       	andi	r24, 0x70	; 112
            displayBits |= 0x04;
    2d78:	84 60       	ori	r24, 0x04	; 4
    2d7a:	80 93 a7 01 	sts	0x01A7, r24
    2d7e:	4c cf       	rjmp	.-360    	; 0x2c18 <mode_switch+0x26>
    2d80:	08 95       	ret
    2d82:	08 95       	ret
        }
        
        if (snooze_flag == 1) { //push S6
            s2_timer++;
    2d84:	80 91 c4 01 	lds	r24, 0x01C4
    2d88:	8f 5f       	subi	r24, 0xFF	; 255
    2d8a:	80 93 c4 01 	sts	0x01C4, r24
            snooze(s2_timer);
    2d8e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <snooze>
    2d92:	47 cf       	rjmp	.-370    	; 0x2c22 <mode_switch+0x30>
            digit_data[3] = hours % 10;
            digit_data[4] = hours / 10 % 10;
            break;
            
        case 2:
            if ((s2_timer % 64) == 0) {    //change mode, set time hours
    2d94:	80 91 c4 01 	lds	r24, 0x01C4
    2d98:	8f 73       	andi	r24, 0x3F	; 63
    2d9a:	49 f5       	brne	.+82     	; 0x2dee <mode_switch+0x1fc>
                changeTimeDisplay = !changeTimeDisplay; //blink/blank hour display
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 91 cd 01 	lds	r25, 0x01CD
    2da2:	91 11       	cpse	r25, r1
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	80 93 cd 01 	sts	0x01CD, r24
                digit_data[3] = 10;
    2daa:	9a e0       	ldi	r25, 0x0A	; 10
    2dac:	90 93 ca 01 	sts	0x01CA, r25
                digit_data[4] = 10;
    2db0:	90 93 cb 01 	sts	0x01CB, r25
                if (changeTimeDisplay == 0) { //setting hundreds and thousands digit
    2db4:	81 11       	cpse	r24, r1
    2db6:	1b c0       	rjmp	.+54     	; 0x2dee <mode_switch+0x1fc>
                    digit_data[3] = hours % 10;
    2db8:	20 91 a4 01 	lds	r18, 0x01A4
    2dbc:	9d ec       	ldi	r25, 0xCD	; 205
    2dbe:	29 9f       	mul	r18, r25
    2dc0:	81 2d       	mov	r24, r1
    2dc2:	11 24       	eor	r1, r1
    2dc4:	86 95       	lsr	r24
    2dc6:	86 95       	lsr	r24
    2dc8:	86 95       	lsr	r24
    2dca:	3a e0       	ldi	r19, 0x0A	; 10
    2dcc:	83 9f       	mul	r24, r19
    2dce:	20 19       	sub	r18, r0
    2dd0:	11 24       	eor	r1, r1
    2dd2:	20 93 ca 01 	sts	0x01CA, r18
                    digit_data[4] = hours / 10 % 10;
    2dd6:	89 9f       	mul	r24, r25
    2dd8:	91 2d       	mov	r25, r1
    2dda:	11 24       	eor	r1, r1
    2ddc:	96 95       	lsr	r25
    2dde:	96 95       	lsr	r25
    2de0:	96 95       	lsr	r25
    2de2:	2a e0       	ldi	r18, 0x0A	; 10
    2de4:	92 9f       	mul	r25, r18
    2de6:	80 19       	sub	r24, r0
    2de8:	11 24       	eor	r1, r1
    2dea:	80 93 cb 01 	sts	0x01CB, r24
                }
            }
            digit_data[0] = minutes % 10;
    2dee:	20 91 a3 01 	lds	r18, 0x01A3
                if (changeAlarmDisplay == 0) { //setting hundreds and thousands digit
                    digit_data[3] = alarm_h % 10;
                    digit_data[4] = alarm_h / 10 % 10;
                }
            }
            digit_data[0] = alarm_m % 10;
    2df2:	9d ec       	ldi	r25, 0xCD	; 205
    2df4:	29 9f       	mul	r18, r25
    2df6:	81 2d       	mov	r24, r1
    2df8:	11 24       	eor	r1, r1
    2dfa:	86 95       	lsr	r24
    2dfc:	86 95       	lsr	r24
    2dfe:	86 95       	lsr	r24
    2e00:	3a e0       	ldi	r19, 0x0A	; 10
    2e02:	83 9f       	mul	r24, r19
    2e04:	20 19       	sub	r18, r0
    2e06:	11 24       	eor	r1, r1
    2e08:	20 93 c7 01 	sts	0x01C7, r18
            digit_data[1] = alarm_m / 10 % 10;
    2e0c:	89 9f       	mul	r24, r25
    2e0e:	91 2d       	mov	r25, r1
    2e10:	11 24       	eor	r1, r1
    2e12:	96 95       	lsr	r25
    2e14:	96 95       	lsr	r25
    2e16:	96 95       	lsr	r25
    2e18:	2a e0       	ldi	r18, 0x0A	; 10
    2e1a:	92 9f       	mul	r25, r18
    2e1c:	80 19       	sub	r24, r0
    2e1e:	11 24       	eor	r1, r1
    2e20:	80 93 c8 01 	sts	0x01C8, r24
    2e24:	08 95       	ret
    }
    clk_count(timer); //allows user to switch time mode displayed
    
    switch (clock_mode) {
        case 0:
            digit_data[0] = minutes % 10; //get the number of units
    2e26:	20 91 a3 01 	lds	r18, 0x01A3
    2e2a:	9d ec       	ldi	r25, 0xCD	; 205
    2e2c:	29 9f       	mul	r18, r25
    2e2e:	81 2d       	mov	r24, r1
    2e30:	11 24       	eor	r1, r1
    2e32:	86 95       	lsr	r24
    2e34:	86 95       	lsr	r24
    2e36:	86 95       	lsr	r24
    2e38:	3a e0       	ldi	r19, 0x0A	; 10
    2e3a:	83 9f       	mul	r24, r19
    2e3c:	20 19       	sub	r18, r0
    2e3e:	11 24       	eor	r1, r1
    2e40:	20 93 c7 01 	sts	0x01C7, r18
            digit_data[1] = minutes / 10 % 10; //get the number of tens
    2e44:	89 9f       	mul	r24, r25
    2e46:	21 2d       	mov	r18, r1
    2e48:	11 24       	eor	r1, r1
    2e4a:	26 95       	lsr	r18
    2e4c:	26 95       	lsr	r18
    2e4e:	26 95       	lsr	r18
    2e50:	3a e0       	ldi	r19, 0x0A	; 10
    2e52:	23 9f       	mul	r18, r19
    2e54:	80 19       	sub	r24, r0
    2e56:	11 24       	eor	r1, r1
    2e58:	80 93 c8 01 	sts	0x01C8, r24
            digit_data[3] = hours % 10;  //get the number of hundreds
    2e5c:	20 91 a4 01 	lds	r18, 0x01A4
    2e60:	21 cf       	rjmp	.-446    	; 0x2ca4 <mode_switch+0xb2>
            digit_data[3] = alarm_h % 10;
            digit_data[4] = alarm_h / 10 % 10;
            break;
            
        case 3:
            if ((timer % 64) == 0) {    //change mode, set alarm minutes
    2e62:	80 91 01 01 	lds	r24, 0x0101
    2e66:	8f 73       	andi	r24, 0x3F	; 63
    2e68:	49 f5       	brne	.+82     	; 0x2ebc <mode_switch+0x2ca>
                changeAlarmDisplay = !changeAlarmDisplay; //blink/blank hour display
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 91 ea 01 	lds	r25, 0x01EA
    2e70:	91 11       	cpse	r25, r1
    2e72:	27 c0       	rjmp	.+78     	; 0x2ec2 <mode_switch+0x2d0>
    2e74:	80 93 ea 01 	sts	0x01EA, r24
                digit_data[3] = 10;          //switch off
    2e78:	9a e0       	ldi	r25, 0x0A	; 10
    2e7a:	90 93 ca 01 	sts	0x01CA, r25
                digit_data[4] = 10;
    2e7e:	90 93 cb 01 	sts	0x01CB, r25
                if (changeAlarmDisplay == 0) { //setting hundreds and thousands digit
    2e82:	81 11       	cpse	r24, r1
    2e84:	1b c0       	rjmp	.+54     	; 0x2ebc <mode_switch+0x2ca>
                    digit_data[3] = alarm_h % 10;
    2e86:	20 91 9b 01 	lds	r18, 0x019B
    2e8a:	9d ec       	ldi	r25, 0xCD	; 205
    2e8c:	29 9f       	mul	r18, r25
    2e8e:	81 2d       	mov	r24, r1
    2e90:	11 24       	eor	r1, r1
    2e92:	86 95       	lsr	r24
    2e94:	86 95       	lsr	r24
    2e96:	86 95       	lsr	r24
    2e98:	3a e0       	ldi	r19, 0x0A	; 10
    2e9a:	83 9f       	mul	r24, r19
    2e9c:	20 19       	sub	r18, r0
    2e9e:	11 24       	eor	r1, r1
    2ea0:	20 93 ca 01 	sts	0x01CA, r18
                    digit_data[4] = alarm_h / 10 % 10;
    2ea4:	89 9f       	mul	r24, r25
    2ea6:	91 2d       	mov	r25, r1
    2ea8:	11 24       	eor	r1, r1
    2eaa:	96 95       	lsr	r25
    2eac:	96 95       	lsr	r25
    2eae:	96 95       	lsr	r25
    2eb0:	2a e0       	ldi	r18, 0x0A	; 10
    2eb2:	92 9f       	mul	r25, r18
    2eb4:	80 19       	sub	r24, r0
    2eb6:	11 24       	eor	r1, r1
    2eb8:	80 93 cb 01 	sts	0x01CB, r24
                }
            }
            digit_data[0] = alarm_m % 10;
    2ebc:	20 91 9c 01 	lds	r18, 0x019C
    2ec0:	98 cf       	rjmp	.-208    	; 0x2df2 <mode_switch+0x200>
            digit_data[4] = alarm_h / 10 % 10;
            break;
            
        case 3:
            if ((timer % 64) == 0) {    //change mode, set alarm minutes
                changeAlarmDisplay = !changeAlarmDisplay; //blink/blank hour display
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	d7 cf       	rjmp	.-82     	; 0x2e74 <mode_switch+0x282>

00002ec6 <__vector_16>:
/***********************************************************************/
//                             TIMER0_OVF_vect
// TIMER0 vector will run when the interrupt occurs, executing
// the encoders function and send the data to bar graph using SPI.
//***********************************************************************/
ISR(TIMER0_OVF_vect){
    2ec6:	1f 92       	push	r1
    2ec8:	0f 92       	push	r0
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	0f 92       	push	r0
    2ece:	11 24       	eor	r1, r1
    2ed0:	0b b6       	in	r0, 0x3b	; 59
    2ed2:	0f 92       	push	r0
    2ed4:	2f 93       	push	r18
    2ed6:	3f 93       	push	r19
    2ed8:	4f 93       	push	r20
    2eda:	5f 93       	push	r21
    2edc:	6f 93       	push	r22
    2ede:	7f 93       	push	r23
    2ee0:	8f 93       	push	r24
    2ee2:	9f 93       	push	r25
    2ee4:	af 93       	push	r26
    2ee6:	bf 93       	push	r27
    2ee8:	ef 93       	push	r30
    2eea:	ff 93       	push	r31
    
    mode_switch(1); //for changing to different alarm mode
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <mode_switch>
    
    encoders(SPDR); //runs the state machine that drives the encoders
    2ef2:	8f b1       	in	r24, 0x0f	; 15
    2ef4:	0e 94 72 11 	call	0x22e4	; 0x22e4 <encoders>
    SPDR = displayBits; //send to display_test function
    2ef8:	80 91 a7 01 	lds	r24, 0x01A7
    2efc:	8f b9       	out	0x0f, r24	; 15
    
    //strobe register - trigger an action each time it is written to (or sometimes, read from)
    
    while (bit_is_clear(SPSR, SPIF)) {}   //wait till data is sent out
    2efe:	77 9b       	sbis	0x0e, 7	; 14
    2f00:	fe cf       	rjmp	.-4      	; 0x2efe <__vector_16+0x38>
    PORTB |= (1 << PORTB0);  //strobe output data reg in HC595 - rising edge 0x02
    2f02:	c0 9a       	sbi	0x18, 0	; 24
    PORTB &=  ~(1 << PORTB0);  //falling edge
    2f04:	c0 98       	cbi	0x18, 0	; 24

}
    2f06:	ff 91       	pop	r31
    2f08:	ef 91       	pop	r30
    2f0a:	bf 91       	pop	r27
    2f0c:	af 91       	pop	r26
    2f0e:	9f 91       	pop	r25
    2f10:	8f 91       	pop	r24
    2f12:	7f 91       	pop	r23
    2f14:	6f 91       	pop	r22
    2f16:	5f 91       	pop	r21
    2f18:	4f 91       	pop	r20
    2f1a:	3f 91       	pop	r19
    2f1c:	2f 91       	pop	r18
    2f1e:	0f 90       	pop	r0
    2f20:	0b be       	out	0x3b, r0	; 59
    2f22:	0f 90       	pop	r0
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	0f 90       	pop	r0
    2f28:	1f 90       	pop	r1
    2f2a:	18 95       	reti

00002f2c <main>:
//  S5 - stops alarm clock
//  S6 - runs alarm snooze
//***********************************************************************************
int main() {
    
    DDRB = 0xFF;     //set PORTB as all outputs
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	87 bb       	out	0x17, r24	; 23
    DDRE |= 0xFF;    // Set CLK_INH, SH/LD as output(PE7,PE6) and OCR3A (PE3)
    2f30:	92 b1       	in	r25, 0x02	; 2
    2f32:	82 b9       	out	0x02, r24	; 2
    DDRA = 0x00;     //set port A to all inputs (for the 7 segment)
    2f34:	1a ba       	out	0x1a, r1	; 26
    
    music_init(); //runs the necessary init methods from kellen_music.c
    2f36:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <music_init>
// parameters are set up: master mode, clock=clk/2, half phase cycle,
// low polarity, MSB first interrupts disabled, poll SPIF bit in SPSR to
// check transmit completion.
/***********************************************************************/
void spi_init(void){
    SPCR |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
    2f3a:	8d b1       	in	r24, 0x0d	; 13
    2f3c:	80 65       	ori	r24, 0x50	; 80
    2f3e:	8d b9       	out	0x0d, r24	; 13
    SPSR |= (1<<SPI2X);   // double speed operation
    2f40:	70 9a       	sbi	0x0e, 0	; 14
    DDRE |= 0xFF;    // Set CLK_INH, SH/LD as output(PE7,PE6) and OCR3A (PE3)
    DDRA = 0x00;     //set port A to all inputs (for the 7 segment)
    
    music_init(); //runs the necessary init methods from kellen_music.c
    spi_init(); //initialize spi to send data to bar graph
    adc_init(); //initialize adc for photoresistor PWM
    2f42:	0e 94 5e 11 	call	0x22bc	; 0x22bc <adc_init>
// Initializes timer/counter0. TCNT0 allows running
// in async mode with an external 32khz crystal. If running in normal mode,
// there is no prescaling. Overflow interrupt occurs at 0xFF.
/***********************************************************************/
void tcnt0_init(void){
    ASSR  |= (1<<AS0);  //ext osc TOSC
    2f46:	80 b7       	in	r24, 0x30	; 48
    2f48:	88 60       	ori	r24, 0x08	; 8
    2f4a:	80 bf       	out	0x30, r24	; 48
    TIMSK |= (1<<TOIE0);  //enable timer/counter0 overflow interrupt
    2f4c:	87 b7       	in	r24, 0x37	; 55
    2f4e:	81 60       	ori	r24, 0x01	; 1
    2f50:	87 bf       	out	0x37, r24	; 55
    TCCR0 |= (1<<CS00);  //normal mode, no prescale
    2f52:	83 b7       	in	r24, 0x33	; 51
    2f54:	81 60       	ori	r24, 0x01	; 1
    2f56:	83 bf       	out	0x33, r24	; 51
//***********************************************************************/
//                          tcnt2_init
// Initialize timer counter 2 to allow LED dimming through PWM
//***********************************************************************/
void tcnt2_init(void){
    DDRB  |= (1<<PB7);
    2f58:	bf 9a       	sbi	0x17, 7	; 23
    TCCR2 &= (0<<FOC2); //no forced compare. fast pwm mode. Set OC2 on compare match
    2f5a:	85 b5       	in	r24, 0x25	; 37
    2f5c:	15 bc       	out	0x25, r1	; 37
    TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20);
    2f5e:	85 b5       	in	r24, 0x25	; 37
    2f60:	88 67       	ori	r24, 0x78	; 120
    2f62:	85 bd       	out	0x25, r24	; 37
    TCCR2 |= (1<<CS20); //normal mode, no prescaler
    2f64:	85 b5       	in	r24, 0x25	; 37
    2f66:	81 60       	ori	r24, 0x01	; 1
    2f68:	85 bd       	out	0x25, r24	; 37
    OCR2  = 0x00; //initialize OCR register for PWM
    2f6a:	13 bc       	out	0x23, r1	; 35
    music_init(); //runs the necessary init methods from kellen_music.c
    spi_init(); //initialize spi to send data to bar graph
    adc_init(); //initialize adc for photoresistor PWM
    tcnt0_init();  //initalize counter/timer0 (for 32kHz clock timebase)
    tcnt2_init();  //initalize counter/timer2 (for LED dimming through PWM)
    tcnt3_init();  //initalize counter/timer3 (for volume control pwm)
    2f6c:	0e 94 49 11 	call	0x2292	; 0x2292 <tcnt3_init>
    sei();         //enable global interrupts
    2f70:	78 94       	sei
    
    LCD_Init();
    2f72:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_Init>
    LCD_PutStr("Alarm Clock");
    2f76:	80 e2       	ldi	r24, 0x20	; 32
    2f78:	91 e0       	ldi	r25, 0x01	; 1
    2f7a:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
    LCD_MovCursorLn2();
    2f7e:	0e 94 33 02 	call	0x466	; 0x466 <LCD_MovCursorLn2>
    if (alarm_state == 0) LCD_PutStr("Mute mode");
    2f82:	80 91 d1 01 	lds	r24, 0x01D1
    2f86:	88 23       	and	r24, r24
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <main+0x60>
    2f8a:	e6 c0       	rjmp	.+460    	; 0x3158 <main+0x22c>
    if (alarm_state == 1) LCD_PutStr("Active mode");
    2f8c:	81 30       	cpi	r24, 0x01	; 1
    2f8e:	09 f4       	brne	.+2      	; 0x2f92 <main+0x66>
    2f90:	de c0       	rjmp	.+444    	; 0x314e <main+0x222>
    
    while(1){
        _delay_ms(3);    //delay 3 ms, for proper function (timing is important in embedded)
        PORTA = 0xFF;    //set port A to pullups
    2f92:	cf ef       	ldi	r28, 0xFF	; 255
        PORTB = 0x70;    //enable the tristate buffer
    2f94:	10 e7       	ldi	r17, 0x70	; 112
            stop_alarm();
            clock_mode = 3;                       // set alarm minutes
            stop = 0;                       //reset alarm
            inc_multiple = 1;               //+/1
            s2_switch = !s2_switch;
            if (s2_switch)  clock_mode = 4;       // set alarm hours
    2f96:	04 e0       	ldi	r16, 0x04	; 4
        
        //reset encoder counter (important! you don't want to break the state machine)
        count = 0;
        
        //disable tristate buffer
        PORTB = 0x5C;
    2f98:	dc e5       	ldi	r29, 0x5C	; 92
    2f9a:	6b c0       	rjmp	.+214    	; 0x3072 <main+0x146>
            LCD_MovCursorLn2();
            if (alarm_state == 0) LCD_PutStr("Mute mode");
            if (alarm_state == 1) LCD_PutStr("Active mode");
        }
        
        if (chk_buttons(2)) {        //change time mode
    2f9c:	82 e0       	ldi	r24, 0x02	; 2
    2f9e:	0e 94 48 10 	call	0x2090	; 0x2090 <chk_buttons>
    2fa2:	89 2b       	or	r24, r25
    2fa4:	11 f1       	breq	.+68     	; 0x2fea <main+0xbe>
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    2fa6:	10 92 cc 01 	sts	0x01CC, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    2faa:	8e b5       	in	r24, 0x2e	; 46
    2fac:	8c 7f       	andi	r24, 0xFC	; 252
    2fae:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    2fb0:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	80 93 c5 01 	sts	0x01C5, r24
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm = 0;     // reset alarm
    2fb8:	10 92 98 01 	sts	0x0198, r1
            if (alarm_state == 1) LCD_PutStr("Active mode");
        }
        
        if (chk_buttons(2)) {        //change time mode
            stop_alarm();
            clock_mode = 1; // set minutes
    2fbc:	80 93 a0 01 	sts	0x01A0, r24
            timer = 1;               //stop clock
    2fc0:	80 93 01 01 	sts	0x0101, r24
            inc_multiple = 1;        //+/- 1
    2fc4:	80 93 e8 01 	sts	0x01E8, r24
            s2_switch = !s2_switch;
    2fc8:	90 91 9f 01 	lds	r25, 0x019F
    2fcc:	91 11       	cpse	r25, r1
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	80 93 9f 01 	sts	0x019F, r24
            if (s2_switch)  clock_mode = 2;       // set hours
    2fd4:	88 23       	and	r24, r24
    2fd6:	19 f0       	breq	.+6      	; 0x2fde <main+0xb2>
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	80 93 a0 01 	sts	0x01A0, r24
            LCD_Init();
    2fde:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_Init>
            LCD_PutStr("Set clock time");
    2fe2:	82 e4       	ldi	r24, 0x42	; 66
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
        }
        
        if (chk_buttons(3)) {           //change alarm mode
    2fea:	83 e0       	ldi	r24, 0x03	; 3
    2fec:	0e 94 48 10 	call	0x2090	; 0x2090 <chk_buttons>
    2ff0:	89 2b       	or	r24, r25
    2ff2:	09 f1       	breq	.+66     	; 0x3036 <main+0x10a>
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    2ff4:	10 92 cc 01 	sts	0x01CC, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    2ff8:	8e b5       	in	r24, 0x2e	; 46
    2ffa:	8c 7f       	andi	r24, 0xFC	; 252
    2ffc:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    2ffe:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	80 93 c5 01 	sts	0x01C5, r24
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm = 0;     // reset alarm
    3006:	10 92 98 01 	sts	0x0198, r1
            LCD_PutStr("Set clock time");
        }
        
        if (chk_buttons(3)) {           //change alarm mode
            stop_alarm();
            clock_mode = 3;                       // set alarm minutes
    300a:	93 e0       	ldi	r25, 0x03	; 3
    300c:	90 93 a0 01 	sts	0x01A0, r25
            stop = 0;                       //reset alarm
    3010:	10 92 97 01 	sts	0x0197, r1
            inc_multiple = 1;               //+/1
    3014:	80 93 e8 01 	sts	0x01E8, r24
            s2_switch = !s2_switch;
    3018:	90 91 9f 01 	lds	r25, 0x019F
    301c:	91 11       	cpse	r25, r1
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	80 93 9f 01 	sts	0x019F, r24
            if (s2_switch)  clock_mode = 4;       // set alarm hours
    3024:	81 11       	cpse	r24, r1
    3026:	00 93 a0 01 	sts	0x01A0, r16
            LCD_Init();
    302a:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_Init>
            LCD_PutStr("Set clock alarm");
    302e:	81 e5       	ldi	r24, 0x51	; 81
    3030:	91 e0       	ldi	r25, 0x01	; 1
    3032:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
        }
        
        if (chk_buttons(4)) {
    3036:	84 e0       	ldi	r24, 0x04	; 4
    3038:	0e 94 48 10 	call	0x2090	; 0x2090 <chk_buttons>
    303c:	89 2b       	or	r24, r25
    303e:	09 f0       	breq	.+2      	; 0x3042 <main+0x116>
    3040:	6b c0       	rjmp	.+214    	; 0x3118 <main+0x1ec>
            LCD_PutStr("12/24 hour ");
            LCD_MovCursorLn2();
            LCD_PutStr("Mode change");
        }
        
        if (chk_buttons(5)) {               // stop alarm
    3042:	85 e0       	ldi	r24, 0x05	; 5
    3044:	0e 94 48 10 	call	0x2090	; 0x2090 <chk_buttons>
    3048:	89 2b       	or	r24, r25
    304a:	09 f0       	breq	.+2      	; 0x304e <main+0x122>
    304c:	4d c0       	rjmp	.+154    	; 0x30e8 <main+0x1bc>
            alarm_s = 0;                    //reset snooze count
            LCD_Init();
            LCD_PutStr("Stop alarm");
        }
        
        if  (chk_buttons(6)){              //snooze function
    304e:	86 e0       	ldi	r24, 0x06	; 6
    3050:	0e 94 48 10 	call	0x2090	; 0x2090 <chk_buttons>
    3054:	89 2b       	or	r24, r25
    3056:	91 f5       	brne	.+100    	; 0x30bc <main+0x190>
            LCD_Init();
            LCD_PutStr("Snooze for 10s...");
        }
        
        //send sum to display 7-segment
        segment_value(digit_data);
    3058:	87 ec       	ldi	r24, 0xC7	; 199
    305a:	91 e0       	ldi	r25, 0x01	; 1
    305c:	0e 94 86 10 	call	0x210c	; 0x210c <segment_value>
        
        //reset encoder counter (important! you don't want to break the state machine)
        count = 0;
    3060:	10 92 02 01 	sts	0x0102, r1
        
        //disable tristate buffer
        PORTB = 0x5C;
    3064:	d8 bb       	out	0x18, r29	; 24
        
        //set port A to all output for 7-segment
        DDRA = 0xFF;
    3066:	ca bb       	out	0x1a, r28	; 26
        
        //reset PORTA
        PORTA = 0x00;
    3068:	1b ba       	out	0x1b, r1	; 27
        
        //send value of 4 digit segments to display 
        segment_display(segment_data);
    306a:	88 ea       	ldi	r24, 0xA8	; 168
    306c:	91 e0       	ldi	r25, 0x01	; 1
    306e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <segment_display>
    3072:	8f ed       	ldi	r24, 0xDF	; 223
    3074:	9e e2       	ldi	r25, 0x2E	; 46
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <main+0x14a>
    307a:	00 c0       	rjmp	.+0      	; 0x307c <main+0x150>
    307c:	00 00       	nop
    if (alarm_state == 0) LCD_PutStr("Mute mode");
    if (alarm_state == 1) LCD_PutStr("Active mode");
    
    while(1){
        _delay_ms(3);    //delay 3 ms, for proper function (timing is important in embedded)
        PORTA = 0xFF;    //set port A to pullups
    307e:	cb bb       	out	0x1b, r28	; 27
        PORTB = 0x70;    //enable the tristate buffer
    3080:	18 bb       	out	0x18, r17	; 24
        
        //button press handling cases
        if (chk_buttons(1)) {
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	0e 94 48 10 	call	0x2090	; 0x2090 <chk_buttons>
    3088:	89 2b       	or	r24, r25
    308a:	09 f4       	brne	.+2      	; 0x308e <main+0x162>
    308c:	87 cf       	rjmp	.-242    	; 0x2f9c <main+0x70>
            clock_mode = 0; //normal mode
    308e:	10 92 a0 01 	sts	0x01A0, r1
            LCD_Init();     //initialize the LCD
    3092:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_Init>
            LCD_PutStr("Alarm Clock");
    3096:	80 e2       	ldi	r24, 0x20	; 32
    3098:	91 e0       	ldi	r25, 0x01	; 1
    309a:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
            LCD_MovCursorLn2();
    309e:	0e 94 33 02 	call	0x466	; 0x466 <LCD_MovCursorLn2>
            if (alarm_state == 0) LCD_PutStr("Mute mode");
    30a2:	80 91 d1 01 	lds	r24, 0x01D1
    30a6:	88 23       	and	r24, r24
    30a8:	09 f4       	brne	.+2      	; 0x30ac <main+0x180>
    30aa:	4a c0       	rjmp	.+148    	; 0x3140 <main+0x214>
            if (alarm_state == 1) LCD_PutStr("Active mode");
    30ac:	81 30       	cpi	r24, 0x01	; 1
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <main+0x186>
    30b0:	75 cf       	rjmp	.-278    	; 0x2f9c <main+0x70>
    30b2:	86 e3       	ldi	r24, 0x36	; 54
    30b4:	91 e0       	ldi	r25, 0x01	; 1
    30b6:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
    30ba:	70 cf       	rjmp	.-288    	; 0x2f9c <main+0x70>
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    30bc:	10 92 cc 01 	sts	0x01CC, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    30c0:	8e b5       	in	r24, 0x2e	; 46
    30c2:	8c 7f       	andi	r24, 0xFC	; 252
    30c4:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    30c6:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	80 93 c5 01 	sts	0x01C5, r24
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm = 0;     // reset alarm
    30ce:	10 92 98 01 	sts	0x0198, r1
            LCD_PutStr("Stop alarm");
        }
        
        if  (chk_buttons(6)){              //snooze function
            stop_alarm();
            stop = 1;
    30d2:	80 93 97 01 	sts	0x0197, r24
            snooze_flag = 1;
    30d6:	80 93 96 01 	sts	0x0196, r24
            LCD_Init();
    30da:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_Init>
            LCD_PutStr("Snooze for 10s...");
    30de:	84 e8       	ldi	r24, 0x84	; 132
    30e0:	91 e0       	ldi	r25, 0x01	; 1
    30e2:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
    30e6:	b8 cf       	rjmp	.-144    	; 0x3058 <main+0x12c>
    }
}

void music_off(void) {
    //this turns the alarm timer off
    notes=0;
    30e8:	10 92 cc 01 	sts	0x01CC, r1
    TCCR1B &= ~((1<<CS11)|(1<<CS10));
    30ec:	8e b5       	in	r24, 0x2e	; 46
    30ee:	8c 7f       	andi	r24, 0xFC	; 252
    30f0:	8e bd       	out	0x2e, r24	; 46
    //and mutes the output
    PORTD |= mute;
    30f2:	92 9a       	sbi	0x12, 2	; 18
    music_off_flag = 1;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	80 93 c5 01 	sts	0x01C5, r24
//                                      stop_alarm
// when called, stops the alarm by killing the music
//***********************************************************************************
void stop_alarm() {
    music_off();
    alarm = 0;     // reset alarm
    30fa:	10 92 98 01 	sts	0x0198, r1
            LCD_PutStr("Mode change");
        }
        
        if (chk_buttons(5)) {               // stop alarm
            stop_alarm();
            stop = 1;
    30fe:	80 93 97 01 	sts	0x0197, r24
            snooze_flag = 0;                //reset snooze
    3102:	10 92 96 01 	sts	0x0196, r1
            alarm_s = 0;                    //reset snooze count
    3106:	10 92 9d 01 	sts	0x019D, r1
            LCD_Init();
    310a:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_Init>
            LCD_PutStr("Stop alarm");
    310e:	89 e7       	ldi	r24, 0x79	; 121
    3110:	91 e0       	ldi	r25, 0x01	; 1
    3112:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
    3116:	9b cf       	rjmp	.-202    	; 0x304e <main+0x122>
            LCD_Init();
            LCD_PutStr("Set clock alarm");
        }
        
        if (chk_buttons(4)) {
            s4_switch = !s4_switch; // 12/24hr switching mode
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 91 9e 01 	lds	r25, 0x019E
    311e:	91 11       	cpse	r25, r1
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	80 93 9e 01 	sts	0x019E, r24
            LCD_Init();
    3126:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_Init>
            LCD_PutStr("12/24 hour ");
    312a:	81 e6       	ldi	r24, 0x61	; 97
    312c:	91 e0       	ldi	r25, 0x01	; 1
    312e:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
            LCD_MovCursorLn2();
    3132:	0e 94 33 02 	call	0x466	; 0x466 <LCD_MovCursorLn2>
            LCD_PutStr("Mode change");
    3136:	8d e6       	ldi	r24, 0x6D	; 109
    3138:	91 e0       	ldi	r25, 0x01	; 1
    313a:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
    313e:	81 cf       	rjmp	.-254    	; 0x3042 <main+0x116>
        if (chk_buttons(1)) {
            clock_mode = 0; //normal mode
            LCD_Init();     //initialize the LCD
            LCD_PutStr("Alarm Clock");
            LCD_MovCursorLn2();
            if (alarm_state == 0) LCD_PutStr("Mute mode");
    3140:	8c e2       	ldi	r24, 0x2C	; 44
    3142:	91 e0       	ldi	r25, 0x01	; 1
    3144:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
    3148:	80 91 d1 01 	lds	r24, 0x01D1
    314c:	af cf       	rjmp	.-162    	; 0x30ac <main+0x180>
    
    LCD_Init();
    LCD_PutStr("Alarm Clock");
    LCD_MovCursorLn2();
    if (alarm_state == 0) LCD_PutStr("Mute mode");
    if (alarm_state == 1) LCD_PutStr("Active mode");
    314e:	86 e3       	ldi	r24, 0x36	; 54
    3150:	91 e0       	ldi	r25, 0x01	; 1
    3152:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
    3156:	1d cf       	rjmp	.-454    	; 0x2f92 <main+0x66>
    sei();         //enable global interrupts
    
    LCD_Init();
    LCD_PutStr("Alarm Clock");
    LCD_MovCursorLn2();
    if (alarm_state == 0) LCD_PutStr("Mute mode");
    3158:	8c e2       	ldi	r24, 0x2C	; 44
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	0e 94 01 04 	call	0x802	; 0x802 <LCD_PutStr>
    3160:	80 91 d1 01 	lds	r24, 0x01D1
    3164:	13 cf       	rjmp	.-474    	; 0x2f8c <main+0x60>

00003166 <__tablejump2__>:
    3166:	ee 0f       	add	r30, r30
    3168:	ff 1f       	adc	r31, r31

0000316a <__tablejump__>:
    316a:	05 90       	lpm	r0, Z+
    316c:	f4 91       	lpm	r31, Z
    316e:	e0 2d       	mov	r30, r0
    3170:	09 94       	ijmp

00003172 <_exit>:
    3172:	f8 94       	cli

00003174 <__stop_program>:
    3174:	ff cf       	rjmp	.-2      	; 0x3174 <__stop_program>
