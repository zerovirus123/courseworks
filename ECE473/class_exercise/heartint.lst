
heartint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000154  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  00000208  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000264  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c5  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000149  00000000  00000000  00000599  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d7  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000063  00000000  00000000  0000080f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_29>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e5       	ldi	r30, 0x54	; 84
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  b6:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <__vector_29>:
//well for setting the brightness level.

uint16_t brightness[20] = {0x0100, 0x2C00, 0x4200, 0x5700, 0x6E00,0x8400, 0x9A00, 0xB100, 0xC600, 0xDC00, 0xEF00, 0xDC00, 0xC600, 0xB100, 0x9A00, 0x8400, 0x6E00, 0x5700,0x4200, 0x2C00,0x0100};


ISR( TIMER3_OVF_vect ) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	0b b6       	in	r0, 0x3b	; 59
  ca:	0f 92       	push	r0
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
    static uint8_t timer=10;
    timer++;
  d4:	80 91 00 01 	lds	r24, 0x0100
  d8:	8f 5f       	subi	r24, 0xFF	; 255
    timer = timer%20;
  da:	ed ec       	ldi	r30, 0xCD	; 205
  dc:	8e 9f       	mul	r24, r30
  de:	e1 2d       	mov	r30, r1
  e0:	11 24       	eor	r1, r1
  e2:	e2 95       	swap	r30
  e4:	ef 70       	andi	r30, 0x0F	; 15
  e6:	94 e1       	ldi	r25, 0x14	; 20
  e8:	e9 9f       	mul	r30, r25
  ea:	80 19       	sub	r24, r0
  ec:	11 24       	eor	r1, r1
  ee:	e8 2f       	mov	r30, r24
  f0:	80 93 00 01 	sts	0x0100, r24
    OCR1A = brightness[timer];
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	ef 5f       	subi	r30, 0xFF	; 255
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	80 81       	ld	r24, Z
 100:	91 81       	ldd	r25, Z+1	; 0x01
 102:	9b bd       	out	0x2b, r25	; 43
 104:	8a bd       	out	0x2a, r24	; 42
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0b be       	out	0x3b, r0	; 59
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <main>:

int main() {
    
    DDRB = 0x20;   //set port B bit five to output
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	87 bb       	out	0x17, r24	; 23
    
    //setup timer counter 1 as the pwm source
    //TCCR1A |= (1<<COM1A1) |(1<<COM1A0)|(1<<WGM11);
    TCCR1A |= (1<<COM1A1) |(1<<COM1A0)|(1<<WGM13)|(1<<WGM12)|(1<<WGM11);                            //fast pwm, set on match, clear@bottom,
 120:	8f b5       	in	r24, 0x2f	; 47
 122:	8a 6d       	ori	r24, 0xDA	; 218
 124:	8f bd       	out	0x2f, r24	; 47
    //(inverting mode) ICR1 holds TOP
    
    TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS10);                            //use ICR1 as source for TOP, use clk/1
 126:	8e b5       	in	r24, 0x2e	; 46
 128:	89 61       	ori	r24, 0x19	; 25
 12a:	8e bd       	out	0x2e, r24	; 46
    TCCR1C  = 0x00;                            //no forced compare
 12c:	10 92 7a 00 	sts	0x007A, r1
    ICR1    = 0xF000;                           //clear at 0xF000      1`
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 ef       	ldi	r25, 0xF0	; 240
 134:	97 bd       	out	0x27, r25	; 39
 136:	86 bd       	out	0x26, r24	; 38
    
    //setup timer counter 3 as the interrupt source, 30 interrupts/sec
    // (16,000,000)/(8 * 2^16) = 30 cycles/sec
    
    TCCR3A = 0x00;                             //normal mode
 138:	10 92 8b 00 	sts	0x008B, r1
    TCCR3B = (1<<CS31);                             //use clk/8  (15hz)
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	80 93 8a 00 	sts	0x008A, r24
    TCCR3C = 0x00;                             //no forced compare
 142:	10 92 8c 00 	sts	0x008C, r1
    ETIMSK = (1<<TOIE3);                             //enable timer 3 interrupt on TOV
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	80 93 7d 00 	sts	0x007D, r24
    
    sei();                                //set GIE to enable interrupts
 14c:	78 94       	sei
 14e:	ff cf       	rjmp	.-2      	; 0x14e <main+0x32>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
