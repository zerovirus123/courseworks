
testled1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001e0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000268  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003c3  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000117  00000000  00000000  00000673  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019c  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f3  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000068  00000000  00000000  00000a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  9c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <blink>:
#include <avr/io.h>
#include <util/delay.h>

void blink(){
    
    PORTA = 0b11111110;
  a4:	8e ef       	ldi	r24, 0xFE	; 254
  a6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f e7       	ldi	r18, 0x7F	; 127
  aa:	84 e8       	ldi	r24, 0x84	; 132
  ac:	9e e1       	ldi	r25, 0x1E	; 30
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <blink+0xa>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <blink+0x14>
  b8:	00 00       	nop
    _delay_ms(10000);
    
    PORTA = 0b11111101;
  ba:	8d ef       	ldi	r24, 0xFD	; 253
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	2f e7       	ldi	r18, 0x7F	; 127
  c0:	84 e8       	ldi	r24, 0x84	; 132
  c2:	9e e1       	ldi	r25, 0x1E	; 30
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <blink+0x20>
  cc:	00 c0       	rjmp	.+0      	; 0xce <blink+0x2a>
  ce:	00 00       	nop
    _delay_ms(10000);
    
    PORTA = 0b11111011;
  d0:	8b ef       	ldi	r24, 0xFB	; 251
  d2:	8b bb       	out	0x1b, r24	; 27
  d4:	2f e7       	ldi	r18, 0x7F	; 127
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	9e e1       	ldi	r25, 0x1E	; 30
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <blink+0x36>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <blink+0x40>
  e4:	00 00       	nop
    _delay_ms(10000);
    
    PORTA = 0b11110111;
  e6:	87 ef       	ldi	r24, 0xF7	; 247
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	2f e7       	ldi	r18, 0x7F	; 127
  ec:	84 e8       	ldi	r24, 0x84	; 132
  ee:	9e e1       	ldi	r25, 0x1E	; 30
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <blink+0x4c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <blink+0x56>
  fa:	00 00       	nop
    _delay_ms(10000);
    
    PORTA = 0b11101111;
  fc:	8f ee       	ldi	r24, 0xEF	; 239
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	2f e7       	ldi	r18, 0x7F	; 127
 102:	84 e8       	ldi	r24, 0x84	; 132
 104:	9e e1       	ldi	r25, 0x1E	; 30
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <blink+0x62>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <blink+0x6c>
 110:	00 00       	nop
    _delay_ms(10000);
    
    PORTA = 0b11011111;
 112:	8f ed       	ldi	r24, 0xDF	; 223
 114:	8b bb       	out	0x1b, r24	; 27
 116:	2f e7       	ldi	r18, 0x7F	; 127
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	9e e1       	ldi	r25, 0x1E	; 30
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <blink+0x78>
 124:	00 c0       	rjmp	.+0      	; 0x126 <blink+0x82>
 126:	00 00       	nop
    _delay_ms(10000);
    
    PORTA = 0b10111111;
 128:	8f eb       	ldi	r24, 0xBF	; 191
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	2f e7       	ldi	r18, 0x7F	; 127
 12e:	84 e8       	ldi	r24, 0x84	; 132
 130:	9e e1       	ldi	r25, 0x1E	; 30
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <blink+0x8e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <blink+0x98>
 13c:	00 00       	nop
    _delay_ms(10000);
    
    PORTA = 0b01111111;
 13e:	8f e7       	ldi	r24, 0x7F	; 127
 140:	8b bb       	out	0x1b, r24	; 27
 142:	2f e7       	ldi	r18, 0x7F	; 127
 144:	84 e8       	ldi	r24, 0x84	; 132
 146:	9e e1       	ldi	r25, 0x1E	; 30
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <blink+0xa4>
 150:	00 c0       	rjmp	.+0      	; 0x152 <blink+0xae>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <main>:
    
}

int main()
{
    DDRA  = 0xFF;   //set port A to all outputs
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	8a bb       	out	0x1a, r24	; 26
    DDRB  = 0xF0;   //set port bits 4-7 B as outputs
 15a:	90 ef       	ldi	r25, 0xF0	; 240
 15c:	97 bb       	out	0x17, r25	; 23
    DDRD  = 0x00;   //set port D all inputs
 15e:	11 ba       	out	0x11, r1	; 17
    PORTD = 0xFF;   //set port D all pullups
 160:	82 bb       	out	0x12, r24	; 18
    PORTA = 0xFF;   //set port A to all ones  (off, active low)
 162:	8b bb       	out	0x1b, r24	; 27
    
    while(1){
        
        int i;
        for(i=0; i<5; i++){
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
                    PORTB = 0x10; //digit one   on
                    blink();
                    break;
                
                case 2:
                     PORTB = 0x20; //digit one   on
 168:	20 e2       	ldi	r18, 0x20	; 32
 16a:	e2 2e       	mov	r14, r18
                    blink();
                    break;
                    
                case 3:
                     PORTB = 0x30; //digit one   on
 16c:	30 e3       	ldi	r19, 0x30	; 48
 16e:	f3 2e       	mov	r15, r19
                    blink();
                    break;
                    
                case 4:
                     PORTB = 0x40; //digit one   on
 170:	00 e4       	ldi	r16, 0x40	; 64
                    PORTB = 0x00; //digit zero  on
                    blink();
                    break;
            
                case 1:
                    PORTB = 0x10; //digit one   on
 172:	10 e1       	ldi	r17, 0x10	; 16
    PORTA = 0xFF;   //set port A to all ones  (off, active low)
    
    while(1){
        
        int i;
        for(i=0; i<5; i++){
 174:	85 30       	cpi	r24, 0x05	; 5
 176:	91 05       	cpc	r25, r1
 178:	94 f4       	brge	.+36     	; 0x19e <main+0x48>
            
            switch(i){
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	91 05       	cpc	r25, r1
 17e:	f9 f0       	breq	.+62     	; 0x1be <main+0x68>
 180:	ac f0       	brlt	.+42     	; 0x1ac <main+0x56>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	91 05       	cpc	r25, r1
 186:	09 f1       	breq	.+66     	; 0x1ca <main+0x74>
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	91 05       	cpc	r25, r1
 18c:	21 f5       	brne	.+72     	; 0x1d6 <main+0x80>
                     PORTB = 0x30; //digit one   on
                    blink();
                    break;
                    
                case 4:
                     PORTB = 0x40; //digit one   on
 18e:	08 bb       	out	0x18, r16	; 24
                    blink();
 190:	0e 94 52 00 	call	0xa4	; 0xa4 <blink>
                    break;
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	90 e0       	ldi	r25, 0x00	; 0
    PORTA = 0xFF;   //set port A to all ones  (off, active low)
    
    while(1){
        
        int i;
        for(i=0; i<5; i++){
 198:	85 30       	cpi	r24, 0x05	; 5
 19a:	91 05       	cpc	r25, r1
 19c:	74 f3       	brlt	.-36     	; 0x17a <main+0x24>
 19e:	c1 e0       	ldi	r28, 0x01	; 1
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
            
            switch(i){
            
                case 0:
                    PORTB = 0x00; //digit zero  on
 1a2:	18 ba       	out	0x18, r1	; 24
                    blink();
 1a4:	0e 94 52 00 	call	0xa4	; 0xa4 <blink>
                    break;
 1a8:	ce 01       	movw	r24, r28
 1aa:	e4 cf       	rjmp	.-56     	; 0x174 <main+0x1e>
    while(1){
        
        int i;
        for(i=0; i<5; i++){
            
            switch(i){
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	91 f4       	brne	.+36     	; 0x1d6 <main+0x80>
                    PORTB = 0x00; //digit zero  on
                    blink();
                    break;
            
                case 1:
                    PORTB = 0x10; //digit one   on
 1b2:	18 bb       	out	0x18, r17	; 24
                    blink();
 1b4:	0e 94 52 00 	call	0xa4	; 0xa4 <blink>
                    break;
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	db cf       	rjmp	.-74     	; 0x174 <main+0x1e>
                
                case 2:
                     PORTB = 0x20; //digit one   on
 1be:	e8 ba       	out	0x18, r14	; 24
                    blink();
 1c0:	0e 94 52 00 	call	0xa4	; 0xa4 <blink>
                    break;
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	d5 cf       	rjmp	.-86     	; 0x174 <main+0x1e>
                    
                case 3:
                     PORTB = 0x30; //digit one   on
 1ca:	f8 ba       	out	0x18, r15	; 24
                    blink();
 1cc:	0e 94 52 00 	call	0xa4	; 0xa4 <blink>
                    break;
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	cf cf       	rjmp	.-98     	; 0x174 <main+0x1e>
 1d6:	ec 01       	movw	r28, r24
 1d8:	21 96       	adiw	r28, 0x01	; 1
 1da:	e3 cf       	rjmp	.-58     	; 0x1a2 <main+0x4c>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
