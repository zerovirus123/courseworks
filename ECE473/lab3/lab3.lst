
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000006ac  00000740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800114  00800114  00000754  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000768  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000895  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c0  00000000  00000000  000010a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000373  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021c  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000060d  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002005  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 13 02 	call	0x426	; 0x426 <main>
  c6:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
// external device specific initializations.  Sets up SPI to be:
// master mode, clock=clk/2, cycle half phase, low polarity, MSB first
// interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    SPCR  |=   (1<<SPE)|(1<<MSTR);  //set up SPI mode
  ce:	8d b1       	in	r24, 0x0d	; 13
  d0:	80 65       	ori	r24, 0x50	; 80
  d2:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1<<SPI2X);          // double speed operation
  d4:	70 9a       	sbi	0x0e, 0	; 14
  d6:	08 95       	ret

000000d8 <tcnt0_init>:
// Initializes timer/counter0 (TCNT0). TCNT0 runs in async mode
// with external 32khz crystal.  Runs in normal mode with no prescaling.
// Interrupt occurs at overflow 0xFF.
/***********************************************************************/
void tcnt0_init(void){
    ASSR   |=  (1<<AS0);  //ext osc TOSC
  d8:	80 b7       	in	r24, 0x30	; 48
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
  de:	87 b7       	in	r24, 0x37	; 55
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1<<CS00);  //normal mode, clk/128 from prescaler
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	83 bf       	out	0x33, r24	; 51
  ea:	08 95       	ret

000000ec <encoders>:
// Switching two encoders will increment or decrement the sum. To determine
// the data sent from 74HC165 one can decide which encoder is switched. Turn-
// ing counterclockwise on any encoder decrements the number. Turning clockwise increments the number
// . If the user does not push any button, increment multiple is set to one.
/***********************************************************************/
void encoders(uint8_t encoder_data){
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	28 97       	sbiw	r28, 0x08	; 8
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
    
    //SPI values sent from 74HC165 when right encoder is changed
    uint8_t encoder_right[4] = {0xFB, 0xF3, 0xF7, 0xFF};
 100:	9b ef       	ldi	r25, 0xFB	; 251
 102:	9d 83       	std	Y+5, r25	; 0x05
 104:	93 ef       	ldi	r25, 0xF3	; 243
 106:	9e 83       	std	Y+6, r25	; 0x06
 108:	97 ef       	ldi	r25, 0xF7	; 247
 10a:	9f 83       	std	Y+7, r25	; 0x07
 10c:	9f ef       	ldi	r25, 0xFF	; 255
 10e:	98 87       	std	Y+8, r25	; 0x08
    
    //SPI values sent from 74HC165 when left encoder is changed
    uint8_t encoder_left[4] = {0xFE, 0xFC, 0xFD, 0xFF};
 110:	2e ef       	ldi	r18, 0xFE	; 254
 112:	29 83       	std	Y+1, r18	; 0x01
 114:	2c ef       	ldi	r18, 0xFC	; 252
 116:	2a 83       	std	Y+2, r18	; 0x02
 118:	2d ef       	ldi	r18, 0xFD	; 253
 11a:	2b 83       	std	Y+3, r18	; 0x03
 11c:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t mode_encoder;
    
    PORTE = 0x00; //SH/LD = 0 CLK_INH = 0
 11e:	13 b8       	out	0x03, r1	; 3
    PORTE |= 0x80; //SH/LD = 1 CLK_INH = 0
 120:	1f 9a       	sbi	0x03, 7	; 3
 122:	fe 01       	movw	r30, r28
 124:	31 96       	adiw	r30, 0x01	; 1
 126:	de 01       	movw	r26, r28
 128:	15 96       	adiw	r26, 0x05	; 5
 12a:	9d 01       	movw	r18, r26
    
    //loops through each encoder data array, and selects the encoder mode for the state machine
    uint8_t index;
    for (index = 0; index < 4; index++) {
        if (encoder_data == encoder_left[index]) {mode_encoder = 0;}  //left mode
 12c:	91 91       	ld	r25, Z+
 12e:	98 17       	cp	r25, r24
 130:	b1 f0       	breq	.+44     	; 0x15e <encoders+0x72>
        else if (encoder_data == encoder_right[index]) {mode_encoder = 1;}  //right mode
 132:	9c 91       	ld	r25, X
 134:	98 17       	cp	r25, r24
 136:	a9 f0       	breq	.+42     	; 0x162 <encoders+0x76>
 138:	11 96       	adiw	r26, 0x01	; 1
    PORTE = 0x00; //SH/LD = 0 CLK_INH = 0
    PORTE |= 0x80; //SH/LD = 1 CLK_INH = 0
    
    //loops through each encoder data array, and selects the encoder mode for the state machine
    uint8_t index;
    for (index = 0; index < 4; index++) {
 13a:	e2 17       	cp	r30, r18
 13c:	f3 07       	cpc	r31, r19
 13e:	b1 f7       	brne	.-20     	; 0x12c <encoders+0x40>
        else if (encoder_data == encoder_right[index]) {mode_encoder = 1;}  //right mode
    }
    
    //state machine that determines the increment sign and amount, according to encoder data
    //from the previous state
    switch (mode_encoder){
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	89 f4       	brne	.+34     	; 0x166 <encoders+0x7a>
                }// if the previous data is equal to 0xFF
            }
            break;
            
        case 1: //right mode
            if (encoder_data == 0xF7) {
 144:	87 3f       	cpi	r24, 0xF7	; 247
 146:	21 f1       	breq	.+72     	; 0x190 <encoders+0xa4>
            }
            break;
            
    }
    //storing the current encoder data to be used for next interrupt call
    old_encoder_data = encoder_data;
 148:	80 93 25 01 	sts	0x0125, r24
}
 14c:	28 96       	adiw	r28, 0x08	; 8
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret
    PORTE |= 0x80; //SH/LD = 1 CLK_INH = 0
    
    //loops through each encoder data array, and selects the encoder mode for the state machine
    uint8_t index;
    for (index = 0; index < 4; index++) {
        if (encoder_data == encoder_left[index]) {mode_encoder = 0;}  //left mode
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	eb cf       	rjmp	.-42     	; 0x138 <encoders+0x4c>
        else if (encoder_data == encoder_right[index]) {mode_encoder = 1;}  //right mode
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	e9 cf       	rjmp	.-46     	; 0x138 <encoders+0x4c>
    //state machine that determines the increment sign and amount, according to encoder data
    //from the previous state
    switch (mode_encoder){
            
        case 0: //left mode
            if (encoder_data == 0xFD) {
 166:	8d 3f       	cpi	r24, 0xFD	; 253
 168:	79 f7       	brne	.-34     	; 0x148 <encoders+0x5c>
                //turn clockwise, number is incremented
                if ((encoder_data - old_encoder_data) == 1) {
 16a:	90 91 25 01 	lds	r25, 0x0125
 16e:	2d ef       	ldi	r18, 0xFD	; 253
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	29 1b       	sub	r18, r25
 174:	31 09       	sbc	r19, r1
 176:	21 30       	cpi	r18, 0x01	; 1
 178:	31 05       	cpc	r19, r1
 17a:	b9 f0       	breq	.+46     	; 0x1aa <encoders+0xbe>
                    inc_amount = 1;
                    num_sign = 1;
                }// if the previous data is equal to 0xFC
                
                //turn counterclockwise, number is decremented
                else if ((encoder_data - old_encoder_data) == -2){
 17c:	2e 3f       	cpi	r18, 0xFE	; 254
 17e:	3f 4f       	sbci	r19, 0xFF	; 255
 180:	19 f7       	brne	.-58     	; 0x148 <encoders+0x5c>
                    inc_amount = 1;
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	90 93 28 01 	sts	0x0128, r25
                    num_sign = -1;
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	90 93 26 01 	sts	0x0126, r25
 18e:	dc cf       	rjmp	.-72     	; 0x148 <encoders+0x5c>
            }
            break;
            
        case 1: //right mode
            if (encoder_data == 0xF7) {
                if ((encoder_data - old_encoder_data) == 4) {
 190:	90 91 25 01 	lds	r25, 0x0125
 194:	27 ef       	ldi	r18, 0xF7	; 247
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	29 1b       	sub	r18, r25
 19a:	31 09       	sbc	r19, r1
 19c:	24 30       	cpi	r18, 0x04	; 4
 19e:	31 05       	cpc	r19, r1
 1a0:	21 f0       	breq	.+8      	; 0x1aa <encoders+0xbe>
                    inc_amount = 1;
                    num_sign = 1;
                }// if the previous data is equal to 0xF3
                
                else if ((encoder_data - old_encoder_data) == -8){
 1a2:	28 3f       	cpi	r18, 0xF8	; 248
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	81 f6       	brne	.-96     	; 0x148 <encoders+0x5c>
 1a8:	ec cf       	rjmp	.-40     	; 0x182 <encoders+0x96>
            
        case 0: //left mode
            if (encoder_data == 0xFD) {
                //turn clockwise, number is incremented
                if ((encoder_data - old_encoder_data) == 1) {
                    inc_amount = 1;
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	90 93 28 01 	sts	0x0128, r25
                    num_sign = 1;
 1b0:	90 93 26 01 	sts	0x0126, r25
 1b4:	c9 cf       	rjmp	.-110    	; 0x148 <encoders+0x5c>

000001b6 <__vector_16>:
/***********************************************************************/
//                              ISR
// This TIMER0 vector will run when the interrupt occurs, it executes
// the encoders() method and send the data of bar graph display by using the SPI databus
//***********************************************************************/
ISR(TIMER0_OVF_vect){
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	0b b6       	in	r0, 0x3b	; 59
 1c2:	0f 92       	push	r0
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
    
    encoders(SPDR); //contains a state machine that determines increment amount and sign
 1dc:	8f b1       	in	r24, 0x0f	; 15
 1de:	0e 94 76 00 	call	0xec	; 0xec <encoders>
    SPDR = display_mode; //send increment mode to display
 1e2:	80 91 14 01 	lds	r24, 0x0114
 1e6:	8f b9       	out	0x0f, r24	; 15
    
    while (bit_is_clear(SPSR, SPIF)) {}   //wait till data is sent out
 1e8:	77 9b       	sbis	0x0e, 7	; 14
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <__vector_16+0x32>
    PORTB |= (1 << PORTB0); //strobe output data reg in HC595 - rising edge   0x02
 1ec:	c0 9a       	sbi	0x18, 0	; 24
    PORTB &= ~(1 << PORTB0);  //falling edge (clears PORTB)
 1ee:	c0 98       	cbi	0x18, 0	; 24
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0b be       	out	0x3b, r0	; 59
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <chk_buttons>:
//
uint8_t chk_buttons(uint8_t button) {
    
    static uint16_t state[8] = {0x0000}; //holds present state
    if ( !(PINA&0x01) ){ //if PINA is pressed
        state[button] = (state[button] << 1) | (!(PINA&0x01)) | 0xE000;
 216:	e8 2f       	mov	r30, r24
 218:	f0 e0       	ldi	r31, 0x00	; 0
//external loop delay times 12.
//
uint8_t chk_buttons(uint8_t button) {
    
    static uint16_t state[8] = {0x0000}; //holds present state
    if ( !(PINA&0x01) ){ //if PINA is pressed
 21a:	c8 99       	sbic	0x19, 0	; 25
 21c:	1b c0       	rjmp	.+54     	; 0x254 <chk_buttons+0x3e>
        state[button] = (state[button] << 1) | (!(PINA&0x01)) | 0xE000;
 21e:	89 b3       	in	r24, 0x19	; 25
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	eb 5e       	subi	r30, 0xEB	; 235
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	80 95       	com	r24
 22a:	28 2f       	mov	r18, r24
 22c:	21 70       	andi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	30 6e       	ori	r19, 0xE0	; 224
 232:	80 81       	ld	r24, Z
 234:	91 81       	ldd	r25, Z+1	; 0x01
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	28 2b       	or	r18, r24
 23c:	39 2b       	or	r19, r25
 23e:	31 83       	std	Z+1, r19	; 0x01
 240:	20 83       	st	Z, r18
        if (state[0] == 0xF000){ //twelve consecutives 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	20 91 15 01 	lds	r18, 0x0115
 248:	30 91 16 01 	lds	r19, 0x0116
 24c:	21 15       	cp	r18, r1
 24e:	30 4f       	sbci	r19, 0xF0	; 240
 250:	d9 f0       	breq	.+54     	; 0x288 <chk_buttons+0x72>
        
        if (state[button] == 0xF000)
            return 1;
        return 0;
    }
}
 252:	08 95       	ret
        }
        return 1;
    }
    
    else {
        state[button] = (state[button] << 1) | ( !bit_is_clear(PINA,button) ) | 0xE000;
 254:	49 b3       	in	r20, 0x19	; 25
 256:	ee 0f       	add	r30, r30
 258:	ff 1f       	adc	r31, r31
 25a:	eb 5e       	subi	r30, 0xEB	; 235
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	20 81       	ld	r18, Z
 260:	31 81       	ldd	r19, Z+1	; 0x01
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	30 6e       	ori	r19, 0xE0	; 224
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <chk_buttons+0x5a>
 26c:	55 95       	asr	r21
 26e:	47 95       	ror	r20
 270:	8a 95       	dec	r24
 272:	e2 f7       	brpl	.-8      	; 0x26c <chk_buttons+0x56>
 274:	41 70       	andi	r20, 0x01	; 1
 276:	55 27       	eor	r21, r21
 278:	24 2b       	or	r18, r20
 27a:	35 2b       	or	r19, r21
 27c:	31 83       	std	Z+1, r19	; 0x01
 27e:	20 83       	st	Z, r18
        
        if (state[button] == 0xF000)
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	21 15       	cp	r18, r1
 284:	30 4f       	sbci	r19, 0xF0	; 240
 286:	29 f3       	breq	.-54     	; 0x252 <chk_buttons+0x3c>
 288:	80 e0       	ldi	r24, 0x00	; 0
            return 1;
        return 0;
    }
}
 28a:	08 95       	ret

0000028c <segsum>:
//***********************************************************************************
//                                   segment_sum
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
 28c:	ac 01       	movw	r20, r24
    
    segment_data[4]=sum / 1000; //thousand
 28e:	9c 01       	movw	r18, r24
 290:	36 95       	lsr	r19
 292:	27 95       	ror	r18
 294:	36 95       	lsr	r19
 296:	27 95       	ror	r18
 298:	36 95       	lsr	r19
 29a:	27 95       	ror	r18
 29c:	a5 ec       	ldi	r26, 0xC5	; 197
 29e:	b0 e2       	ldi	r27, 0x20	; 32
 2a0:	0e 94 45 03 	call	0x68a	; 0x68a <__umulhisi3>
 2a4:	92 95       	swap	r25
 2a6:	82 95       	swap	r24
 2a8:	8f 70       	andi	r24, 0x0F	; 15
 2aa:	89 27       	eor	r24, r25
 2ac:	9f 70       	andi	r25, 0x0F	; 15
 2ae:	89 27       	eor	r24, r25
 2b0:	80 93 2d 01 	sts	0x012D, r24
    segment_data[3]=(sum / 100) % 10; //hundred
 2b4:	9a 01       	movw	r18, r20
 2b6:	36 95       	lsr	r19
 2b8:	27 95       	ror	r18
 2ba:	36 95       	lsr	r19
 2bc:	27 95       	ror	r18
 2be:	ab e7       	ldi	r26, 0x7B	; 123
 2c0:	b4 e1       	ldi	r27, 0x14	; 20
 2c2:	0e 94 45 03 	call	0x68a	; 0x68a <__umulhisi3>
 2c6:	fc 01       	movw	r30, r24
 2c8:	f6 95       	lsr	r31
 2ca:	e7 95       	ror	r30
 2cc:	9f 01       	movw	r18, r30
 2ce:	ad ec       	ldi	r26, 0xCD	; 205
 2d0:	bc ec       	ldi	r27, 0xCC	; 204
 2d2:	0e 94 45 03 	call	0x68a	; 0x68a <__umulhisi3>
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	96 95       	lsr	r25
 2e0:	87 95       	ror	r24
 2e2:	bc 01       	movw	r22, r24
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	68 0f       	add	r22, r24
 2f6:	79 1f       	adc	r23, r25
 2f8:	e6 1b       	sub	r30, r22
 2fa:	f7 0b       	sbc	r31, r23
 2fc:	e0 93 2c 01 	sts	0x012C, r30
    segment_data[1]=(sum / 10) % 10; //ten
 300:	9a 01       	movw	r18, r20
 302:	0e 94 45 03 	call	0x68a	; 0x68a <__umulhisi3>
 306:	fc 01       	movw	r30, r24
 308:	f6 95       	lsr	r31
 30a:	e7 95       	ror	r30
 30c:	f6 95       	lsr	r31
 30e:	e7 95       	ror	r30
 310:	f6 95       	lsr	r31
 312:	e7 95       	ror	r30
 314:	9f 01       	movw	r18, r30
 316:	0e 94 45 03 	call	0x68a	; 0x68a <__umulhisi3>
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	9c 01       	movw	r18, r24
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	28 0f       	add	r18, r24
 33a:	39 1f       	adc	r19, r25
 33c:	cf 01       	movw	r24, r30
 33e:	82 1b       	sub	r24, r18
 340:	93 0b       	sbc	r25, r19
 342:	80 93 2a 01 	sts	0x012A, r24
    segment_data[0]=sum % 10; //one
 346:	cf 01       	movw	r24, r30
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	ee 0f       	add	r30, r30
 352:	ff 1f       	adc	r31, r31
 354:	ee 0f       	add	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	8e 0f       	add	r24, r30
 35a:	9f 1f       	adc	r25, r31
 35c:	48 1b       	sub	r20, r24
 35e:	59 0b       	sbc	r21, r25
 360:	40 93 29 01 	sts	0x0129, r20
 364:	08 95       	ret

00000366 <displayDigit>:
//***********************************************************************************
//                                   displayDigit
//displays the number on each of the digits
//if there are leading zeroes (such as 0020), then the leading zeroes are truncated
//and only 20 is displayed on the seven segment
void displayDigit(int number, int one, int ten, int hundred, int thousand){
 366:	0f 93       	push	r16
 368:	a1 e0       	ldi	r26, 0x01	; 1
 36a:	b0 e0       	ldi	r27, 0x00	; 0
                break;
                
            //turns Q2 on (Y1 LOW)
            case 1:
                if(number > 9){
                    PORTB = 0x10;
 36c:	50 e1       	ldi	r21, 0x10	; 16
                break;
                
            //turns Q4 on (Y3 LOW)
            case 3:
                if(number > 99){
                    PORTB = 0x30;
 36e:	30 e3       	ldi	r19, 0x30	; 48
 370:	fd 01       	movw	r30, r26
 372:	31 97       	sbiw	r30, 0x01	; 1
        //since the 3-8 decoder ony gives mutually exclusive output
        //this is done quickly so all segments look lit up simultaneously
        //because the transistor supplying current to each seven seg is a PNP
        //active LOW switches on the transistor
        //refer to decoder datasheet and LED schematic for more detail
        switch ( counter ){
 374:	e1 30       	cpi	r30, 0x01	; 1
 376:	f1 05       	cpc	r31, r1
 378:	f1 f0       	breq	.+60     	; 0x3b6 <displayDigit+0x50>
 37a:	e2 30       	cpi	r30, 0x02	; 2
 37c:	f1 05       	cpc	r31, r1
 37e:	5c f0       	brlt	.+22     	; 0x396 <displayDigit+0x30>
 380:	e3 30       	cpi	r30, 0x03	; 3
 382:	f1 05       	cpc	r31, r1
 384:	29 f1       	breq	.+74     	; 0x3d0 <displayDigit+0x6a>
 386:	34 97       	sbiw	r30, 0x04	; 4
 388:	81 f5       	brne	.+96     	; 0x3ea <displayDigit+0x84>
                }
                break;
                
            //turns Q5 on (Y4 LOW)
            case 4:
                if(number > 999 && number < 1024) {
 38a:	88 5e       	subi	r24, 0xE8	; 232
 38c:	93 40       	sbci	r25, 0x03	; 3
 38e:	48 97       	sbiw	r24, 0x18	; 24
 390:	88 f1       	brcs	.+98     	; 0x3f4 <displayDigit+0x8e>
                
        }//switch
        
    }//for
    return;
}
 392:	0f 91       	pop	r16
 394:	08 95       	ret
        //since the 3-8 decoder ony gives mutually exclusive output
        //this is done quickly so all segments look lit up simultaneously
        //because the transistor supplying current to each seven seg is a PNP
        //active LOW switches on the transistor
        //refer to decoder datasheet and LED schematic for more detail
        switch ( counter ){
 396:	ef 2b       	or	r30, r31
 398:	41 f5       	brne	.+80     	; 0x3ea <displayDigit+0x84>
                
            //turns Q1 on (Y0 LOW)
            case 0:
                PORTB = 0x00;
 39a:	18 ba       	out	0x18, r1	; 24
                PORTA = one;
 39c:	6b bb       	out	0x1b, r22	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	ef e3       	ldi	r30, 0x3F	; 63
 3a0:	ff e1       	ldi	r31, 0x1F	; 31
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <displayDigit+0x3c>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <displayDigit+0x42>
 3a8:	00 00       	nop
 3aa:	11 96       	adiw	r26, 0x01	; 1
 3ac:	fd 01       	movw	r30, r26
 3ae:	31 97       	sbiw	r30, 0x01	; 1
        //since the 3-8 decoder ony gives mutually exclusive output
        //this is done quickly so all segments look lit up simultaneously
        //because the transistor supplying current to each seven seg is a PNP
        //active LOW switches on the transistor
        //refer to decoder datasheet and LED schematic for more detail
        switch ( counter ){
 3b0:	e1 30       	cpi	r30, 0x01	; 1
 3b2:	f1 05       	cpc	r31, r1
 3b4:	11 f7       	brne	.-60     	; 0x37a <displayDigit+0x14>
                //too low of a delay and the one of the digits will be dimmer
                break;
                
            //turns Q2 on (Y1 LOW)
            case 1:
                if(number > 9){
 3b6:	8a 30       	cpi	r24, 0x0A	; 10
 3b8:	91 05       	cpc	r25, r1
 3ba:	bc f3       	brlt	.-18     	; 0x3aa <displayDigit+0x44>
                    PORTB = 0x10;
 3bc:	58 bb       	out	0x18, r21	; 24
                    PORTA = ten;
 3be:	4b bb       	out	0x1b, r20	; 27
 3c0:	ef e3       	ldi	r30, 0x3F	; 63
 3c2:	ff e1       	ldi	r31, 0x1F	; 31
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <displayDigit+0x5e>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <displayDigit+0x64>
 3ca:	00 00       	nop
 3cc:	11 96       	adiw	r26, 0x01	; 1
 3ce:	ee cf       	rjmp	.-36     	; 0x3ac <displayDigit+0x46>
                }
                break;
                
            //turns Q4 on (Y3 LOW)
            case 3:
                if(number > 99){
 3d0:	84 36       	cpi	r24, 0x64	; 100
 3d2:	91 05       	cpc	r25, r1
 3d4:	54 f3       	brlt	.-44     	; 0x3aa <displayDigit+0x44>
                    PORTB = 0x30;
 3d6:	38 bb       	out	0x18, r19	; 24
                    PORTA = hundred;
 3d8:	2b bb       	out	0x1b, r18	; 27
 3da:	ef e3       	ldi	r30, 0x3F	; 63
 3dc:	ff e1       	ldi	r31, 0x1F	; 31
 3de:	31 97       	sbiw	r30, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <displayDigit+0x78>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <displayDigit+0x7e>
 3e4:	00 00       	nop
 3e6:	11 96       	adiw	r26, 0x01	; 1
 3e8:	e1 cf       	rjmp	.-62     	; 0x3ac <displayDigit+0x46>
//if there are leading zeroes (such as 0020), then the leading zeroes are truncated
//and only 20 is displayed on the seven segment
void displayDigit(int number, int one, int ten, int hundred, int thousand){
    
    int counter = 0;
    for ( counter = 0; counter < 5; counter++ ){
 3ea:	a5 30       	cpi	r26, 0x05	; 5
 3ec:	b1 05       	cpc	r27, r1
 3ee:	89 f2       	breq	.-94     	; 0x392 <displayDigit+0x2c>
 3f0:	11 96       	adiw	r26, 0x01	; 1
 3f2:	dc cf       	rjmp	.-72     	; 0x3ac <displayDigit+0x46>
                break;
                
            //turns Q5 on (Y4 LOW)
            case 4:
                if(number > 999 && number < 1024) {
                    PORTB = 0x40;
 3f4:	80 e4       	ldi	r24, 0x40	; 64
 3f6:	88 bb       	out	0x18, r24	; 24
                    PORTA = thousand;
 3f8:	0b bb       	out	0x1b, r16	; 27
 3fa:	8f e3       	ldi	r24, 0x3F	; 63
 3fc:	9f e1       	ldi	r25, 0x1F	; 31
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <displayDigit+0x98>
 402:	00 c0       	rjmp	.+0      	; 0x404 <displayDigit+0x9e>
 404:	00 00       	nop
                
        }//switch
        
    }//for
    return;
}
 406:	0f 91       	pop	r16
 408:	08 95       	ret

0000040a <getBin>:
//***********************************************************************************

//                  getBin()
//takes in a BCD number, and returns the binary number that turns on the correct LED
//on the seven segment board
int getBin(number){
 40a:	8a 30       	cpi	r24, 0x0A	; 10
 40c:	91 05       	cpc	r25, r1
 40e:	40 f4       	brcc	.+16     	; 0x420 <getBin+0x16>
 410:	fc 01       	movw	r30, r24
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	e0 50       	subi	r30, 0x00	; 0
 418:	ff 4f       	sbci	r31, 0xFF	; 255
 41a:	80 81       	ld	r24, Z
 41c:	91 81       	ldd	r25, Z+1	; 0x01
 41e:	08 95       	ret
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	90 e0       	ldi	r25, 0x00	; 0
            break;
            
    }//switch
    
    return 0;
}
 424:	08 95       	ret

00000426 <main>:
    //MISO   input
    //SS     output
    //MOSI   output
    //SCLK   output
    //these bits are built into PORTB
    DDRB = 0xF7;
 426:	87 ef       	ldi	r24, 0xF7	; 247
 428:	87 bb       	out	0x17, r24	; 23
    
    DDRE |= 0xC0; // set CLK_INH and SH/LD as output
 42a:	82 b1       	in	r24, 0x02	; 2
 42c:	80 6c       	ori	r24, 0xC0	; 192
 42e:	82 b9       	out	0x02, r24	; 2
    DDRA = 0x00;  // set PORTA as all inputs from seven-segment
 430:	1a ba       	out	0x1a, r1	; 26
// Initializes timer/counter0 (TCNT0). TCNT0 runs in async mode
// with external 32khz crystal.  Runs in normal mode with no prescaling.
// Interrupt occurs at overflow 0xFF.
/***********************************************************************/
void tcnt0_init(void){
    ASSR   |=  (1<<AS0);  //ext osc TOSC
 432:	80 b7       	in	r24, 0x30	; 48
 434:	88 60       	ori	r24, 0x08	; 8
 436:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
 438:	87 b7       	in	r24, 0x37	; 55
 43a:	81 60       	ori	r24, 0x01	; 1
 43c:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1<<CS00);  //normal mode, clk/128 from prescaler
 43e:	83 b7       	in	r24, 0x33	; 51
 440:	81 60       	ori	r24, 0x01	; 1
 442:	83 bf       	out	0x33, r24	; 51
// external device specific initializations.  Sets up SPI to be:
// master mode, clock=clk/2, cycle half phase, low polarity, MSB first
// interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    SPCR  |=   (1<<SPE)|(1<<MSTR);  //set up SPI mode
 444:	8d b1       	in	r24, 0x0d	; 13
 446:	80 65       	ori	r24, 0x50	; 80
 448:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1<<SPI2X);          // double speed operation
 44a:	70 9a       	sbi	0x0e, 0	; 14
    DDRE |= 0xC0; // set CLK_INH and SH/LD as output
    DDRA = 0x00;  // set PORTA as all inputs from seven-segment
    
    tcnt0_init(); //initializes counter timer 0
    spi_init(); //initializes the SPI databus
    sei(); //enable global interrupts
 44c:	78 94       	sei
// update the seven segment display
uint8_t main(){
    
    int number = 0; //number to be displayed
    uint8_t mode; //1 - 1 increment, 2 - 2 increment, 4 - 4 increment
    uint8_t prev_button = 0;
 44e:	b1 2c       	mov	r11, r1
// break up the number into seven-segment presentable form (decimal to BCD)
// make portA output for the seven segment
// update the seven segment display
uint8_t main(){
    
    int number = 0; //number to be displayed
 450:	c0 e0       	ldi	r28, 0x00	; 0
 452:	d0 e0       	ldi	r29, 0x00	; 0
    spi_init(); //initializes the SPI databus
    sei(); //enable global interrupts
    
    while(1){
        
        PORTA = 0xFF; //PORTA Pullups
 454:	ee 24       	eor	r14, r14
 456:	ea 94       	dec	r14
        
        //enable tristate buffer for pushbutton switches
        //this gives Y7 a LOW output, which enables the pushbutton switches
        PORTB = 0x70;
 458:	80 e7       	ldi	r24, 0x70	; 112
 45a:	c8 2e       	mov	r12, r24
                multiple = 2;
                display_mode &= 0x00; //reset...
                display_mode |= 0x03; //...and the set
                break;
            case 4:
                multiple = 4;
 45c:	94 e0       	ldi	r25, 0x04	; 4
 45e:	a9 2e       	mov	r10, r25
                display_mode &= 0x00; //reset...
                display_mode |= 0x0F; //...and then set
 460:	2f e0       	ldi	r18, 0x0F	; 15
 462:	92 2e       	mov	r9, r18
                
            case 0:
                multiple = 0;
                break;
            case 1:
                multiple = 1;
 464:	88 24       	eor	r8, r8
 466:	83 94       	inc	r8
                display_mode &= 0x00;
                break;
            case 2:
                multiple = 2;
                display_mode &= 0x00; //reset...
                display_mode |= 0x03; //...and the set
 468:	33 e0       	ldi	r19, 0x03	; 3
 46a:	73 2e       	mov	r7, r19
        
        inc_amount = 0;//reset the incremented amount, which is set in ISR. very important, or else
        //the number increments/decrements without stop
        
        //disable tristate buffer for pushbutton switches
        PORTB = 0x5F;
 46c:	4f e5       	ldi	r20, 0x5F	; 95
 46e:	d4 2e       	mov	r13, r20
 470:	d4 c0       	rjmp	.+424    	; 0x61a <main+0x1f4>
        for(index=6; index<8; index++){ //polls only S6 and S7
            
            if(chk_buttons(index)){
                int button = index;
                if(button == 6){
                    if(prev_button == 6) mode = 1; //if pressed twice, increment by 1
 472:	86 e0       	ldi	r24, 0x06	; 6
 474:	b8 16       	cp	r11, r24
 476:	09 f4       	brne	.+2      	; 0x47a <main+0x54>
 478:	05 c1       	rjmp	.+522    	; 0x684 <main+0x25e>
                    else if (prev_button == 7) mode = 0;//if S6 and S7 pressed together, reset
 47a:	87 e0       	ldi	r24, 0x07	; 7
 47c:	b8 16       	cp	r11, r24
 47e:	09 f4       	brne	.+2      	; 0x482 <main+0x5c>
 480:	ef c0       	rjmp	.+478    	; 0x660 <main+0x23a>
                    else{
                        mode = 2;
 482:	02 e0       	ldi	r16, 0x02	; 2
 484:	f0 2e       	mov	r15, r16
        //if S6 is pressed once, increment by 2. if pressed once, increment by 1
        //if S7 is pressed once, increment by 4. if pressed once, increment by 1
        uint8_t index;
        for(index=6; index<8; index++){ //polls only S6 and S7
            
            if(chk_buttons(index)){
 486:	87 e0       	ldi	r24, 0x07	; 7
 488:	0e 94 0b 01 	call	0x216	; 0x216 <chk_buttons>
 48c:	81 11       	cpse	r24, r1
 48e:	e2 c0       	rjmp	.+452    	; 0x654 <main+0x22e>
 490:	56 e0       	ldi	r21, 0x06	; 6
 492:	b5 2e       	mov	r11, r21
            
        }//for
        
        //depending on mode, different LED lights up on the bar graph
        //a reset to 0 is also supported
        switch(mode){
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	f8 16       	cp	r15, r24
 498:	09 f4       	brne	.+2      	; 0x49c <main+0x76>
 49a:	e7 c0       	rjmp	.+462    	; 0x66a <main+0x244>
 49c:	f8 16       	cp	r15, r24
 49e:	08 f4       	brcc	.+2      	; 0x4a2 <main+0x7c>
 4a0:	db c0       	rjmp	.+438    	; 0x658 <main+0x232>
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	f8 16       	cp	r15, r24
 4a6:	09 f4       	brne	.+2      	; 0x4aa <main+0x84>
 4a8:	e8 c0       	rjmp	.+464    	; 0x67a <main+0x254>
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	f8 12       	cpse	r15, r24
 4ae:	06 c0       	rjmp	.+12     	; 0x4bc <main+0x96>
                multiple = 2;
                display_mode &= 0x00; //reset...
                display_mode |= 0x03; //...and the set
                break;
            case 4:
                multiple = 4;
 4b0:	a0 92 27 01 	sts	0x0127, r10
                display_mode &= 0x00; //reset...
                display_mode |= 0x0F; //...and then set
 4b4:	90 92 14 01 	sts	0x0114, r9
                break;
 4b8:	b4 e0       	ldi	r27, 0x04	; 4
 4ba:	fb 2e       	mov	r15, r27
        }
        
        //display number in the range of 0-1023, supporting both positive and negative overflow
        if( (number < 1024) && (number >= 0) ){
 4bc:	c1 15       	cp	r28, r1
 4be:	84 e0       	ldi	r24, 0x04	; 4
 4c0:	d8 07       	cpc	r29, r24
 4c2:	80 f4       	brcc	.+32     	; 0x4e4 <main+0xbe>
            number += inc_amount * num_sign * multiple; //normal increment/decrement/reset
 4c4:	20 91 28 01 	lds	r18, 0x0128
 4c8:	80 91 26 01 	lds	r24, 0x0126
 4cc:	28 02       	muls	r18, r24
 4ce:	90 01       	movw	r18, r0
 4d0:	11 24       	eor	r1, r1
 4d2:	40 91 27 01 	lds	r20, 0x0127
 4d6:	42 9f       	mul	r20, r18
 4d8:	c0 01       	movw	r24, r0
 4da:	43 9f       	mul	r20, r19
 4dc:	90 0d       	add	r25, r0
 4de:	11 24       	eor	r1, r1
 4e0:	c8 0f       	add	r28, r24
 4e2:	d9 1f       	adc	r29, r25
        }
        if (number >= 1024) number -= 1023; //positive overflow handling
 4e4:	c1 15       	cp	r28, r1
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	d8 07       	cpc	r29, r24
 4ea:	0c f4       	brge	.+2      	; 0x4ee <main+0xc8>
 4ec:	af c0       	rjmp	.+350    	; 0x64c <main+0x226>
 4ee:	cf 5f       	subi	r28, 0xFF	; 255
 4f0:	d3 40       	sbci	r29, 0x03	; 3
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
    
    segment_data[4]=sum / 1000; //thousand
 4f2:	9e 01       	movw	r18, r28
 4f4:	36 95       	lsr	r19
 4f6:	27 95       	ror	r18
 4f8:	36 95       	lsr	r19
 4fa:	27 95       	ror	r18
 4fc:	36 95       	lsr	r19
 4fe:	27 95       	ror	r18
 500:	a5 ec       	ldi	r26, 0xC5	; 197
 502:	b0 e2       	ldi	r27, 0x20	; 32
 504:	0e 94 45 03 	call	0x68a	; 0x68a <__umulhisi3>
 508:	8c 01       	movw	r16, r24
 50a:	12 95       	swap	r17
 50c:	02 95       	swap	r16
 50e:	0f 70       	andi	r16, 0x0F	; 15
 510:	01 27       	eor	r16, r17
 512:	1f 70       	andi	r17, 0x0F	; 15
 514:	01 27       	eor	r16, r17
 516:	00 93 2d 01 	sts	0x012D, r16
    segment_data[3]=(sum / 100) % 10; //hundred
 51a:	9e 01       	movw	r18, r28
 51c:	36 95       	lsr	r19
 51e:	27 95       	ror	r18
 520:	36 95       	lsr	r19
 522:	27 95       	ror	r18
 524:	ab e7       	ldi	r26, 0x7B	; 123
 526:	b4 e1       	ldi	r27, 0x14	; 20
 528:	0e 94 45 03 	call	0x68a	; 0x68a <__umulhisi3>
 52c:	ac 01       	movw	r20, r24
 52e:	56 95       	lsr	r21
 530:	47 95       	ror	r20
 532:	9a 01       	movw	r18, r20
 534:	ad ec       	ldi	r26, 0xCD	; 205
 536:	bc ec       	ldi	r27, 0xCC	; 204
 538:	0e 94 45 03 	call	0x68a	; 0x68a <__umulhisi3>
 53c:	fc 01       	movw	r30, r24
 53e:	f6 95       	lsr	r31
 540:	e7 95       	ror	r30
 542:	f6 95       	lsr	r31
 544:	e7 95       	ror	r30
 546:	f6 95       	lsr	r31
 548:	e7 95       	ror	r30
 54a:	cf 01       	movw	r24, r30
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	ee 0f       	add	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	8e 0f       	add	r24, r30
 55e:	9f 1f       	adc	r25, r31
 560:	fa 01       	movw	r30, r20
 562:	e8 1b       	sub	r30, r24
 564:	f9 0b       	sbc	r31, r25
 566:	e0 93 2c 01 	sts	0x012C, r30
    segment_data[1]=(sum / 10) % 10; //ten
 56a:	9e 01       	movw	r18, r28
 56c:	0e 94 45 03 	call	0x68a	; 0x68a <__umulhisi3>
 570:	ac 01       	movw	r20, r24
 572:	56 95       	lsr	r21
 574:	47 95       	ror	r20
 576:	56 95       	lsr	r21
 578:	47 95       	ror	r20
 57a:	56 95       	lsr	r21
 57c:	47 95       	ror	r20
 57e:	9a 01       	movw	r18, r20
 580:	0e 94 45 03 	call	0x68a	; 0x68a <__umulhisi3>
 584:	96 95       	lsr	r25
 586:	87 95       	ror	r24
 588:	96 95       	lsr	r25
 58a:	87 95       	ror	r24
 58c:	96 95       	lsr	r25
 58e:	87 95       	ror	r24
 590:	9c 01       	movw	r18, r24
 592:	22 0f       	add	r18, r18
 594:	33 1f       	adc	r19, r19
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	28 0f       	add	r18, r24
 5a4:	39 1f       	adc	r19, r25
 5a6:	ca 01       	movw	r24, r20
 5a8:	82 1b       	sub	r24, r18
 5aa:	93 0b       	sbc	r25, r19
 5ac:	80 93 2a 01 	sts	0x012A, r24
    segment_data[0]=sum % 10; //one
 5b0:	9a 01       	movw	r18, r20
 5b2:	22 0f       	add	r18, r18
 5b4:	33 1f       	adc	r19, r19
 5b6:	44 0f       	add	r20, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	44 0f       	add	r20, r20
 5bc:	55 1f       	adc	r21, r21
 5be:	44 0f       	add	r20, r20
 5c0:	55 1f       	adc	r21, r21
 5c2:	24 0f       	add	r18, r20
 5c4:	35 1f       	adc	r19, r21
 5c6:	de 01       	movw	r26, r28
 5c8:	a2 1b       	sub	r26, r18
 5ca:	b3 0b       	sbc	r27, r19
 5cc:	a0 93 29 01 	sts	0x0129, r26
 5d0:	aa 0f       	add	r26, r26
 5d2:	bb 1f       	adc	r27, r27
 5d4:	a0 50       	subi	r26, 0x00	; 0
 5d6:	bf 4f       	sbci	r27, 0xFF	; 255
 5d8:	6d 91       	ld	r22, X+
 5da:	7c 91       	ld	r23, X
 5dc:	dc 01       	movw	r26, r24
 5de:	aa 0f       	add	r26, r26
 5e0:	bb 1f       	adc	r27, r27
 5e2:	a0 50       	subi	r26, 0x00	; 0
 5e4:	bf 4f       	sbci	r27, 0xFF	; 255
 5e6:	4d 91       	ld	r20, X+
 5e8:	5c 91       	ld	r21, X
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	e0 50       	subi	r30, 0x00	; 0
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	20 81       	ld	r18, Z
 5f4:	31 81       	ldd	r19, Z+1	; 0x01
 5f6:	0a 30       	cpi	r16, 0x0A	; 10
 5f8:	11 05       	cpc	r17, r1
 5fa:	28 f5       	brcc	.+74     	; 0x646 <main+0x220>
 5fc:	f8 01       	movw	r30, r16
 5fe:	ee 0f       	add	r30, r30
 600:	ff 1f       	adc	r31, r31
 602:	e0 50       	subi	r30, 0x00	; 0
 604:	ff 4f       	sbci	r31, 0xFF	; 255
 606:	00 81       	ld	r16, Z
 608:	11 81       	ldd	r17, Z+1	; 0x01
        int ones_bin = getBin(segment_data[0]);
        int tens_bin = getBin(segment_data[1]);
        int hundreds_bin = getBin(segment_data[3]);
        int thousands_bin = getBin(segment_data[4]);
        
        inc_amount = 0;//reset the incremented amount, which is set in ISR. very important, or else
 60a:	10 92 28 01 	sts	0x0128, r1
        //the number increments/decrements without stop
        
        //disable tristate buffer for pushbutton switches
        PORTB = 0x5F;
 60e:	d8 ba       	out	0x18, r13	; 24
        
        //make PORTA an output (seven segments and the decimal)
        DDRA = 0xFF;
 610:	ea ba       	out	0x1a, r14	; 26
        
        //reset PORTA
        PORTA = 0x00;
 612:	1b ba       	out	0x1b, r1	; 27
        
        //displays the digits on the seven segment
        displayDigit(number, ones_bin, tens_bin, hundreds_bin, thousands_bin);
 614:	ce 01       	movw	r24, r28
 616:	0e 94 b3 01 	call	0x366	; 0x366 <displayDigit>
    spi_init(); //initializes the SPI databus
    sei(); //enable global interrupts
    
    while(1){
        
        PORTA = 0xFF; //PORTA Pullups
 61a:	eb ba       	out	0x1b, r14	; 27
        
        //enable tristate buffer for pushbutton switches
        //this gives Y7 a LOW output, which enables the pushbutton switches
        PORTB = 0x70;
 61c:	c8 ba       	out	0x18, r12	; 24
        //if S6 is pressed once, increment by 2. if pressed once, increment by 1
        //if S7 is pressed once, increment by 4. if pressed once, increment by 1
        uint8_t index;
        for(index=6; index<8; index++){ //polls only S6 and S7
            
            if(chk_buttons(index)){
 61e:	86 e0       	ldi	r24, 0x06	; 6
 620:	0e 94 0b 01 	call	0x216	; 0x216 <chk_buttons>
 624:	81 11       	cpse	r24, r1
 626:	25 cf       	rjmp	.-438    	; 0x472 <main+0x4c>
 628:	87 e0       	ldi	r24, 0x07	; 7
 62a:	0e 94 0b 01 	call	0x216	; 0x216 <chk_buttons>
 62e:	88 23       	and	r24, r24
 630:	09 f4       	brne	.+2      	; 0x634 <main+0x20e>
 632:	30 cf       	rjmp	.-416    	; 0x494 <main+0x6e>
                        //for next loop
                    }
                }//if
            
                else if (button == 7){
                    if( prev_button == 7 ) mode = 1; //if pressed twice, increment by 1
 634:	87 e0       	ldi	r24, 0x07	; 7
 636:	b8 16       	cp	r11, r24
 638:	c1 f0       	breq	.+48     	; 0x66a <main+0x244>
                    else if ( prev_button == 6 ) mode = 0;//if S6 or S7 pressed together, reset
 63a:	86 e0       	ldi	r24, 0x06	; 6
 63c:	b8 16       	cp	r11, r24
 63e:	51 f0       	breq	.+20     	; 0x654 <main+0x22e>
        //button 6 and 7 are used to set increment mode
        //if both buttons are pressed simultaneously, reset
        //if S6 is pressed once, increment by 2. if pressed once, increment by 1
        //if S7 is pressed once, increment by 4. if pressed once, increment by 1
        uint8_t index;
        for(index=6; index<8; index++){ //polls only S6 and S7
 640:	17 e0       	ldi	r17, 0x07	; 7
 642:	b1 2e       	mov	r11, r17
 644:	35 cf       	rjmp	.-406    	; 0x4b0 <main+0x8a>
void segsum(uint16_t sum) {
    
    segment_data[4]=sum / 1000; //thousand
    segment_data[3]=(sum / 100) % 10; //hundred
    segment_data[1]=(sum / 10) % 10; //ten
    segment_data[0]=sum % 10; //one
 646:	0f ef       	ldi	r16, 0xFF	; 255
 648:	10 e0       	ldi	r17, 0x00	; 0
 64a:	df cf       	rjmp	.-66     	; 0x60a <main+0x1e4>
        //display number in the range of 0-1023, supporting both positive and negative overflow
        if( (number < 1024) && (number >= 0) ){
            number += inc_amount * num_sign * multiple; //normal increment/decrement/reset
        }
        if (number >= 1024) number -= 1023; //positive overflow handling
        if (number < 0) number += 1024; //negative overflow handling
 64c:	d7 ff       	sbrs	r29, 7
 64e:	51 cf       	rjmp	.-350    	; 0x4f2 <main+0xcc>
 650:	dc 5f       	subi	r29, 0xFC	; 252
 652:	4f cf       	rjmp	.-354    	; 0x4f2 <main+0xcc>
        //if S6 is pressed once, increment by 2. if pressed once, increment by 1
        //if S7 is pressed once, increment by 4. if pressed once, increment by 1
        uint8_t index;
        for(index=6; index<8; index++){ //polls only S6 and S7
            
            if(chk_buttons(index)){
 654:	46 e0       	ldi	r20, 0x06	; 6
 656:	b4 2e       	mov	r11, r20
        //depending on mode, different LED lights up on the bar graph
        //a reset to 0 is also supported
        switch(mode){
                
            case 0:
                multiple = 0;
 658:	10 92 27 01 	sts	0x0127, r1
                break;
 65c:	f1 2c       	mov	r15, r1
 65e:	2e cf       	rjmp	.-420    	; 0x4bc <main+0x96>
        //if S6 is pressed once, increment by 2. if pressed once, increment by 1
        //if S7 is pressed once, increment by 4. if pressed once, increment by 1
        uint8_t index;
        for(index=6; index<8; index++){ //polls only S6 and S7
            
            if(chk_buttons(index)){
 660:	87 e0       	ldi	r24, 0x07	; 7
 662:	0e 94 0b 01 	call	0x216	; 0x216 <chk_buttons>
 666:	88 23       	and	r24, r24
 668:	b9 f3       	breq	.-18     	; 0x658 <main+0x232>
                
            case 0:
                multiple = 0;
                break;
            case 1:
                multiple = 1;
 66a:	80 92 27 01 	sts	0x0127, r8
                prev_button = 0;
                display_mode &= 0x00;
 66e:	10 92 14 01 	sts	0x0114, r1
                break;
 672:	ff 24       	eor	r15, r15
 674:	f3 94       	inc	r15
            case 0:
                multiple = 0;
                break;
            case 1:
                multiple = 1;
                prev_button = 0;
 676:	b1 2c       	mov	r11, r1
                display_mode &= 0x00;
                break;
 678:	21 cf       	rjmp	.-446    	; 0x4bc <main+0x96>
            case 2:
                multiple = 2;
 67a:	f0 92 27 01 	sts	0x0127, r15
                display_mode &= 0x00; //reset...
                display_mode |= 0x03; //...and the set
 67e:	70 92 14 01 	sts	0x0114, r7
                break;
 682:	1c cf       	rjmp	.-456    	; 0x4bc <main+0x96>
        for(index=6; index<8; index++){ //polls only S6 and S7
            
            if(chk_buttons(index)){
                int button = index;
                if(button == 6){
                    if(prev_button == 6) mode = 1; //if pressed twice, increment by 1
 684:	ff 24       	eor	r15, r15
 686:	f3 94       	inc	r15
 688:	fe ce       	rjmp	.-516    	; 0x486 <main+0x60>

0000068a <__umulhisi3>:
 68a:	a2 9f       	mul	r26, r18
 68c:	b0 01       	movw	r22, r0
 68e:	b3 9f       	mul	r27, r19
 690:	c0 01       	movw	r24, r0
 692:	a3 9f       	mul	r26, r19
 694:	70 0d       	add	r23, r0
 696:	81 1d       	adc	r24, r1
 698:	11 24       	eor	r1, r1
 69a:	91 1d       	adc	r25, r1
 69c:	b2 9f       	mul	r27, r18
 69e:	70 0d       	add	r23, r0
 6a0:	81 1d       	adc	r24, r1
 6a2:	11 24       	eor	r1, r1
 6a4:	91 1d       	adc	r25, r1
 6a6:	08 95       	ret

000006a8 <_exit>:
 6a8:	f8 94       	cli

000006aa <__stop_program>:
 6aa:	ff cf       	rjmp	.-2      	; 0x6aa <__stop_program>
